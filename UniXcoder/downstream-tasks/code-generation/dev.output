byte [ ] function ( ) { return this . buffer ; }
void function ( ImagePanel arg0 ) { arg0 . removeImagePanel ( ) ; }
void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }
void function ( String [ ] arg0 ) { AssessmentFacade loc0 = new AssessmentFacade ( ) ; loc0 . runAssessmentTest ( ) ; }
List < Integer > function ( ) { return initialAvailableNumer ; }
int function ( int arg0 , int arg1 , int arg2 ) { return arg0 - arg1 ; }
CRL function ( X509Certificate arg0 , String arg1 ) { String loc0 = getStringFromGeneralName ( arg0 . getSubjectDN ( ) , arg1 ) ; return getCRL ( arg0 , loc0 ) ; }
void function ( Script arg0 ) { list . remove ( arg0 ) ; }
IUIConditionHandler function ( ) { return new BrowserShellCondition ( "srini_string" ) ; }
StringBuilder function ( StringBuilder arg0 , char arg1 , char arg2 ) { arg0 . set ( arg1 ) ; arg0 . set ( arg2 ) ; }
void function ( Object arg0 , Object arg1 ) { map . put ( arg0 , arg1 ) ; }
boolean function ( ) { return archiveValidation . get ( ) ; }
void function ( ) { LOGGER . info ( "srini_string" + buildCommand ( ) + "srini_string" ) ; String loc0 = buildCommand ( ) ; LOGGER . info ( "srini_string" + loc0 + "srini_string" ) ; Assert . assertEquals ( "srini_string" , getVaultedPassword ( ) , loc0 ) ; }
List < ApplicationPredecessorRelation > function ( ) { if ( applicationPredecessors == null ) { applicationPredecessors = new ArrayList < ApplicationPredecessorRelation > ( ) ; } return this . applicationPredecessors ; }
void function ( Object arg0 , Exception arg1 ) { log ( Level . TRACE , arg0 , arg1 ) ; }
Iterator function ( ) { synchronized ( this ) { return Collections . unmodifiableList ( this . iteratorChain ) ; } }
void function ( String arg0 ) { dvdProperties . remove ( arg0 ) ; bookProperties . remove ( arg0 ) ; }
void function ( List < Integer > arg0 ) { takeLock . lock ( ) ; try { taskIdsQueue . addAll ( arg0 ) ; } finally { takeLock . unlock ( ) ; } }
void function ( int arg0 ) { this . level = arg0 ; }
void function ( ) { }
ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }
DurationFieldType function ( int arg0 ) { return getFieldTypes ( ) [ arg0 ] ; }
void function ( final Object arg0 ) { this . data = arg0 ; this . offset = 0 ; this . length = NOT_SPECIFIED ; this . header = null ; }
int function ( ) { return flag ; }
void function ( ) { if ( ! lookupEnabled ) { return ; } PeerStatus loc0 = myNode . getPeerStatus ( ) ; if ( loc0 != null ) { lookupEnabled = true ; log . debug ( "srini_string" + loc0 ) ; peerStatus = loc0 ; } }
int function ( ) { return size ; }
Object function ( Class arg0 ) { return map . remove ( arg0 ) ; }
byte [ ] function ( String arg0 ) { try { return arg0 . getBytes ( "srini_string" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 . toString ( ) ) ; } }
ErrorDTO function ( @ PathVariable ( "srini_string" ) String arg0 , @ PathVariable ( "srini_string" ) String arg1 , @ PathVariable ( "srini_string" ) String arg2 , @ PathVariable ( "srini_string" ) String arg3 , @ PathVariable ( "srini_string" ) String arg4 , @ PathVariable ( "srini_string" ) String arg5 , @ PathVariable ( "srini_string" ) String arg6 , @ PathVariable ( "srini_string""srini_string" ) String arg7 , @ PathVariable ( "srini_string" ) String arg8 , @ PathVariable ( "
Builder function ( long arg0 ) { this . connectAttemptsMax = arg0 ; return this ; }
DiGraph function ( ) { final DiGraph loc0 = new DiGraph ( ) ; for ( Vertex loc1 : nodes ) loc0 . addEdge ( loc1 , loc1 ) ; return loc0 ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( arg0 ) ; }
boolean function ( ) { return hasBug1Event ; }
int function ( CharSequence arg0 , CharSequence arg1 ) { return compare ( arg0 , arg1 , false ) ; }
void function ( Object arg0 , Protocol arg1 , Exception arg2 ) { writeError ( arg1 , arg2 ) ; }
ITrace2D function ( ) { return m_trace ; }
int function ( ) { return vertexCount ; }
int function ( ) { int loc0 = 0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < picture . getWidth ( ) ; loc2 ++ ) { for ( int loc3 = 0 ; loc3 < picture . getHeight ( ) ; loc3 ++ ) { loc0 += ( loc2 * loc3 ) ; loc1 += ( loc2 * loc3 ) ; } } return loc0 / loc1 ; }
BaseColor function ( ) { return strokeColor ; }
PropertyMapping function ( String arg0 ) { return collectionPropertyMappingByRole . get ( arg0 ) ; }
void function ( PrintStream arg0 , AST arg1 ) { arg0 . println ( nodeToString ( arg1 ) ) ; }
String function ( String arg0 ) { int loc0 = arg0 . indexOf ( '#' ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return arg0 ; }
void function ( String arg0 , Object arg1 ) { root . writeEnumValue ( arg0 ) ; }
String function ( File arg0 ) { return Unpooled . wrappedBuffer ( Files . newInputStream ( arg0 ) ) . toString ( Charsets . ISO_8859_1 ) ; }
ResourceEditPropertyBuilder function ( Clob arg0 ) { this . propertyComment = arg0 ; return this ; }
Box function ( int arg0 , int arg1 , int arg2 ) { switch ( arg0 ) { case 0 : return createBox ( arg1 , arg2 ) ; case 1 : return createBox ( arg1 , arg2 ) ; case 2 : return createBox ( arg1 , arg2 ) ; case 4 : return createBox ( arg1 , arg2 ) ; case 8 : return createBox ( arg1 , arg2 ) ; default : return null ; } }
C function ( C arg0 , C arg1 , C arg2 , C arg3 , C arg4 , C arg5 ) { return ( C ) ( arg0 . m * arg1 . m + arg2 . m * arg3 . m + arg4 . m * arg4 . m + arg5 . m * arg5 . m ) ; }
SchemaValidatorBuilder function ( ) { strategy . setSchemaResolution ( AvroSchemaResolver . DEFAULT_SCHEMA_RESOLUTION ) ; return this ; }
void function ( ) { Bundle loc0 = context . getBundle ( "srini_string" ) ; loc0 . stop ( ) ; }
long function ( Duration arg0 ) { return arg0 . toMicros ( ) ; }
byte [ ] function ( AuthToken arg0 ) { return getDecryptionKey ( ) . decrypt ( arg0 ) ; }
String function ( Bundle arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; return arg0 . getString ( TOKEN_KEY ) ; }
void function ( ) { mShouldDispatchChanges = false ; }
void function ( ) { output = new PrintStream ( System . out ) ; error = new PrintStream ( System . err ) ; singleton = new FileLoggerModule ( OUTPUT_FILE , ERROR_FILE ) ; }
String function ( ) { return baseID ; }
DebugRecordingInfo function ( ) { return new DebugRecordingInfo ( ) ; }
void function ( Host arg0 , double arg1 ) { Double loc0 = cumulativeRTTToMonitors . get ( arg0 ) ; if ( loc0 != null && loc0 < arg1 ) { cumulativeRTTToMonitors . put ( arg0 , arg1 ) ; } }
void function ( ) { String loc0 = "srini_string" ; String loc1 = WebColors . getRGBColor ( loc0 ) ; assertEquals ( loc1 , loc0 ) ; }
void function ( ) { for ( Partitioner loc0 : partitioners ) { loc0 . executeBatch ( incoming ) ; } }
boolean function ( ISelection arg0 ) { return arg0 == null || arg0 . isEmpty ( ) ; }
List < T > function ( Collection < T > arg0 ) { return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
boolean function ( ) { return is12 ; }
List < List < VectorXZ >> function ( Collection < Triangle > arg0 ) { return texCoordLists ( arg0 , null , null , null ) ; }
Set < IDocumentSet > function ( ) { return resources . keySet ( ) ; }
H2Schema function ( String arg0 ) { H2Schema loc0 = new H2Schema ( ) ; loc0 . add ( "srini_string" , arg0 ) ; return loc0 ; }
boolean function ( ) { if ( debug ) logger . info ( "srini_string" ) ; return Reduction . isReductionMatrix ( ) ; }
void function ( Change arg0 ) { Assert . isNotNull ( arg0 ) ; fParent = arg0 ; }
Object function ( ) { if ( myList == null ) throw new Exception ( "srini_string" ) ; return myList . item ( myList . size ( ) - 1 ) ; }
DrillConfig function ( ) { return config ; }
void function ( Color arg0 ) { color = arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
void function ( ) { if ( ! suspended ( ) ) { activeTransactionCountUpdater . decrementAndGet ( ) ; if ( ! isSuspended ( ) ) { suspended ( ) ; } } }
DrillSchema function ( String arg0 ) { return drillbitContext . getSchemaManager ( ) . getRootSchema ( arg0 ) ; }
void function ( PdfPCell arg0 ) { rows . add ( arg0 ) ; }
byte [ ] function ( ) { return payload ; }
void function ( double arg0 , double arg1 ) { for ( int loc0 = 0 ; loc0 < accounts . length ; loc0 ++ ) { accounts [ loc0 ] -= arg0 ; } }
ClassLoader function ( ClassLoader arg0 , boolean arg1 ) { ClassLoader loc0 ; if ( arg0 != null ) { if ( arg1 ) { loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; } else { loc0 = arg0 ; } } else { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }
void function ( EventListener arg0 ) { listenerList . remove ( EventListener . class , arg0 ) ; }
JoinSequence function ( boolean arg0 ) { this . useThetaStyle = arg0 ; return this ; }
void function ( ) { }
ColorPolynomial < C > function ( List < GenPolynomial < C >> arg0 ) { return new ColorPolynomial < C > ( red . add ( green . add ( red . multiply ( arg0 ) ) ) . multiply ( green . multiply ( arg0 ) ) . multiply ( red . multiply ( green . multiply ( arg0 ) ) ) ; }
BranchAndFinancialInstitutionIdentification4 function ( ) { return new BranchAndFinancialInstitutionIdentification4 ( ) ; }
Object function ( String arg0 ) { return data . get ( arg0 ) ; }
void function ( Throwable arg0 ) { }
void function ( FontProvider arg0 ) { this . provider = arg0 ; }
boolean function ( Class < ? > arg0 ) { return isPrimitiveCached . containsKey ( arg0 ) ; }
boolean function ( String arg0 ) { return _register . containsKey ( arg0 ) ; }
void function ( Description arg0 ) { }
String function ( Object arg0 ) { if ( arg0 == null ) { return "srini_string" ; } if ( arg0 instanceof Array ) { return arg0 . toString ( ) ; } return arg0 . toString ( ) ; }
void function ( ) { }
Message function ( ) { LOGGER . trace ( "srini_string" ) ; Message loc0 = blkQueue . poll ( ) ; if ( loc0 == null ) { LOGGER . trace ( "srini_string" ) ; } return loc0 ; }
Iterator < ListElement > function ( ) { return listElements . iterator ( ) ; }
int function ( KeyEvent arg0 ) { int loc0 = arg0 . getModifiersEx ( ) & BUTTON_MASK ; return loc0 ; }
R function ( ) { return inTx ( ) ; }
Timestamp function ( long arg0 ) { return Timestamps . fromMicros ( arg0 ) ; }
BusinessException function ( ) { return new BusinessException ( ) ; }
Set function ( ) { return _register . entrySet ( ) ; }
StringBuffer function ( ) { return result ; }
void function ( String arg0 , String arg1 ) { checkPermissionAndFireCheckedException ( arg0 , arg1 , permissionService . getPermissionService ( ) ) ; }
int function ( ) { return iterationCount ; }
UUID function ( byte [ ] arg0 ) { if ( arg0 == null || arg0 . length == 0 ) { return null ; } byte [ ] loc0 = new byte [ arg0 . length * 2 ] ; System . arraycopy ( arg0 , 0 , loc0 , 0 , arg0 . length ) ; return UUID . fromString ( loc0 ) ; }
ITextEditGroup function ( ) { return fTextEditGroup ; }
void function ( ) { pos . set ( ) ; lookAt . set ( ) ; }
void function ( int arg0 , int arg1 , Direction arg2 ) { if ( arg2 == Direction . CW ) { westDig . clear ( ) ; eastDig . clear ( ) ; southDig . clear ( ) ; boardX = arg0 ; boardY = arg1 ; } else { westDig . clear ( ) ; eastDig . clear ( ) ; southDig . clear ( ) ; boardX = arg0 ; boardY = arg1 ; } }
void function ( String arg0 , Scoreboard arg1 ) { scoreboard . addPlayer ( arg0 , arg1 ) ; }
int function ( final int arg0 ) { return arg0 ; }
void function ( GraphModel arg0 , GraphModel arg1 , Timer arg2 ) { this . blockedTimeInWindow = arg2 . elapsedRealtime ( ) - arg1 . getCurrentTimeInWindow ( ) ; }
TestSuite function ( ) { return JUnit . createTestSuite ( "srini_string" ) ; }
int function ( ) { return enumValue ; }
String function ( ) { return cacheName ; }
BufferedReader function ( String arg0 ) { return new FileReader ( arg0 ) ; }
void function ( int arg0 ) { this . n = arg0 ; }
void function ( ) { if ( resources == null ) { resources = getResources ( ) ; } }
GenMatrix < C > function ( ) { return this ; }
RingFactory < C > function ( ) { return ring ; }
List < T > function ( IntList arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } return Collections . unmodifiableList ( new ArrayList < T > ( arg0 ) ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof Residue ) { Residue < C > loc0 = ( Residue < C > ) arg0 ; return this . isField ? loc0 . field ( ) . compareTo ( loc0 . modul ( ) ) : loc0 . component ( ) . compareTo ( this . modul ( ) ) ; } else { return super . compareTo ( arg0 ) ; } }
OperationCallback < Void > function ( ) { return EMPTY_CALLBACK ; }
Set < String > function ( ) { return ( this . versions . keySet ( ) ) ; }
void function ( String arg0 ) { if ( arg0 == null ) { arg0 = "srini_string" ; } this . sb . append ( arg0 ) ; }
void function ( byte [ ] arg0 , int arg1 , PrintWriter arg2 ) { arg2 . println ( "srini_string" + new String ( arg0 , 0 , arg1 ) + "srini_string" + new String ( arg0 , 0 , arg1 ) + "srini_string" ) ; }
List < EventSource > function ( ) { return getEventSourceList ( getURL ( ) ) ; }
int function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { if ( arg1 == null ) return 0 ; else return - 1 ; } else if ( arg1 == null ) return 1 ; else return arg0 . compareTo ( arg1 ) ; }
void function ( int arg0 ) { vendorID = arg0 ; }
File function ( ) { return new File ( getLibsDirectory ( ) , "srini_string" ) ; }
Codec function ( Format arg0 ) { for ( int loc0 = 0 ; loc0 < getDecoders ( ) . length ; loc0 ++ ) { Codec loc1 = getDecoders ( ) [ loc0 ] ; if ( loc1 . canDecode ( arg0 ) ) { return loc1 ; } } return null ; }
ConsumedPort function ( ) { return new ConsumedPort ( ) ; }
JoinSequence function ( QueryableCollection arg0 ) { return new JoinSequence ( sfi , arg0 ) ; }
void function ( String arg0 ) { }
String function ( ) { return translation ; }
void function ( JsSymbolMap arg0 ) { if ( ! resourceSymbols . containsKey ( arg0 . getUrl ( ) ) ) { resourceSymbols . put ( arg0 . getUrl ( ) , arg0 ) ; } }
Label function ( ) { return end ; }
int [ ] function ( int [ ] arg0 , int [ ] arg1 ) { int [ ] loc0 = new int [ arg0 . length - arg1 . length ] ; System . arraycopy ( arg0 , 0 , loc0 , 0 , arg0 . length ) ; System . arraycopy ( arg1 , 0 , loc0 , arg0 . length , arg1 . length ) ; return loc0 ; }
Map < Integer , ReleaseEntity > function ( ) { Map < Integer , ReleaseEntity > loc0 = new HashMap < Integer , ReleaseEntity > ( ) ; for ( ReleaseEntity loc1 : em . findAll ( ) ) { loc0 . put ( loc1 . getReleaseId ( ) , loc1 ) ; } return loc0 ; }
void function ( String arg0 ) { out . append ( arg0 ) ; }
Product < C > function ( Reader arg0 ) { return from ( arg0 , null ) ; }
void function ( String [ ] arg0 ) { OrcKing loc0 = new OrcKing ( ) ; createSchema ( loc0 ) ; addCustomers ( loc0 ) ; }
Projection function ( ) { return new DistinctProjection ( ) ; }
void function ( InvocationTargetException arg0 ) { fgInstance . handle ( arg0 ) ; }
void function ( Object arg0 ) { myList . setItem ( arg0 ) ; }
IWidgetLocator function ( Object arg0 ) { return new WidgetLocator ( arg0 ) ; }
void function ( Collection < String > arg0 ) { validate ( arg0 , configuration ) ; }
void function ( String [ ] arg0 ) { Main loc0 = new Main ( ) ; loc0 . run ( arg0 ) ; }
SortedBag function ( Bag arg0 , Class < ? extends E > arg1 ) { return new TypeIndexedSortedBag ( arg0 , arg1 ) ; }
void function ( ) { maybeThrowError ( ) ; state = STATE_PREPARED ; }
Board function ( ) { return new SimpleBoard ( 8 , 8 ) ; }
Type function ( ) { return superclass ; }
void function ( Template arg0 ) { fTemplates . remove ( arg0 ) ; }
Throwable function ( ) { return cause ; }
void function ( boolean arg0 ) { this . backendConfig . setAllowTcp ( arg0 ) ; }
void function ( int arg0 ) { this . iterations = arg0 ; }
void function ( ) { relation ( ) ; }
boolean function ( ) { return fFilesSaved ; }
void function ( CallContext arg0 ) { this . callContext = arg0 ; }
void function ( ) { DefaultValidatorFactory loc0 = new DefaultValidatorFactory ( ) ; assertEquals ( DefaultValidatorFactory . class . getName ( ) , loc0 . getDefaultValidatorClassName ( ) ) ; }
Sentence function ( ) { return sentence ; }
void function ( XMPMeta arg0 ) { arg0 . addString ( CONFORMANCE ) ; }
Image function ( ) { return image ; }
void function ( String arg0 , String arg1 ) { if ( arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "
void function ( ) { }
double function ( double [ ] arg0 , double [ ] arg1 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg1 [ loc1 ] ; } return loc0 ; }
Set < String > function ( ) { return namedDescriptorMap . keySet ( ) ; }
int function ( ) { return sectionLevel ; }
void function ( int arg0 ) { if ( mFieldNumbers [ arg0 ] != DELETED ) { mData [ arg0 ] = DELETED ; mGarbage = true ; } }
String function ( ) { return name ; }
void function ( ) { theDriver . quit ( ) ; }
boolean function ( String arg0 ) { return userFunctions . containsKey ( arg0 ) ; }
List < Application > function ( ) { if ( applications == null ) { applications = new ArrayList < Application > ( ) ; } return this . applications ; }
int function ( String arg0 , int arg1 ) { return Integer . valueOf ( arg1 ) ; }
void function ( LayoutManager arg0 ) { activeLayoutManager = arg0 ; }
void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . put ( PrefKey . ID , arg0 ) ; setObsoleteIds ( loc0 ) ; }
ModelNode function ( PathAddress arg0 , ModelNode ... arg1 ) { return createAddOperation ( arg0 , arg1 ) ; }
void function ( String arg0 , int arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { print ( arg0 . charAt ( loc0 ) , arg2 ) ; } }
boolean function ( ) { return false ; }
void function ( ) { try { channel . close ( ) ; } catch ( IOException loc0 ) { throw Throwables . propagate ( loc0 ) ; } }
void function ( String [ ] arg0 ) { Main loc0 = new Main ( ) ; loc0 . run ( arg0 ) ; }
String function ( ) { return "srini_string" + this . resource + "srini_string" + this . requestDate + "srini_string" + this . responseDate + "srini_string" + this . statusLine . getReasonPhrase ( ) ; }
CatalogFactory function ( ClassLoader arg0 ) { return ( CatalogFactory ) factories . get ( arg0 ) ; }
List < ColumnMetaData > function ( Schema arg0 ) { return columns ; }
String function ( ) { return doSendApiRequest ( "srini_string" , "srini_string" ) ; }
T function ( String arg0 , T arg1 ) { return ( T ) HTML . link ( arg0 , arg1 ) ; }
void function ( RatTerm arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( ! arg0 . equals ( this ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } underlying_terms . removeAllElements ( ) ; underlying_terms . addElement ( arg0 ) ; }
Type function ( int arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( String arg0 , char arg1 , char arg2 ) { assertEquals ( arg0 , new Character ( arg1 ) , new Character ( arg2 ) ) ; }
AccessibilityGraph function ( ) { AccessibilityGraph loc0 = AccessibilityGraphBuilder . newAccessibilityGraph ( ) . build ( ) ; for ( ClassLoader loc1 : subDeploymentClassLoaders ) { loc0 . addWeldClassPath ( loc1 ) ; } return loc0 ; }
Institution function ( String arg0 ) { Student loc0 = readStudent ( arg0 ) ; return new Instructor ( loc0 ) ; }
Set < String > function ( ) { return new HashSet < String > ( activeVersions ) ; }
IType function ( IJavaScriptElement arg0 , IType arg1 ) { if ( arg0 == null ) { return null ; } return resolveTypeInMember ( arg0 , arg1 ) ; }
int function ( int arg0 ) { int loc0 = 0 ; while ( arg0 > 0 ) { arg0 = arg0 >> 1 ; loc0 ++ ; } return loc0 ; }
void function ( Class < ? > arg0 , Constructor < ? > arg1 ) { logImplctor = arg1 ; log4jIsAvailable = log4jIsAvailable ( arg0 ) ; }
Location function ( Element arg0 ) { Location loc0 = new Location ( ) ; loc0 . parse ( arg0 ) ; return loc0 ; }
void function ( ) { BUFFER . clear ( ) ; }
int function ( ) { return aliasSpecificLockModes . size ( ) ; }
Result function ( ) { return result ; }
void function ( String arg0 ) { throw new SQLException ( "srini_string" ) ; }
int function ( ) { return freqTable . size ( ) ; }
T function ( Connection arg0 , ReturnWork < T > arg1 ) { return arg1 . execute ( arg0 ) ; }
void function ( String arg0 , String arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
void function ( ) { isLocked = true ; }
void function ( Context arg0 , Name arg1 , Object arg2 ) { arg0 . rebind ( arg1 , arg2 ) ; }
Codec [ ] function ( Format arg0 ) { return getDecoders ( arg0 ) ; }
ISDVInfo function ( ) { return new ISDVInfo ( ) ; }
Quotient < C > function ( Quotient < C > arg0 ) { return this . negate ( ) . divide ( arg0 ) ; }
double function ( double arg0 ) { return zero ( arg0 , factory . getDefaultSolver ( ) ) ; }
int function ( ) { return type ; }
Cursor function ( long arg0 ) { return queryHelper . safeQuery ( "srini_string" , getAllColumns ( ) , dateModifiedWhere ( arg0 ) , arg0 , null ) ; }
long function ( ) { long loc0 = 0 ; for ( GlobalStreamId loc1 : streamToTs . keySet ( ) ) { long loc2 = streamToTs . get ( loc1 ) ; if ( loc2 < loc0 ) { loc0 = loc2 ; } } return loc0 ; }
String function ( ) { return this . name ; }
boolean function ( List < ResourceEntity > arg0 , ResourceType arg1 ) { for ( ResourceEntity loc0 : arg0 ) { if ( loc0 . getResourceType ( ) . equals ( arg1 ) ) { return true ; } } return false ; }
List < ByteBuffer > function ( ) { return requestPayload ; }
void function ( String ... arg0 ) { prepare ( ) ; for ( String loc0 : arg0 ) { unprepare ( loc0 ) ; } }
void function ( Element arg0 , List < Element > arg1 ) { for ( Element loc0 : arg1 ) addElement ( arg0 , loc0 ) ; }
void function ( ) { grid = null ; hasCombined = false ; resetMoved ( ) ; }
void function ( boolean arg0 ) { this . validateXML = arg0 ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 ) { return format ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , false ) ; }
void function ( double arg0 , double arg1 , double arg2 ) { y = ( float ) Math . cos ( arg1 ) * Math . cos ( arg2 ) ; x = ( float ) Math . sin ( arg1 ) * Math . sin ( arg2 ) ; }
void function ( int arg0 , Notification arg1 ) { mNotifications . put ( arg0 , arg1 ) ; }
ModInteger function ( java . math . BigInteger arg0 ) { return new ModInteger ( - arg0 . signum ( ) , arg0 ) ; }
byte [ ] function ( ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; loc0 . write ( this . value ) ; return loc0 . toByteArray ( ) ; }
ClientTransceiver function ( URI arg0 ) { return createClientTransceiver ( arg0 . toString ( ) ) ; }
Object function ( String arg0 , Object [ ] arg1 ) { return fastClass ( ) . invoke ( type , arg0 , arg1 ) ; }
void function ( String arg0 , boolean arg1 ) { sendPost ( arg0 , arg1 , null ) ; }
void function ( PRIndirectReference arg0 ) { this . indRef = arg0 ; }
RemoteBuildr function ( ) { return new RemoteBuildr ( ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , arg1 ) ; }
CacheDataDescriptionImpl function ( PersistentCollection arg0 ) { return new CacheDataDescriptionImpl ( arg0 . isMutable ( ) , arg0 . isVersioned ( ) , arg0 . isVersionedComparator ( ) , arg0 . isVersionedComparator ( ) ) ; }
MatchResult function ( ) { return new MatchResult ( WIDGET_NOT_FOUND ) ; }
LobCreator function ( JdbcTemplate arg0 , String arg1 , Object [ ] arg2 ) { return new LobCreatorImpl ( arg0 , arg1 , arg2 ) ; }
void function ( boolean arg0 ) { fStatementsRecovery = arg0 ; }
void function ( int arg0 , ExecutionOutcome arg1 ) { theList . set ( arg0 , arg1 ) ; }
boolean function ( char arg0 ) { return langTable [ arg0 ] == langTable [ MATRA_HLRR ] ; }
GenMatrix < C > function ( double arg0 ) { for ( int loc0 = 0 ; loc0 < val . size ( ) ; loc0 ++ ) { val . get ( loc0 ) . set ( val . get ( loc0 ) * arg0 ) ; } return this ; }
void function ( int arg0 ) { doKeyUp ( arg0 ) ; }
AlgebraicNumber < C > function ( Reader arg0 ) { AlgebraicNumber < C > loc0 = new AlgebraicNumber < C > ( ) ; loc0 . read ( arg0 ) ; return loc0 ; }
String function ( String arg0 ) { return hostToIp . get ( arg0 ) ; }
int function ( ) { return Math . abs ( this . ring . getReal ( ) ) ; }
int function ( ) { return getVertices ( ) . size ( ) ; }
BigDecimal function ( BigDecimal arg0 ) { return arg0 . copy ( ) ; }
boolean function ( ) { return timespan > startSpan ; }
void function ( int arg0 ) { balance -= arg0 ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new ListIterator ( arg0 ) ; }
int function ( char arg0 ) { if ( ( arg0 >= '0' ) && ( arg0 <= '9' ) ) { return arg0 - '0' ; } else if ( ( arg0 >= 'a' ) && ( arg0 <= 'f' ) ) { return arg0 - 'a' + 10 ; } else if ( ( arg0 >= 'A' ) && ( arg0 <= 'F' ) ) { return arg0 - 'A' + 10 ; } else { return 0 ; } }
Coordinates function ( ) { return position ; }
boolean function ( ) { return isOffline ; }
void function ( CSIColor arg0 ) { targetFrame . setColor ( arg0 ) ; }
UnivPowerSeries < C > function ( ) { return ZERO ; }
IWidgetFinder function ( ) { return _finderService ; }
Pipeline < ? > function ( ) { return getNext ( ) ; }
BaseColor function ( ) { return currentTextColor ; }
double function ( ) { return randomData . nextGaussian ( ) ; }
boolean function ( int [ ] arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] == arg1 ) { return true ; } } return false ; }
Set function ( ) { return composites ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
TypedList < T > function ( List < T > arg0 ) { return new TypedListImpl < T > ( arg0 ) ; }
void function ( ) { if ( verbose ) { System . out . println ( "srini_string" ) ; } }
boolean function ( UserTransaction arg0 ) { return getStatus ( getStatus ( arg0 ) ) == Status . COMMIT ; }
boolean function ( ) { return size ( ) == 0 ; }
Iterable4 function ( ) { return new Iterable4 ( ) ; }
void function ( ) { Thread . sleep ( interval ) ; }
void function ( final DeploymentUnit arg0 ) { arg0 . putAttachment ( ATTACHMENT_KEY , Boolean . TRUE ) ; }
Criteria function ( RelationalOperator arg0 , ValueNode arg1 , ValueNode arg2 ) { return new Criteria ( arg0 , arg1 , arg2 ) ; }
Change function ( Change . Kind arg0 , String arg1 , ClasspathFixProposal [ ] arg2 , Image arg3 ) { Change loc0 = createChange ( arg0 , arg1 , arg2 , arg3 ) ; loc0 . addPath ( arg3 ) ; return loc0 ; }
HashCodeBuilder function ( float [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = 31 * loc0 + arg0 [ loc1 ] ; } return this ; }
void function ( IReconcilingStrategy [ ] arg0 ) { fStrategies = arg0 ; }
String function ( String arg0 , Object ... arg1 ) { return rb . getString ( arg0 , arg1 ) ; }
void function ( RunListener arg0 ) { fListeners . add ( arg0 ) ; }
void function ( String arg0 , int arg1 ) { }
Test function ( String arg0 ) { return new Test ( false , arg0 , null ) ; }
String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }
Matcher function ( ) { return _matcher ; }
List < TokenElement > function ( ) { return tokens ; }
PdfIndirectReference function ( String arg0 , PdfIndirectReference arg1 ) { assetsmap . put ( arg0 , arg1 ) ; return this . addFile ( arg0 , arg1 ) ; }
void function ( ) { }
void function ( ) { size *= 2 ; }
void function ( LocalVariable arg0 ) { this . returnAddress = arg0 ; }
OSMElement function ( ) { return objectWithTags ; }
boolean function ( int arg0 , int arg1 ) { return ( arg0 + arg1 ) % WIDTH == arg0 ; }
void function ( double arg0 ) { this . numHosts = arg0 ; }
void function ( ) { TagAndName loc0 = new TagAndName ( "srini_string" , "srini_string" ) ; TagAndName loc1 = new TagAndName ( "srini_string" , "srini_string" ) ; TagAndName loc2 = new TagAndName ( "srini_string" , "srini_string" ) ; assertEquals ( loc0 , loc1 ) ; assertEquals ( loc2 , loc0 ) ; }
State function ( ) { return state ; }
void function ( ) { }
ProvidedPortID function ( ) { return new ProvidedPortID ( ) ; }
void function ( int arg0 ) { eventPool . put ( arg0 , null ) ; }
String function ( ) { return name ; }
void function ( ) { onInitialized ( ) ; synchronizerDelegate . onSynchronized ( ) ; }
void function ( QuotaUsedBytes arg0 ) { this . quotaUsedBytes = arg0 ; }
List < ApplicationReleaseBinding > function ( ) { if ( structure == null ) { structure = new ArrayList < ApplicationReleaseBinding > ( ) ; } return this . structure ; }
void function ( ) { SecurityConfiguration . getApplicationPolicy ( "srini_string" ) ; }
String function ( String arg0 ) { BufferedReader loc0 = new BufferedReader ( new FileReader ( arg0 ) ) ; String loc1 = loc0 . readLine ( ) ; loc0 . close ( ) ; return loc1 ; }
char function ( int arg0 ) { switch ( arg0 ) { case 0 : return '0' ; case 1 : return '1' ; case 2 : return '2' ; case 3 : return '3' ; case 4 : return '4' ; case 5 : return '5' ; case 6 : return '6' ; case 7 : return '7' ; case 8 : return '8' ; } return ' ' ; }
void function ( final PrintStream arg0 , final AST arg1 , final boolean arg2 ) { arg0 . println ( nodeToString ( arg1 , arg2 ) ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( getMethodName ( ) ) ; loc0 . append ( MNEMONIC_DELIMITER ) ; loc0 . append ( getMethodName ( ) ) ; loc0 . append ( MNEMONIC_DELIMITER ) ; loc0 . append ( getMethod ( ) ) ; return loc0 . toString ( ) ; }
void function ( Object arg0 , Object arg1 , Object arg2 ) { }
Expr function ( ) { return stack . remove ( stack . size ( ) - 1 ) ; }
Set < String > function ( File arg0 ) { return getNamespaceURIs ( arg0 . toURL ( ) ) ; }
void function ( ) { fListeneredDisabled = true ; initializeWithoutListenersFrom ( ) ; }
void function ( ) { for ( RunListener loc0 : fListeners ) { loc0 . assumeFalse ( ) ; } }
void function ( ) { eraseWithStyle ( ) ; }
Block function ( ) { return returnAddress ; }
EnterpriseArchive function ( ) { return enterpriseArchive ( MODULE_WEB , DEP_APP1 ) ; }
Iterator function ( ) { return iterator ; }
void function ( Interpolator arg0 ) { if ( ! isAnimating ) { start ( ) ; } activeInterpolators . add ( arg0 ) ; }
DocumentBuilder function ( Section arg0 ) { ensureNotBuilt ( ) ; sections . add ( arg0 ) ; return this ; }
ArrayList < String > function ( String arg0 ) { ArrayList < String > loc0 = new ArrayList < String > ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 . add ( arg0 . substring ( loc1 , loc1 + 1 ) ) ; } return loc0 ; }
String function ( ) { return id ; }
XMPDateTime function ( String arg0 ) { return new XMPDateTime ( arg0 ) ; }
Map function ( ) { Map loc0 = new HashMap ( ) ; for ( Enumeration loc1 = _map . elements ( ) ; loc1 . hasMoreElements ( ) ; ) { IWidgetState loc2 = ( IWidgetState ) loc1 . nextElement ( ) ; loc0 . put ( loc2 . getName ( ) , loc2 ) ; } return loc0 ; }
Propertyupdate function ( ) { return new Propertyupdate ( ) ; }
long function ( Runnable arg0 ) { long loc0 = System . currentTimeMillis ( ) ; return loc0 - start ; }
ClassLoader function ( Class < ? > arg0 ) { ClassLoader loc0 = null ; SoftReference < ClassLoader > loc1 = factories . get ( arg0 ) ; if ( loc1 != null ) { loc0 = loc1 . get ( ) ; if ( loc0 != null ) { return loc0 ; } } return getCatalogClassLoader ( arg0 ) ; }
boolean function ( CharSequence arg0 ) { return ( arg0 == null ) || ( arg0 . length ( ) == 0 ) ; }
Geometry [ ] function ( Geometry [ ] arg0 ) { Geometry [ ] loc0 = new Geometry [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = DelaunayTriangulation . triangulate ( arg0 [ loc1 ] ) ; } return loc0 ; }
void function ( DialectResolver arg0 ) { LOG . trace ( "srini_string" , arg0 ) ; resolvers . add ( 0 , arg0 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return "srini_string" ; } return arg0 . trim ( ) ; }
int function ( ) { int loc0 = 17 ; loc0 = 31 * loc0 + ( ( this . equals ( null ) ? 1231 : 1237 ) ; return loc0 ; }
int function ( ) { return coveredBranches ; }
void function ( String arg0 ) { this . fromKey = arg0 ; }
void function ( ) { if ( running ) { tAccum = 0 ; running = false ; } }
Response function ( String arg0 ) { return executeAuthenticatedRequest ( arg0 , null ) ; }
void function ( ) { }
void function ( ) { System . err . println ( "srini_string" + Version . VERSION ) ; System . exit ( 0 ) ; }
void function ( ) { backItem . requestFocus ( ) ; }
void function ( int arg0 , int arg1 ) { log . debug ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; vid . setVID ( arg0 , arg1 ) ; }
void function ( InputStream arg0 , OutputStream arg1 ) { copy ( arg0 , arg1 , true ) ; }
void function ( Socket arg0 ) { ensureOpen ( ) ; this . socket = arg0 ; this . open = true ; }
Builder function ( ) { return new Builder ( ) ; }
void function ( ASTNode arg0 ) { fNode = arg0 ; fIsBindingResolved = true ; fRoot = null ; fLiteral = null ; fIsRootResolved = false ; }
int function ( ) { return end ; }
String function ( ) { return this . hostname . substring ( 1 ) ; }
String function ( SQLException arg0 ) { return determineSqlStateClassCode ( extractErrorCode ( arg0 ) ) ; }
void function ( AvroSchema [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { AvroSchema loc1 = arg0 [ loc0 ] ; if ( ! canRead ( loc1 ) ) { throw new SchemaResolvingException ( "srini_string" + loc1 + "srini_string" ) ; } } }
BigInteger function ( int arg0 ) { return id . digits [ arg0 - 1 ] ; }
void function ( Test arg0 ) { fTests . add ( arg0 ) ; }
SSLSocketFactory function ( ) { return socketfactory ; }
void function ( String arg0 ) { fileName = arg0 ; }
void function ( String arg0 , String arg1 ) { if ( arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) || arg0 . equals ( "srini_string" ) ) { parseTag ( arg0 , arg1 ) ; } }
void function ( ) { server . unregisterMBean ( name ) ; }
CallContext function ( ) { return new CallContext ( ) ; }
NamingException function ( final Name arg0 , final Object arg1 ) { final NamingException loc0 = namingException ( arg0 , arg1 ) ; loc0 . setResolvedName ( arg0 ) ; return loc0 ; }
float function ( final Paint arg0 ) { final float loc0 = TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , arg0 , DEFAULT_CORNER_THICKNESS_PX ) ; return loc0 ; }
Iterator < PptTopLevel > function ( ) { return ppt_all_iterator ( ) ; }
void function ( Report arg0 ) { this . report = arg0 ; }
String function ( Object arg0 ) { StringWriter loc0 = new StringWriter ( ) ; writeBack ( loc0 , arg0 ) ; return loc0 . toString ( ) ; }
int function ( ) { return getCheckInitialConditionsTicks ( ) + getCheckFinalConditionsTicks ( ) ; }
int function ( ) { return m_negativeYErrorPixel ; }
Object function ( Object arg0 , String arg1 ) { try { return BASIC_PROPERTY_ACCESSOR . resolve ( arg0 , arg1 ) ; } catch ( IllegalArgumentException loc0 ) { throw new IllegalArgumentException ( loc0 . getMessage ( ) ) ; } }
Collection function ( ) { return ( succs ) ; }
void function ( Object arg0 , Throwable arg1 ) { log ( Level . ERROR , String . valueOf ( arg0 ) , arg1 ) ; }
String [ ] function ( ) { return null ; }
boolean function ( ) { return false ; }
boolean function ( ) { return connected ; }
QueryContextInformation function ( String arg0 , String arg1 ) { QueryContextInformation loc0 = new QueryContextInformation ( ) ; loc0 . setDrillVersion ( DrillVersion . getCurrentDrillVersion ( ) ) ; loc0 . setFileName ( arg0 ) ; loc0 . setSchemaName ( arg1 ) ; return loc0 ; }
int function ( ) { return maxSize ; }
boolean function ( ) { return coalescing ; }
K function ( List < K > arg0 ) { return arg0 . get ( 0 ) ; }
void function ( AbstractNodeFactory arg0 ) { this . nodeFactory = arg0 ; }
R function ( ) { return defaultValue ; }
Residue < C > function ( ) { Residue < C > loc0 = new Residue < C > ( val , ring ) ; return loc0 ; }
Runner function ( ) { return ErrorReportingRunner . INSTANCE ; }
void function ( InetAddress arg0 ) { _remoteAddr = arg0 ; }
boolean function ( IProgressMonitor arg0 ) { return false ; }
void function ( File arg0 ) { outputDir = arg0 ; }
void function ( ScheduledExecutorService arg0 ) { executor = arg0 ; }
String function ( byte [ ] arg0 ) { return fingerprint ( arg0 , false ) ; }
boolean function ( Response arg0 ) { Date loc0 = arg0 . getLastModified ( ) ; Date loc1 = arg0 . getModifiedDate ( ) ; if ( loc0 != null && loc1 != null ) { return loc0 . getTime ( ) <= loc1 . getTime ( ) ; } return false ; }
AlgebraicNumber < C > function ( ) { return this . ring . gcd ( this ) ; }
int function ( GenVector < C > arg0 ) { int loc0 = signum ( arg0 . val ) ; int loc1 = signum ( arg0 . modul . val ) ; if ( loc0 < loc1 ) { return - 1 ; } else if ( loc0 > loc1 ) { return 1 ; } else { return 0 ; } }
Link function ( ) { return new Link ( ) ; }
PluginIdentifier function ( IPlugIn arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . getIdentifier ( ) ; }
void function ( String arg0 ) { this . machineInterpretationKey = arg0 ; }
Date function ( Cursor arg0 , int arg1 ) { return arg0 . getDate ( arg1 ) ; }
String [ ] function ( ) { String [ ] loc0 = new String [ ELEMENTHEIGHT ] ; for ( int loc1 = 0 ; loc1 < ELEMENTHEIGHT ; loc1 ++ ) { loc0 [ loc1 ] = getCellContents ( loc1 ) ; } return loc0 ; }
boolean function ( GroupCategory ... arg0 ) { for ( GroupCategory loc0 : arg0 ) { if ( contains ( loc0 ) ) { return true ; } } return false ; }
void function ( ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { activate ( ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } } } ) ; }
void function ( String ... arg0 ) { createTestSuite ( "srini_string" , arg0 ) ; }
String function ( ) { return numberChosen ; }
String function ( ) { return "srini_string" ; }
String function ( ) { return m_label ; }
void function ( String [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { write ( arg0 [ loc0 ] ) ; } }
MutablePeriod function ( ) { return new MutablePeriod ( this ) ; }
void function ( Integer arg0 ) { this . deptId = arg0 ; }
String function ( ) { return this . description ; }
boolean function ( Type arg0 , Type arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 . isAssign ( ) && arg1 . isAssign ( ) ) { return true ; } return false ; }
String function ( ) { return this . catalogKey ; }
Sensor function ( ) { return proximitySensor ; }
void function ( String [ ] arg0 ) { KerberosSocketFactory loc0 = new KerberosSocketFactory ( arg0 [ 0 ] , arg0 [ 1 ] ) ; }
String function ( ) { return mTitle ; }
T function ( String arg0 , Class < T > arg1 ) { return ( T ) server . get ( arg0 , arg1 ) ; }
void function ( SelectionKey arg0 ) { dispatcher . requestChangeOperations ( arg0 , interestedOps ) ; interestedOps ++ ; }
boolean function ( ) { return quirks ; }
boolean function ( ) { return bugList . size ( ) > 0 ; }
int function ( int arg0 , int arg1 ) { return quadrant ( arg0 , arg1 , false ) ; }
PMML function ( InputStream arg0 ) { Pmml loc0 = new Pmml ( ) ; loc0 . load ( arg0 ) ; return loc0 ; }
void function ( ) { assertTrue ( "srini_string" , incorrectRoleResult . contains ( INIT_METHOD_NOT_PASS ) ) ; }
String function ( Iterable < String > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( String loc1 : arg0 ) { if ( ! isEmpty ( loc1 ) ) { loc0 . append ( SLASH_STRING ) ; loc0 . append ( loc1 ) ; } } return loc0 . toString ( ) ; }
int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 = loc0 + arg0 . codePointAt ( loc1 ) . hashCode ( ) ; } return loc0 ; }
JSONArray function ( String arg0 ) { if ( arg0 . startsWith ( "srini_string" ) ) { arg0 = arg0 . substring ( 1 ) ; } return new JSONArray ( arg0 ) ; }
PackagerParams function ( ) { return ReleaseDefaults . releaseDefaults ( ) ; }
DeviceDescriptor function ( ) { checkIsOpen ( ) ; return deviceDescriptor ; }
boolean function ( ) { return onlineCheckingAllowed ; }
void function ( String arg0 , String arg1 ) { sysOut . println ( arg0 + "srini_string" + arg1 ) ; }
void function ( ) { annotations . process ( null , null , null , null ) ; }
void function ( boolean arg0 ) { expandEntityRef = arg0 ; }
InputStream function ( InputStream arg0 , int arg1 , int arg2 ) { return new BufferedInputStream ( arg0 , arg1 , arg2 ) ; }
long function ( Timestamp arg0 ) { return arg0 . getTime ( ) / NANOS_PER_SECOND ; }
void function ( ITestIdentifier arg0 ) { _runningTest = arg0 ; }
void function ( ) { start ( ) ; }
boolean function ( ) { return li != null ; }
int function ( String [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = gcd ( loc0 , arg0 [ loc1 ] ) ; } return loc0 ; }
void function ( HiveConf arg0 , String arg1 , String arg2 ) { if ( ! authzEnabled ) { return ; } String loc0 = "srini_string" + arg1 + "srini_string" + arg2 + "srini_string" ; authorize ( arg0 , loc0 , "srini_string" ) ; }
GenVector < C > function ( ) { return GenVector . copyOf ( random , cols ) ; }
boolean function ( ) { return iterator . hasNext ( ) ; }
Announcement function ( String arg0 ) { try { return Jerry . parseJerry ( arg0 ) ; } catch ( JerryParseException loc0 ) { throw new IOException ( "srini_string" + arg0 ) ; } }
boolean function ( String [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] . equals ( fLastToken ) ) { return true ; } } return false ; }
double function ( double arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < n ; loc1 ++ ) { loc0 += polynomials [ loc1 ] . derivative ( arg0 ) ; } return loc0 ; }
Set function ( ) { return cached ; }
void function ( ) { sendMessage ( "srini_string" , "srini_string" , "srini_string" ) ; }
GenVector < C > function ( ) { return GenVector . copyOf ( random , cols ) ; }
String function ( ) { return toString ( ) ; }
AuditCriterion function ( T arg0 ) { return new SimpleAuditExpression ( propertyNameGetter , arg0 , "srini_string" ) ; }
void function ( ApplicationID arg0 ) { this . predecessorApplication = arg0 ; }
Integer function ( String arg0 ) { return columnNameToIndexCache . get ( arg0 ) ; }
TLinkable function ( ) { return _next ; }
ModuleList < C > function ( ) { return twosidedGB ( ) ; }
IAnnotationCreator function ( ) { if ( instance == null ) { instance = new AnnotationCreator ( ) ; } return instance ; }
Buffer function ( Buffer arg0 ) { return new SynchronizedBuffer ( arg0 ) ; }
int function ( ) { return position ; }
void function ( ) { System . out . println ( "srini_string" ) ; Matrix loc0 = new Matrix ( 1 , 2 , 3 ) ; int loc1 = 0 ; int loc2 = loc0 . getColTotal ( ) ; assertEquals ( loc1 , loc2 ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof BigDecimal ) { return compareTo ( ( BigDecimal ) arg0 ) ; } else { return arg0 . compareTo ( this ) ; } }
void function ( FlowControl arg0 , char arg1 , char arg2 ) { setFlowControl ( device . getHandle ( ) , arg0 , arg1 , arg2 ) ; }
String function ( Set < SubSystemType > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( SubSystemType loc1 : arg0 ) { loc0 . append ( loc1 . toString ( ) ) ; } return loc0 . toString ( ) ; }
int function ( int [ ] arg0 , int arg1 , int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] == arg1 ) { if ( ! isElemMatch ( arg0 , loc1 , arg2 ) ) { return loc0 ; } loc0 ++ ; } } return - 1 ; }
void function ( ) { assumeCondition ( CONDITION_SKIP_ELYTRON_PROFILE , true ) ; }
int function ( ) { return mCount ; }
String function ( ) { return name ; }
int function ( ) { return numer ; }
long function ( ) { return getRandomSeed ( ) ; }
boolean function ( ) { return isDebugging ; }
String function ( String arg0 ) { return arg0 ; }
double function ( double arg0 , double arg1 , double arg2 , double arg3 , double arg4 , double arg5 , double arg6 , double arg7 , double arg8 , double arg9 , double arg10 , double arg11 , double arg12 , double arg13 , double arg14 , double arg15 ) { return ( arg0 * arg0 + arg1 * arg1 + arg2 * arg2 + arg3 * arg3 + arg4 * arg4 + arg5 * arg5 + arg6 * arg6 + arg7 * arg7 + arg8 * arg8 + arg9 * arg9 + arg10 * arg10 + arg11 * arg11 + arg12 * arg12 + arg13
Exception function ( ) { return error ; }
Locktype function ( ) { return new Locktype ( ) ; }
PdfWriter function ( ) { return fc . getPdfWriter ( ) ; }
void function ( List < T > arg0 , List < T > arg1 , Transformer < T , T > arg2 ) { for ( T loc0 : arg0 ) { arg1 . add ( arg2 . transform ( loc0 ) ) ; } }
E function ( int arg0 ) { return executables . remove ( arg0 ) ; }
void function ( QueryCondition < ? > arg0 ) { this . conditions . add ( arg0 ) ; }
String function ( ) { return name ; }
void function ( TagProcessor arg0 ) { map . put ( arg0 . getClassName ( ) , arg0 ) ; }
void function ( Reader arg0 ) { try { setMessages ( arg0 ) ; } finally { try { arg0 . close ( ) ; } catch ( IOException loc0 ) { } } }
void function ( Motorbike arg0 ) { entityManager . persist ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 . length ( ) > 20 ) { arg0 = arg0 . substring ( 0 , 20 ) + "srini_string" ; } return arg0 ; }
void function ( ) { ThiefLoader . load ( ) . stealingMethod ( ) ; }
void function ( Object arg0 ) { iterator . add ( arg0 ) ; }
int function ( int arg0 ) { return childRanges [ arg0 ] ; }
Text function ( ) { if ( fTextControl == null ) { fTextControl = getFilterControl ( ) ; } return fTextControl ; }
void function ( ) { assumeThat ( null , null ) ; }
float function ( float [ ] arg0 , float [ ] arg1 ) { float loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 += arg0 [ loc1 ] * arg1 [ loc1 ] ; } return loc0 ; }
String function ( ) { return "srini_string" ; }
void function ( Cursor arg0 ) { dump ( arg0 , true ) ; }
void function ( String [ ] arg0 ) { Main loc0 = new Main ( ) ; loc0 . run ( arg0 ) ; }
boolean function ( ) { return element != null ; }
boolean function ( ) { return get ( ) . equals ( "srini_string" ) ; }
int function ( ) { return _list . size ( ) ; }
int function ( ) { return marcador ; }
void function ( ) { MatcherAssert . assertThat ( new Paragraph ( ) . end ( ) , Matchers . is ( Paragraph . class ) ) ; }
boolean function ( ) { return ! resultComputed ; }
int function ( int arg0 ) { if ( arg0 < 0 || arg0 > 256 ) throw new IllegalArgumentException ( "srini_string" ) ; return ( arg0 << 8 ) | YCCtoRGB ( arg0 & 0xFF ) ; }
void function ( ) { this . lastUsedIterator . remove ( ) ; }
void function ( byte arg0 ) { ensureCapacity ( length + 1 ) ; buffer [ length ++ ] = arg0 ; }
ColumnMetaData [ ] function ( ) { return metaData . getRootColumns ( ) ; }
void function ( String arg0 ) { this . syncLevel = arg0 ; }
boolean function ( ) { return ring . isField ( ) ; }
void function ( JdrReportCollector arg0 ) { arg0 . start ( ) ; }
int function ( ) { return Objects . hashCode ( declaringClass ) ^ Objects . hashCode ( nameAndType ) ; }
String function ( ) { return this . fromKey ; }
boolean function ( BigInteger arg0 ) { return signum ( arg0 . signum ( ) ) == 0 ; }
KeyValuePairList function ( ) { return new KeyValuePairList ( ) ; }
void function ( File arg0 , File arg1 ) { FileFilter loc0 = CVSFILTER ; if ( loc0 != null ) { loc0 . accept ( arg0 , arg1 ) ; } }
Set function ( ) { return map . keySet ( ) ; }
T function ( List < T > arg0 , Random arg1 ) { int loc0 = arg1 . nextInt ( arg0 . size ( ) ) ; return arg0 . get ( loc0 ) ; }
void function ( String arg0 ) { this . name = arg0 ; }
byte function ( int arg0 ) { return list . get ( arg0 - 1 ) ; }
void function ( ) { throw new WaitTimedOutException ( "srini_string" ) ; }
void function ( ) { Display loc0 = findDisplay ( ) ; if ( loc0 == null ) { loc0 = syncIntrospect ( ) ; } }
String function ( String arg0 ) { return items . get ( arg0 ) ; }
JobStatus function ( @ PathVariable Long arg0 ) { Optional < Job > loc0 = Optional . empty ( ) ; JobStatus loc1 = jobStatuses ( arg0 ) . map ( j -> j . status ( ) ) . orElse ( null ) ; return loc1 ; }
String function ( String arg0 ) { return regularExpproperties . getProperty ( arg0 ) ; }
void function ( Test arg0 , Throwable arg1 ) { }
void function ( FrequencyAdjuster arg0 ) { this . frequencyAdjusters . add ( arg0 ) ; }
Throwable function ( ) { return null ; }
String function ( ) { return fName ; }
void function ( ) { String loc0 = "srini_string" ; String loc1 = WebColors . getRGBColor ( loc0 ) ; assertEquals ( loc1 , loc0 ) ; }
void function ( int arg0 , int arg1 ) { if ( ! hasEdge ( arg0 , arg1 ) ) { addEdge ( arg0 , arg1 ) ; } }
Collection function ( ) { return bag ; }
Map function ( char arg0 ) { loadMaps ( arg0 ) ; return characterMap ; }
boolean function ( ) { return hasBug1Event ; }
OrdinalParameterDescriptor [ ] function ( ) { return ordinalDescriptors ; }
boolean function ( V arg0 ) { return dkMap . containsKey ( arg0 ) ; }
boolean function ( TextField arg0 ) { return logic . isExitCodeResult ( arg0 ) ; }
int function ( String arg0 , String arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < VID . size ( ) ; loc1 ++ ) { if ( arg0 . equals (VID . get ( loc1 ) ) ) { loc0 ++ ; } } return loc0 ; }
PreauthContext function ( ) { return null ; }
String function ( ) { return identifier ; }
void function ( ) { sender . send ( buffer , 0 , length ) ; }
VarComparability function ( int ... arg0 ) { return new IndexVarComparability ( arg0 ) ; }
BigInteger function ( ) { return random ( ) . random ( ) ; }
Map < String , Object > function ( ) { return Collections . unmodifiableMap ( props ) ; }
Rect function ( final View arg0 , final int arg1 , final int arg2 ) { return getBitmapRectCenterInsideHelper ( arg0 , arg1 , arg2 ) ; }
void function ( JobConf arg0 , Class < ? extends GenericData > arg1 ) { arg0 . setReducerClass ( arg1 ) ; }
void function ( ) { region . clear ( ) ; }
boolean function ( ) { return fSeverity == IStatus . INFO ; }
void function ( String arg0 ) { this . className = arg0 ; }
Residue < C > function ( Residue < C > arg0 , Residue < C > arg1 ) { return divide ( arg0 . val , arg1 . val ) ; }
void function ( String arg0 , Object arg1 ) { if ( log != null ) { log . println ( arg0 , arg1 ) ; } }
void function ( ) { String loc0 = "srini_string" ; String loc1 = d . end ( ) ; assertEquals ( loc0 , loc1 ) ; }
Grid function ( ) { final Grid loc0 = new Grid ( this ) ; return loc0 ; }
long function ( ) { return mLastEventTime ; }
boolean function ( ) { return fillInAllowed ; }
ActiveLock function ( ) { return new ActiveLock ( ) ; }
void function ( ) { _tableTester . wait ( REVEAL_WAIT ) ; }
DoubleListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } else { return new DoubleListIterator ( arg0 ) ; } }
void function ( final ITestRunSession arg0 , final String arg1 ) { export ( arg0 , arg1 , JUNIT4_CONTAINER_PATH ) ; }
String function ( ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( _xDirection ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( _yDirection ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( _size ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
void function ( AssertionInfo arg0 , List < T > arg1 ) { PathSearch loc0 = new PathSearch ( arg1 ) ; loc0 . assertHasResults ( arg0 ) ; }
void function ( ) { Assert . assertTrue ( po . isProcessed ( ) ) ; Assert . assertTrue ( ! po . isEmpty ( ) ) ; }
void function ( ClassFile arg0 , int arg1 , Attribute [ ] arg2 ) { arg0 . writeInt ( arg1 ) ; arg0 . writeInt ( arg2 . length ) ; for ( int loc0 = 0 ; loc0 < arg2 . length ; loc0 ++ ) arg0 . writeAttribute ( arg2 [ loc0 ] ) ; }
XMPMeta function ( String arg0 ) { return parseFromString ( arg0 , "srini_string" ) ; }
Long function ( ) { return startIp ; }
boolean function ( String arg0 , String arg1 , String arg2 ) { return arg0 . equals ( arg1 ) && arg2 . equals ( arg2 ) ; }
void function ( ) { iterator . remove ( ) ; }
void function ( int arg0 ) { this . weight = arg0 ; }
Closure function ( ) { return iTrueClosure ; }
boolean function ( Object arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return false ; } } return true ; }
void function ( String arg0 , Throwable arg1 ) { log ( arg0 , null , arg1 ) ; }
int function ( ASTNode arg0 ) { switch ( arg0 . getVisitor ( ) ) { case SELECTED : return INTERSECTS ; case BEFORE : return BEFORE ; case AFTER : return AFTER ; default : throw new IllegalArgumentException ( "srini_string" ) ; } }
String function ( ) { return this . name ; }
Point function ( ) { return new Point ( startNode . getCenter ( ) , endNode . getCenter ( ) ) ; }
void function ( List < Writable > arg0 ) { queue . addAll ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof IdentifierValue ) { return ( ( IdentifierValue ) arg0 ) . value . equals ( value ) ; } return false ; }
String function ( ) { return name ; }
void function ( String arg0 , String arg1 , String arg2 ) { Employee loc0 = em . find ( Employee . class , arg0 , arg1 , arg2 ) ; if ( loc0 == null ) { loc0 = createEmployee ( arg0 , arg1 , arg2 ) ; em . persist ( loc0 ) ; em . flush ( ) ; } }
void function ( ) { cache . clear ( ) ; }
ValidatorConfiguration function ( String arg0 , String arg1 ) { properties . put ( arg0 , arg1 ) ; return this ; }
void function ( ByteBuffer arg0 ) { write ( arg0 , regularAddress ( ) ) ; }
Protocol function ( ) { return REMOTE . get ( ) ; }
boolean function ( final String arg0 ) { final Matcher loc0 = PHONE_VALIDATION_REGEX . matcher ( arg0 ) ; return loc0 . matches ( ) ; }
void function ( String arg0 ) { addPart ( arg0 , CONFORMANCE ) ; }
int function ( T arg0 , boolean arg1 ) { return orm . insertNoCheck ( arg0 , arg1 ) ; }
DSLContext function ( String arg0 , Object ... arg1 ) { return new DSLContext ( ds , arg0 , arg1 ) ; }
CQLStatementTupleMapper function ( String arg0 ) { return getConfig ( ) . namedQuery ( arg0 ) ; }
void function ( Closure arg0 ) { for ( int loc0 = 0 ; loc0 < iPredicates . length ; loc0 ++ ) { if ( iPredicates [ loc0 ] . evaluate ( arg0 ) ) { return ; } } }
void function ( String arg0 ) { LOGGER . info ( "srini_string" , arg0 ) ; }
void function ( Point2D arg0 ) { this . startPoint = arg0 ; }
UnivPowerSeries < C > function ( ) { return ONE ; }
List < WPTreeNode > function ( WPTreeNode arg0 ) { WPTreeNode loc0 = this ; while ( loc0 != null ) { if ( arg0 != null ) { loc0 = loc0 . parent ; } loc0 = loc0 . parent ; } return children ; }
ASN1Object function ( byte [ ] arg0 ) { try { return ASN1 . decode ( arg0 ) ; } catch ( IOException loc0 ) { throw new IOException ( "srini_string" + loc0 . getMessage ( ) ) ; } }
void function ( String arg0 ) { add_implied_vis ( arg0 ) ; }
byte function ( final long arg0 ) { return ( byte ) ( arg0 ^ ( arg0 >>> 32 ) ) ; }
Symbol function ( ) { if ( pos < stack . length ) { return stack [ pos ] ; } return null ; }
void function ( ) { pos ++ ; }
void function ( InputStream arg0 , boolean arg1 ) { parse ( arg0 , arg1 , null ) ; }
IHoverInfo function ( final String arg0 , final Object ... arg1 ) { return new CSSHoverInfo ( arg0 , arg1 ) ; }
void function ( ComplexType arg0 , XMLStreamWriter arg1 ) { arg1 . writeStartElement ( "srini_string" ) ; writeBack ( arg0 , arg1 ) ; arg1 . writeEndElement ( ) ; }
Object function ( Name arg0 ) { try { return arg0 . getLastComponent ( ) ; } catch ( NamingException loc0 ) { throw NamingException . rethrow ( loc0 ) ; } }
String function ( ) { return suit ; }
void function ( ) { pos . roll ( ) ; lookAt . roll ( ) ; }
void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }
void function ( ) { }
PreviewNode function ( ) { return fParent ; }
int function ( Object arg0 ) { if ( arg0 instanceof Ideal < C > ) { Ideal < C > loc0 = ( Ideal < C > ) arg0 ; return this . ring . equals ( loc0 . ring ) ? 0 : - 1 ; } else { return - 1 ; } }
void function ( ) { SecurityConfiguration . getKeyStoreURL ( ) ; }
void function ( ) { lookupEnabled = true ; }
void function ( ) { }
String function ( Date arg0 ) { if ( arg0 == null ) { return null ; } SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; return loc0 . format ( arg0 ) ; }
void function ( Exception arg0 ) { System . err . println ( arg0 ) ; }
List < AmwFunctionEntity > function ( ResourceType arg0 ) { return functionService . getAllUserDefinedFunctions ( arg0 ) ; }
JQueryLibrary function ( ) { return new JQueryLibrary ( ) ; }
void function ( ObjectContainer arg0 ) { log ( arg0 , true ) ; }
void function ( byte [ ] arg0 ) { }
AST function ( AST arg0 ) { AST loc0 = arg0 . getLastSibling ( ) ; while ( loc0 != null ) { loc0 = loc0 . getNextSibling ( ) ; } return loc0 ; }
int function ( InputStream arg0 ) { return readRGB16LE ( arg0 ) ; }
void function ( String arg0 ) { this . city = arg0 ; }
String function ( List < PropertyTagEntity > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( PropertyTagEntity loc1 : arg0 ) { loc0 . append ( loc1 . toString ( ) ) ; loc0 . append ( "srini_string" ) ; } return loc0 . toString ( ) ; }
void function ( ) { example . advance ( ) ; }
ITracePoint2D function ( ) { return m_previousPoint ; }
byte function ( ) { return delimiter ; }
int function ( int arg0 , int arg1 ) { return arg0 + arg1 ; }
Object function ( ) { return value ; }
BigDecimal function ( ) { return ZERO ; }
Selection function ( int arg0 , int arg1 ) { return new Selection ( arg0 , arg1 , SELECTED ) ; }
Collection < Entry < IdentityKey < K > , V >> function ( ) { return Collections . unmodifiableCollection ( entryArray ) ; }
void function ( C arg0 ) { ring . copyElement ( arg0 ) ; }
List < Integer > function ( String arg0 ) { return _componentToTasks . get ( arg0 ) ; }
Collection < EvaluationListener > function ( ) { return this . evaluationListeners ; }
void function ( PdfWriter arg0 ) { }
int function ( ) { return m_negativeYErrorPixel ; }
String function ( ) { return baseZNode + "srini_string" + IDENTITIES_ZNODE_NAME ; }
GenVector < C > function ( Reader arg0 ) { return GenVector . copyFrom ( arg0 ) ; }
String function ( String arg0 ) { return "srini_string" ; }
void function ( int arg0 ) { System . out . print ( arg0 ) ; }
void function ( ) { }
byte [ ] function ( Object arg0 ) { return toJson ( arg0 , null ) ; }
int function ( ) { return queue . size ( ) ; }
void function ( ) { if ( _autoCompactTemporaryDisable ) { computeCapacity ( ) ; _autoCompactRemovesRemaining -- ; } }
TriangleXYZ function ( ) { if ( isClockwise ( ) ) { return this . v3 ; } else { return this . v1 ; } }
Predicate function ( ) { return predicate ; }
Iterator < HighlightEntry > function ( ) { return subMapIterator ; }
Closure function ( Map < K , V > arg0 , K arg1 , V arg2 , Closure arg3 ) { Closure loc0 = null ; for ( Map . Entry < K , V > loc1 : arg0 . entrySet ( ) ) { if ( arg3 . evaluate ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ) { loc0 = arg3 . call ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } } return loc0 ; }
Object [ ] function ( ) { return ( Object [ ] ) _map . values ( ) . toArray ( ) ; }
Class function ( ) { return clz ; }
void function ( ) { synchronized ( globalMutex ) { globalMutex . clear ( ) ; } }
void function ( K arg0 , V arg1 ) { if ( ! containsKey ( arg0 ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } put ( arg0 , arg1 , true ) ; }
Closure function ( Closure ... arg0 ) { return new IteratorClosure ( arg0 ) ; }
void function ( Request arg0 , boolean arg1 ) { Runner loc0 = buildRunner ( arg0 , arg1 ) ; loc0 . run ( ) ; }
boolean function ( ) { return fEnabled ; }
PdfArray function ( PdfDictionary arg0 ) { this . views . add ( arg0 ) ; return this . views ; }
String function ( RelWriter arg0 ) { return arg0 . join ( values ) ; }
void function ( String arg0 ) { System . out . println ( arg0 ) ; }
void function ( ) { if ( fThread != null ) { fThread . start ( ) ; } }
boolean function ( String arg0 ) { return arg0 . length ( ) == 1 && arg0 . charAt ( 0 ) == '-' ; }
int function ( Object arg0 ) { return getJdbcTemplate ( ) . update ( getSqlUpdate ( arg0 ) ) ; }
Student function ( String arg0 ) { Student loc0 = new Student ( ) ; Student loc1 = loc0 . readFromXML ( arg0 ) ; return loc1 ; }
Phenotype function ( String arg0 , String arg1 ) { return db . update ( createRequest ( arg0 , arg1 ) ) ; }
boolean function ( ) { return useCriterion3 ; }
Image function ( String arg0 , Class arg1 ) { return ( Image ) m_ClassImageMap . get ( arg0 ) ; }
Builder function ( Path arg0 ) { return new Builder ( arg0 ) ; }
void function ( Object arg0 ) { this . iterator . set ( arg0 ) ; }
void function ( String arg0 , Collection < ? > arg1 , Collection < ? > arg2 ) { for ( Object loc0 : arg2 ) { fail ( arg0 , loc0 ) ; } }
WidgetLocator function ( String arg0 ) { return ( WidgetLocator ) _register . remove ( arg0 ) ; }
String function ( ) { return "srini_string" + rows + "srini_string" + cols + "srini_string" + characteristic ( ) + "srini_string" ; }
void function ( ) { _total = 0 ; Iterator loc0 = _support . loc0 ( ) ; while ( loc0 . hasNext ( ) ) { Object loc1 = loc0 . next ( ) ; if ( loc1 != null ) { _current = loc1 ; _map . put ( loc1 , 0 ) ; } } }
IWidgetLocator function ( ) { return _selector . click ( ) ; }
int function ( ) { return size ; }
String function ( byte [ ] arg0 ) { return fingerprint ( arg0 , false ) ; }
void function ( ISelectionEvent arg0 ) { ensureSelectionListenerAdded ( arg0 ) ; fViewer . setSelection ( arg0 . getSelection ( ) ) ; fLastChange = arg0 . getChange ( ) ; fRun . setSelection ( arg0 . getSelection ( ) ) ; fSelectionListener . selectionChanged ( arg0 ) ; }
AdvancedCache function ( AdvancedCache arg0 , String arg1 , boolean arg2 ) { return new AdvancedCacheImpl ( arg0 , arg1 , arg2 ) ; }
AdvancedCache function ( AdvancedCache arg0 ) { return new AbstractCache < > ( ) { @ Override public AdvancedCache get ( Object arg1 ) { return arg0 . get ( arg1 ) ; } } ; }
IEditorElement function ( IEditorPart arg0 ) { return ( IEditorElement ) getJavaInput ( arg0 ) ; }
Header function ( ) { return myHeader ; }
void function ( ) { _buffer = null ; }
int function ( ) { return constantValue != null ? constantValue . index ( ) : 0 ; }
RandomAccessSource function ( byte [ ] arg0 ) { return new ByteArrayRandomAccessSource ( arg0 , false ) ; }
Object function ( Object arg0 ) { return cache . get ( arg0 ) ; }
Iterable < T > function ( T [ ] arg0 ) { return Arrays . asList ( arg0 ) ; }
IConnection function ( String arg0 , String arg1 ) { IConnection loc0 = connections . get ( arg0 ) ; if ( loc0 == null ) { loc0 = bind ( arg0 , arg1 ) ; connections . put ( arg0 , loc0 ) ; } return loc0 ; }
void function ( ) { }
char [ ] function ( ) { return invalidChars ; }
K function ( ) { return kSmallest . ceilingKey ( ) ; }
String [ ] function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; tokenize ( arg0 , loc0 ) ; return loc0 . toArray ( new String [ loc0 . size ( ) ] ) ; }
void function ( ) { }
int function ( ) { return typeIndex ; }
Throwable function ( ) { return invalidScriptError ; }
void function ( int arg0 , int arg1 , int arg2 ) { foreColor . arg0 = arg0 ; foreColor . arg1 = arg1 ; foreColor . arg2 = arg2 ; }
void function ( ) { }
double function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6
boolean function ( ) { return _runningTest != null ; }
void function ( Event arg0 ) { arg0 . consume ( ) ; }
void function ( KeyEvent arg0 ) { System . out . println ( "srini_string" ) ; }
SourceViewer function ( ) { return fSourceViewer ; }
boolean function ( ) { if ( offset >= limit ) { return false ; } return true ; }
Unmarshaller function ( ) { Unmarshaller loc0 = JAXB_CONTEXT . createUnmarshaller ( ) ; loc0 . setEventHandler ( this ) ; return loc0 ; }
void function ( ImageEvent arg0 ) { }
void function ( String arg0 ) { if ( openTagDone ) { throw new IOException ( "srini_string" ) ; } addChildElement ( new XMLElement ( arg0 ) ) ; }
int function ( ) { return max ; }
List < String > function ( ) { if ( tags == null ) { tags = new ArrayList < String > ( ) ; } return this . tags ; }
boolean function ( String arg0 , String arg1 ) { return invokeMethod ( arg0 , arg1 , null ) ; }
void function ( @ ArquillianResource ( "srini_string" ) URL arg0 , @ ArquillianResource ( "srini_string" ) URL arg1 , @ ArquillianResource ( "srini_string" ) URL arg2 , @ ArquillianResource ( "srini_string" ) URL arg3 , @ ArquillianResource ( "srini_string" ) URL arg4 , @ ArquillianResource ( "srini_string" ) URL arg5 , @ ArquillianResource ( "srini_string" ) URL arg6 , @ ArquillianResource ( "srini_string" ) URL arg7 , @ Arqu
void function ( Host arg0 ) { List < Double > loc0 = rttToMonitors . get ( arg0 ) ; if ( loc0 != null ) { loc0 . remove ( arg0 ) ; } }
String function ( String arg0 ) { try { return decode ( arg0 , "srini_string" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw IIOPLogger . ROOT_LOGGER . unavailableISOLatin1Decoder ( ) ; } }
void function ( Person arg0 ) { allPersons . remove ( arg0 ) ; allTags . remove ( arg0 ) ; }
Token [ ] function ( PersistenceContext arg0 ) { return arg0 . getTokens ( ) ; }
int function ( int arg0 ) { if ( arg0 < 0 || arg0 >= size ( ) ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + size ( ) ) ; } return arg0 ; }
TodoDTO function ( @ PathVariable ( "srini_string" ) Long arg0 ) { LOGGER . info ( "srini_string" , arg0 ) ; TodoDTO loc0 = crudService . find ( arg0 ) ; LOGGER . info ( "srini_string" , loc0 ) ; return loc0 ; }
void function ( String arg0 , String ... arg1 ) { for ( String loc0 : arg1 ) { assertEquals ( arg0 + "srini_string" + loc0 , loc0 , arg1 [ loc0 ] ) ; } }
AST function ( AST arg0 , AST arg1 ) { arg0 . insertBefore ( arg1 ) ; return arg0 ; }
void function ( ) { }
void function ( AnimatedNode arg0 ) { }
ITypeHierarchy function ( IType arg0 ) { return findTypeHierarchyInCache ( arg0 ) ; }
SortedBag < T > function ( Class < T > arg0 ) { return new TypedSortedBag < > ( arg0 ) ; }
FieldSelection function ( List < String > arg0 ) { FieldSelection loc0 = new FieldSelection ( ) ; for ( String loc1 : arg0 ) { loc0 . addChild ( loc1 ) ; } return loc0 ; }
boolean function ( ) { return certification ; }
void function ( double arg0 ) { if ( Double . isNaN ( arg0 ) ) { throw new ArithmeticException ( "srini_string" ) ; } }
Color function ( ) { return playerColor ; }
Builder function ( ) { return new Builder ( ) ; }
Branch function ( ) { return new Branch ( this ) ; }
int function ( ) { return tagNo ; }
TypedBag < T > function ( Class < T > arg0 ) { return new TypedBag < > ( arg0 ) ; }
void function ( String [ ] arg0 ) { Main loc0 = new Main ( ) ; loc0 . run ( arg0 ) ; }
void function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { throw new XMPException ( "srini_string" ) ; } }
BigInteger function ( byte [ ] arg0 ) { BigInteger loc0 = new BigInteger ( 1 , arg0 ) ; return loc0 . multiply ( BigInteger . valueOf ( 16 ) ) . multiply ( loc0 . multiply ( BigInteger . valueOf ( 32 ) ) ) ; }
void function ( ) { __connector . autoCommit ( 1 ) ; }
void function ( String arg0 ) { this . outputMessage = arg0 ; }
void function ( Long arg0 ) { this . endIp = arg0 ; }
void function ( int arg0 , String arg1 ) { if ( ! defaults . containsKey ( arg0 ) ) { defaults . put ( arg0 , new HashMap < Long , String > ( ) ) ; } defaults . get ( arg0 ) . put ( arg1 , "srini_string" ) ; }
String function ( ) { return "srini_string" ; }
void function ( ) { transaction ( UNCHECKED_TRANSACTION ) ; }
void function ( float arg0 ) { width = arg0 ; }
Criteria function ( String arg0 ) { return new Criteria ( arg0 ) ; }
float function ( String arg0 , float arg1 ) { if ( arg0 == null ) { return arg1 ; } else { switch ( arg0 ) { case "srini_string" : return Math . toDegrees ( arg1 ) ; case "srini_string" : return Math . toRadians ( arg1 ) ; default : return arg1 ; } }
void function ( String arg0 ) { this . inputInfo = arg0 ; }
int function ( ) { return _size ; }
IWidgetLocator function ( Object arg0 ) { return new WidgetLocator ( this , arg0 ) ; }
void function ( PdfReader arg0 , PdfWriter arg1 ) { fc . addDocument ( arg0 , arg1 ) ; }
int function ( ) { return getAddends ( ) . size ( ) ; }
int function ( ) { return _index ; }
void function ( boolean arg0 , String arg1 , long arg2 ) { if ( arg0 ) { validate ( arg1 , arg2 , null ) ; } }
Widget function ( final Matcher < ? super Widget > arg0 ) { Widget loc0 = find0 ( hierarchy , arg0 ) ; if ( loc0 != null ) { return loc0 ; } return null ; }
E function ( ) { E loc0 = computeNext ( ) ; fromIterator . next ( ) ; return loc0 ; }
Rectangle2D function ( ) { return new Rectangle2D . Double ( startPoint . x - 4 , startPoint . y - 4 , endPoint . x + 4 , endPoint . y + 4 ) ; }
String function ( ) { return lang ; }
void function ( String arg0 , Object arg1 , Object arg2 ) { }
void function ( long [ ] arg0 ) { _list . toArray ( arg0 , 0 , size ( ) ) ; }
boolean function ( int arg0 , int arg1 , Piece arg2 ) { if ( arg0 < 0 || arg0 >= MAX_BOARD_SIZE ) { return false ; } if ( arg1 < 0 || arg1 >= MAX_BOARD_SIZE ) { return false ; } if ( arg2 == null ) { arg2 = new Piece ( arg0 , arg1 ) ; } return boardContainsPiece ( arg0 , arg1 , arg2 ) ; }
Node function ( ) { return parent ; }
HandlerMethodArgumentResolver function ( ) { return new HandlerMethodArgumentResolver ( ) ; }
void function ( final OperatorsInterface arg0 ) { addOperator ( arg0 ) ; }
boolean function ( ) { return _display . isShowing ( ) ; }
void function ( List < Invariant > arg0 ) { for ( Invariant loc0 : arg0 ) add_implied ( loc0 ) ; }
Residue < C > function ( ) { return new Residue < C > ( val , - val ) ; }
GenVector < C > function ( ) { val . add ( - 1 ) ; return this ; }
ArrayList < GenPolynomial < C >> function ( ) { return P ; }
float function ( ) { return list . removeAt ( list . size ( ) - 1 ) ; }
String function ( Member arg0 ) { String loc0 = arg0 . getDeclaringClass ( ) . getName ( ) ; String loc1 = arg0 . getName ( ) ; return loc0 + "srini_string" + loc1 ; }
void function ( RenderListener arg0 ) { delegate . endTextBlock ( ) ; }
boolean function ( ) { return pnpEnabled ; }
boolean function ( ) { return false ; }
void function ( TagState arg0 ) { tagState = arg0 ; }
void function ( final PastryContact arg0 ) { cwNodes . remove ( arg0 ) ; }
int function ( ) { return n - 1 ; }
boolean function ( ) { return root == null ; }
NameParts function ( String arg0 ) { return parse ( arg0 , null ) ; }
GenMatrix < C > function ( Reader arg0 ) { return GenMatrix . fromReader ( arg0 ) ; }
void function ( char arg0 ) { stok . checkChar ( arg0 ) ; }
void function ( String arg0 ) { IFile loc0 = getIndex ( arg0 ) ; if ( loc0 != null ) { loc0 . delete ( ) ; } }
void function ( Document ... arg0 ) { for ( Document loc0 : arg0 ) { loc0 . sort ( ) ; this . insert ( loc0 ) ; } }
String function ( ) { return code ; }
boolean function ( ) { return resourceOrResourceType != null ; }
C function ( ) { return num . abs ( ) ; }
void function ( java . util . Calendar arg0 ) { this . signDate = arg0 ; }
void function ( Object arg0 ) { instances . remove ( arg0 ) ; }
void function ( ) { gralSeeds . clear ( ) ; }
Dialog function ( Shell arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg3 , String arg4 , String arg55 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , arg11 , arg12 , arg4 , arg5 , arg6 , arg7 , arg8 , arg
RDD < Citations > function ( RDD < Citations > arg0 ) { return arg0 . map ( new Function < Citations , Citations > ( ) { @ Override public Citations apply ( Citations arg1 ) { return arg1 . getCitations ( ) ; } } ) ; }
void function ( ) { synchronized ( lock ) { actions . add ( action ) ; } }
Image function ( int [ ] arg0 ) { int loc0 = arg0 . length ; BufferedImage loc1 = new BufferedImage ( loc0 , BufferedImage . TYPE_INT_ARGB ) ; toIntImage ( arg0 , 0 , loc0 , loc1 ) ; return loc1 ; }
void function ( ) { intervalCounter ++ ; }
int function ( int arg0 ) { if ( arg0 < 0 ) { arg0 = - arg0 + 1 ; } return arg0 ; }
List < String > function ( ) { return validatorErrorMessage ; }
String function ( ConfigKey arg0 ) { return this . defaultValue ; }
byte [ ] function ( byte [ ] arg0 ) { return readFixed ( arg0 , 0 , arg0 . length ) ; }
boolean function ( ) { return enabledMetrics . size ( ) > 0 ; }
void function ( ActionEvent arg0 ) { List < ResourceType > loc0 = resourceTypeDataProvider . getResourcesForSelectedResourceType ( arg0 . getActionType ( ) ) ; if ( ! loc0 . isEmpty ( ) ) { refreshResourceList ( ) ; } }
Local < C > function ( int arg0 ) { throw new RuntimeException ( "srini_string" ) ; }
String function ( ASN1Primitive arg0 ) { try { return getExtensionValue ( arg0 , "srini_string" ) ; } catch ( IOException loc0 ) { return null ; } }
void function ( Runnable arg0 ) { syncExec ( arg0 , false ) ; }
Element function ( ) { StackKeeper loc0 = peek ( ) ; if ( loc0 != null ) { loc0 . pop ( ) ; } return loc0 . getElement ( ) ; }
void function ( int arg0 , int arg1 , Animal [ ] arg2 ) { if ( arg2 [ arg1 ] == null ) arg2 [ arg1 ] = FISH ; }
void function ( int arg0 ) { if ( Build . VERSION . SDK_INT < 19 ) throw new UnsupportedOperationException ( "srini_string" ) ; setScreenBrightness ( arg0 ) ; }
String function ( ) { if ( buffer == null ) return "srini_string" ; StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( buffer ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
int function ( ) { return 0 ; }
boolean function ( ) { return escapeText ; }
VarInfoAux function ( ObjectInputStream arg0 ) { arg0 . defaultReadObject ( ) ; if ( isInterned ) { return intern ( ) ; } else { return theDefault ; } }
SearchResult [ ] function ( SearchResultGroup [ ] arg0 , String arg1 ) { return internalSearch ( arg0 , arg1 , null ) ; }
void function ( ) { receivedMsg ++ ; }
int function ( ) { return entry . getBid ( ) ; }
void function ( int arg0 [ ] ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { arg0 [ loc0 ] = YCCtoRGB ( arg0 [ loc0 ] ) ; } }
byte [ ] function ( byte [ ] arg0 ) { ByteArrayOutputStream loc0 = new ByteArrayOutputStream ( ) ; encode ( arg0 , loc0 ) ; return loc0 . toByteArray ( ) ; }
void function ( String arg0 ) { memory . append ( arg0 ) ; }
double function ( UnivariateRealFunction arg0 , double arg1 , double arg2 , int arg3 ) { return bracket ( arg0 , arg1 , arg2 , 1 , arg3 ) ; }
boolean function ( ) { return ! vertexLoop . isEmpty ( ) && ! vertexLoop . contains ( polyline ( ) ) ; }
String function ( Object ... arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Object loc1 : arg0 ) { loc0 . append ( String . format ( "srini_string" , loc1 ) ) ; } return loc0 . toString ( ) ; }
LIST < C > function ( C arg0 , C arg1 ) { return new LIST < C > ( arg0 , arg1 ) ; }
void function ( ) { if ( mixer == null ) { Mixer loc0 = new Mixer ( ) ; mixer = loc0 . addLine ( samples , 0 , 8 ) ; } }
void function ( long arg0 ) { this . timeToLiveForContacts = arg0 ; }
void function ( Object arg0 ) { map . put ( getKey ( ) , arg0 ) ; }
SchemaPlus function ( String arg0 ) { SchemaPlus loc0 = new SchemaPlus ( ) ; loc0 . setOwner ( arg0 ) ; return loc0 ; }
RuleSet function ( ) { if ( this . ruleSet == null ) { this . ruleSet = Digester . getRuleSet ( ) ; } return this . ruleSet ; }
void function ( ) { _isRunning = false ; }
PolynomialFunction [ ] function ( ) { return ( PolynomialFunction [ ] ) polynomials . clone ( ) ; }
boolean function ( ) { return num . equals ( den ) ; }
boolean function ( ) { return false ; }
Predicate < WebElement > function ( ) { return new DisplayPredicate ( ) ; }
Local < C > function ( long arg0 ) { return new Local < C > ( arg0 ) ; }
int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < 32 ; loc1 ++ ) { loc0 <<= 8 ; loc0 |= ( arg0 & 0xFF ) ; } return loc0 ; }
void function ( Collection < ? > arg0 , Collection < ? > arg1 , Comparator < ? super E > arg2 , int arg3 ) { Collections . sort ( arg0 , arg2 , arg3 ) ; for ( int loc0 = 0 ; loc0 < arg3 ; loc0 ++ ) { add ( arg0 . iterator ( ) , arg1 , arg2 , arg3 - loc0 ) ; } }
Criteria function ( ) { return new Criteria ( this . criteriaType , this . left , this . right ) ; }
String function ( ) { return classRef . getName ( ) ; }
int function ( ) { return val . sum ( ) ; }
void function ( Subpath arg0 ) { subpaths . add ( arg0 ) ; }
boolean function ( ) { return false ; }
int function ( ) { return identifier ; }
int function ( ) { return stack . size ( ) ; }
int function ( ) { return readExpGolombCodeNum ( ) ; }
void function ( ) { throw new RuntimeException ( "srini_string" ) ; }
void function ( String arg0 , Object arg1 ) { mParameters . put ( arg0 , arg1 ) ; }
boolean function ( final ProjCoordinate arg0 ) { if ( this . x < arg0 . x ) { return false ; } else if ( this . x > arg0 . x + this . tolerance ) { return false ; } else { return true ; } }
int [ ] function ( int [ ] arg0 , int arg1 ) { if ( arg0 == null ) return null ; if ( arg1 < 0 || arg1 > arg0 . length ) return null ; int [ ] loc0 = new int [ arg1 ] ; for ( int loc1 = 0 ; loc1 < arg1 ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] ; return loc0 ; }
boolean function ( Object arg0 , Object arg1 ) { if ( arg0 == null ) { return arg1 == null ; } if ( arg1 == null ) { return false ; } return arg0 . equals ( arg1 ) ; }
void function ( String arg0 , String arg1 , Map < String , String > arg2 ) { getAndExecuteScriptFromGeneratedConfig ( arg0 , arg1 , arg2 , false ) ; }
int function ( ) { return backgroundMode ; }
float function ( ) { return y * x + x * y ; }
HtmlPipelineContext function ( StackKeeper arg0 ) { queue . add ( arg0 ) ; return this ; }
void function ( Block arg0 , Block arg1 ) { paths . add ( new Path ( arg0 , arg1 ) ) ; }
void function ( ) { assertThat ( map . containsKey ( 1 ) , equalTo ( true ) ) ; assertThat ( map . containsKey ( 2 ) , equalTo ( false ) ) ; assertThat ( map . containsKey ( 3 ) , equalTo ( false ) ) ; }
String [ ] function ( ) { return keyAliases ; }
String function ( ) { return iterator . toString ( ) ; }
void function ( ) { when ( dao . getAllCustomers ( ) . size ( ) ) . thenReturn ( 0 ) ; when ( dao . getCustomerById ( 1 ) ) . thenReturn ( 1 ) ; when ( dao . getCustomerById ( 2 ) ) . thenReturn ( 2 ) ; when ( dao . getCustomerById ( 3 ) ) . thenReturn ( 3 ) ; }
void function ( ) { LOGGER . info ( "srini_string" ) ; H2EntityManagerFactoryBean loc0 = new H2EntityManagerFactoryBean ( ) ; loc0 . setEntityManagerFactory ( entityManagerFactory ( ) ) ; LOGGER . info ( "srini_string" ) ; transactionManager ( ) . begin ( ) ; }
void function ( ) { if ( isTimerRunning ) return ; theTimer = new Timer ( ) ; theTimer . start ( ) ; }
void function ( ) { subpaths . remove ( subpaths . size ( ) - 1 ) ; }
ResourceEditPropertyBuilder function ( String arg0 ) { this . fcExternalLink = arg0 ; return this ; }
byte [ ] function ( ) { if ( consumedLength == 0 ) { return null ; } byte [ ] loc0 = new byte [ consumedLength ] ; System . arraycopy ( this . getData ( ) , 0 , loc0 , 0 , consumedLength ) ; return loc0 ; }
void function ( KrbSetting arg0 ) { this . krbSetting = arg0 ; }
boolean function ( ) { return closed ; }
boolean function ( ClassDoc arg0 , String arg1 , boolean arg2 ) { Set < ClassDoc > loc0 = cmap . get ( arg0 ) ; if ( loc0 == null ) return false ; for ( ClassDoc loc1 : loc0 ) { if ( loc1 . simpleName ( ) . startsWith ( arg1 ) ) { return true ; } } return false ; }
JQueryLibrary function ( ) { return new JQueryLibrary ( ) ; }
TabularData function ( ) { return new TabularDataSupport ( TABULAR_TYPE ) ; }
void function ( ) { final String loc0 = Nazgul . getInstance ( ) . getName ( ) ; assertEquals ( "srini_string" , loc0 ) ; }
void function ( T arg0 ) { lock . writeLock ( ) . lock ( ) ; put ( arg0 ) ; lock . writeLock ( ) . unlock ( ) ; }
String [ ] function ( String arg0 ) { ArrayList loc0 = new ArrayList ( ) ; tokenize ( arg0 , loc0 ) ; return loc0 . toArray ( new String [ loc0 . size ( ) ] ) ; }
void function ( ) { assertEquals ( "srini_string" , 4 , ctx . getParams ( ) . getInt ( "srini_string" ) ) ; }
void function ( ) { if ( resources == null ) { resources = getResources ( ) ; } }
void function ( String arg0 ) { this . id = Integer . parseInt ( arg0 ) ; this . name = arg0 ; }
String function ( int arg0 ) { return keyCodeDescMap . get ( arg0 ) ; }
short function ( ) { return list . get ( list . size ( ) - 1 ) ; }
T function ( Class < T > arg0 ) { return transform ( 0 , arg0 ) ; }
double function ( ) { return mu ; }
boolean function ( int arg0 ) { return isStandardTypeCode ( arg0 ) ; }
String function ( ) { return "srini_string" + instruction_descr + "srini_string" + string_array . toString ( ) + "srini_string" ; }
void function ( String arg0 , int arg1 , int arg2 , int arg3 , int arg4 ) { send ( WsMessage . create ( WsMessage . TYPE_SUBSCRIBE , arg0 , arg1 , arg2 , arg3 , arg4 ) ) ; }
int function ( ) { return numberOfReplicationTries ; }
boolean function ( ) { return map . isEmpty ( ) ; }
long function ( ) { return allocationLimit . get ( ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof Ring ) { return ( ( Ring ) arg0 ) . size ( ) ; } else { return - 1 ; } }
void function ( int arg0 , int arg1 ) { if ( useRanks ) { keyPopularity . add ( arg1 ) ; } else { int loc0 = startRank + arg1 ; if ( loc0 < size ) { keyPopularity . add ( loc0 ) ; } } }
File function ( ) { return tempPropertiesFile ; }
byte [ ] function ( byte [ ] arg0 , PrivateKey arg1 , String arg2 ) { try { Signature loc0 = Signature . getInstance ( ID_PKINIT_AUTHDATA ) ; loc0 . initSign ( arg1 , arg2 ) ; loc0 . update ( arg0 , 0 , arg0 . length ) ; loc0 . update ( arg0 , 0 , arg0 . length ) ; return loc0 . sign ( ) ; } catch ( NoSuchAlgorithmException loc0 ) { throw new IOException ( "srini_string" ) ; } }
String [ ] [ ] function ( String arg0 ) { return this . collectionPropertyMappingByRole . get ( arg0 ) ; }
GenPolynomial < GenPolynomial < C >> function ( ) { return red ; }
T function ( ) { return datum ; }
void function ( ) { if ( _autoCompactTemporaryDisable ) { computeCapacity ( ) ; _autoCompactRemovesRemaining -- ; } }
JSBundleLoader function ( final Context arg0 , final String arg1 ) { return new JSBundleLoader ( arg0 , arg1 ) ; }
Section function ( int arg0 ) { return sections . get ( arg0 ) ; }
boolean function ( long arg0 ) { if ( ! hasNext ( ) ) { return false ; } boolean loc0 = sync [ ( int ) ( arg0 % SYNC_SIZE ] == 0 ; if ( loc0 ) { arg0 += SYNC_SIZE ; } return loc0 ; }
List function ( ) { return paths ; }
WebArchive function ( ) { return createWar ( "srini_string" , "srini_string" , "srini_string" ) ; }
int function ( ) { return fConditionCheckingFailedSeverity ; }
void function ( VectorXYZ arg0 ) { pos . set ( arg0 ) ; lookAt . set ( arg0 ) ; }
void function ( BaseContentEntry < ? > arg0 , String arg1 ) { arg0 . setParent ( arg1 ) ; }
TaskManager function ( List < Task > arg0 ) { return new TaskManager ( arg0 , true ) ; }
boolean function ( ColorPolynomial < C > arg0 ) { return getPolynomial ( ) . equals ( arg0 . getPolynomial ( ) ) ; }
Duration function ( int arg0 ) { return Duration . valueOf ( arg0 ) ; }
long function ( T arg0 , boolean arg1 ) { return orm . update ( arg0 , arg1 ) ; }
void function ( Exception arg0 ) { log . error ( arg0 ) ; }
String function ( ) { return path ; }
Object function ( Object arg0 , Closure arg1 ) { try { return iClosure . evaluate ( arg0 , arg1 ) ; } catch ( Throwable loc0 ) { throw new TransformerException ( loc0 ) ; } }
String function ( ) { return fTrace ; }
int function ( int arg0 ) { switch ( arg0 ) { case MODIFIED : return MODIFIED ; case MISSING_NONSENSITIVE : return MISSING_NONSENSITIVE ; case MODIFIED_BITVAL : return MODIFIED_BITVAL ; case MISSING_FLOW : return MISSING_FLOW ; case MISSING_NONSENSITIVE : return MISSING_NONSENSITIVE ; default : return 0 ; } }
Monitor function ( ) { return monitor ; }
void function ( File arg0 ) { if ( arg0 . exists ( ) && ! arg0 . isDirectory ( ) ) { arg0 . delete ( ) ; } startProcess ( arg0 ) ; }
String function ( ) { return name ; }
MatchResult function ( Widget arg0 , Display arg1 , Matcher < ? super Widget > arg2 ) { return find ( arg0 , arg1 , arg2 , 0 ) ; }
void function ( String arg0 ) { this . serialNumber = arg0 ; }
Iterator < Entry > function ( ) { return readers . iterator ( ) ; }
Object function ( ) { return last . getKey ( ) ; }
boolean function ( ) { return isField ; }
void function ( int arg0 , int arg1 , int arg2 ) { int [ ] loc0 = createSegmentTree ( arg0 , arg1 , arg2 ) ; SegmentTree loc1 = new SegmentTree ( loc0 ) ; loc1 . update ( arg0 , arg1 , arg2 ) ; }
void function ( ) { negatedParameters . addAll ( subParameters ) ; }
Condition function ( final Widget arg0 , final String arg1 ) { return new Condition ( ) { @ Override public boolean apply ( ) { return arg0 . getText ( ) . equals ( arg1 ) ; } } ; }
Closure [ ] function ( ) { return iClosures ; }
Predicate function ( String arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return new Predicate ( arg0 ) ; }
void function ( String arg0 ) { this . catalogName = arg0 ; }
void function ( int arg0 , RecordBatch arg1 , boolean arg2 , boolean arg3 ) { if ( arg2 ) { arg1 . copyFrom ( arg0 , arg3 ) ; } else { arg1 . copyTo ( arg0 , arg3 ) ; } }
void function ( Object arg0 , Throwable arg1 ) { log ( LogLevel . WARN , arg0 , arg1 ) ; }
Object function ( ) { return iConstant ; }
boolean function ( ) { return iterators . size ( ) > 0 ; }
void function ( String arg0 ) { collapsedClients . add ( arg0 ) ; }
SortedSet function ( SortedSet arg0 ) { if ( arg0 == null ) { return EMPTY_SORTED_SET ; } return arg0 . sortedCopy ( ) ; }
ListIterator function ( ListIterator arg0 ) { if ( arg0 == null ) { return null ; } return new IntListIterator ( arg0 ) ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof ColoredSystem ) ) { return false ; } ColoredSystem < C > loc0 = ( ColoredSystem < C > ) arg0 ; if ( ! cgb . equals ( loc0 . cgb ) ) { return false ; } return true ; }
IntListIterator function ( int arg0 ) { return new UnmodifiableIntListIterator ( arg0 ) ; }
void function ( ) { Display . getDefault ( ) . syncExec ( new Runnable ( ) { public void run ( ) { Display . getDefault ( ) . removeAllViews ( ) ; } } ) ; }
boolean function ( ) { return ( type == DICTIONARY ) ; }
String function ( ) { return reason ; }
void function ( ) { Customer loc0 = dao . retrieve ( CUSTOMER ) ; assertNotNull ( "srini_string" , loc0 ) ; }
int function ( Comparable arg0 , Comparable arg1 ) { return arg0 . compareTo ( arg1 ) ; }
String function ( ) { return this . contentEncoding ; }
void function ( PdfReader arg0 ) { fc . setBookmarks ( arg0 ) ; }
Collection function ( ) { return defaultHierarchy . getComponents ( ) ; }
void function ( double arg0 ) { this . mu = arg0 ; }
int function ( int arg0 [ ] ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { if ( arg0 [ loc1 ] > loc0 ) { loc0 = arg0 [ loc1 ] ; } } return loc0 ; }
TypedSet < T > function ( Set < T > arg0 ) { return new TypedSetImpl < T > ( arg0 ) ; }
void function ( String arg0 , PdfDictionary arg1 ) { this . map . put ( logicalPage , arg1 ) ; }
void function ( ) { list . clear ( ) ; }
int function ( ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < nbPlanes ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < nbPalettes ; loc2 ++ ) { loc0 *= audioClips_ . elementAt ( loc1 , loc2 ) ; } } return loc0 ; }
int function ( ) { return ( int ) Math . round ( y ) ; }
boolean function ( ) { return val . isZero ( ) ; }
ReflectClass function ( String arg0 ) { return _classLoader . forName ( arg0 ) ; }
ICreateTargetQueries function ( ) { return fDelegate ; }
int function ( ) { return ring . hashCode ( ) ; }
String function ( ) { final String loc0 = _selector . select ( _treeItemTester . getElement ( ) ) . toString ( ) ; return loc0 . substring ( 1 ) ; }
Set < String > function ( ) { return roles ; }
Owner function ( ) { return owner ; }
TransInfo function ( ) { return transInfo ; }
void function ( ) { MyListener . setInvocationCount ( 0 ) ; SFSBCMT loc0 = lookup ( "srini_string" , SFSBCMT . class ) ; this . doCMTTest ( loc0 , 1 ) ; }
StubStrategy function ( String arg0 , String arg1 , List < String > arg2 ) { StubStrategy loc0 = new StubStrategy ( arg0 , arg1 , arg2 ) ; return loc0 ; }
String function ( String arg0 ) { return arg0 ; }
void function ( ) { release ( ) ; }
int function ( ) { return lowValue ; }
Expr function ( ) { return ( Expr ) stack . get ( height - 1 ) ; }
void function ( char arg0 ) { this . lastChar = arg0 ; }
int function ( ) { return num_values ; }
void function ( ExecutionData arg0 ) { names . add ( arg0 . getClass ( ) . getName ( ) ) ; entries . put ( arg0 . getId ( ) , arg0 ) ; }
void function ( ) { }
boolean function ( ) { return ( this . isEmpty ( ) ) ; }
boolean function ( ) { return isKeyOptional ; }
void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }
String function ( final VARCHARHolder arg0 ) { return arg0 . toString ( ) ; }
boolean function ( ) { return this . variantMap . isEmpty ( ) ; }
URI function ( ) { return uri ; }
ProgressRequestBody function ( long arg0 ) { return new ProgressRequestBody ( arg0 , "srini_string" ) ; }
void function ( Airport arg0 ) { this . larnacaAirport = arg0 ; }
void function ( double arg0 ) { x1 += arg0 ; y2 += arg0 ; Canvas . getInstance ( ) . repaint ( ) ; }
Message function ( ) { return new Message ( ) ; }
void function ( Element arg0 , Map < String , String [ ] > arg1 , Map < String , String [ ] > arg2 ) { ImportLockupData loc0 = new ImportLockupData ( ) ; loc0 . importLockupData ( arg0 , arg1 , arg2 ) ; }
int function ( Object arg0 ) { if ( arg0 instanceof Polynomial ) { Polynomial < C > loc0 = ( Polynomial < C > ) arg0 ; return loc0 . signum ( ) == signum ( ) ? 0 : - 1 ; } else { return - 1 ; } }
boolean function ( List < VectorXZ > arg0 ) { if ( arg0 . size ( ) != size ( ) ) { return false ; } for ( int loc0 = 0 ; loc0 < arg0 . size ( ) ; loc0 ++ ) { if ( ! arg0 . get ( loc0 ) . equals ( arg0 . get ( loc0 + 1 ) ) ) { return false ; } } return true ; }
String function ( ) { return iTextVersion ; }
void function ( JobConf arg0 ) { arg0 . setCombiner ( COMBINER ) ; }
void function ( MethodParameter arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } if ( ! arg0 . isTrue ( ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } }
int function ( ) { return ( int ) Math . round ( y2 ) ; }
String function ( ) { return name ; }
BigDecimal function ( ) { return random . nextBigDecimal ( ) ; }
int function ( int arg0 , int arg1 , int arg2 ) { return arg0 - arg1 ; }
void function ( int arg0 , int arg1 ) { int loc0 = arg1 - arg0 ; int loc1 = 0 ; for ( int loc2 = 0 ; loc2 < nbPlanes ; loc2 ++ ) { for ( int loc3 = 0 ; loc3 < nbPlanes ; loc3 ++ ) { if ( audioClips_ . get ( loc2 , loc3 ) == arg0 ) { loc1 += audioClips_ . get ( loc2 , loc3 ) ; } } } totalDuration_ += loc1 ; listeners_ . firePropertyChange ( "srini_string" , loc0 , loc1 ) ; }
DateTimeFieldType function ( int arg0 ) { return getField ( arg0 ) . getType ( ) ; }
String [ ] function ( ) { return columnNames ; }
T function ( ) { return key ; }
Getcontenttype function ( ) { return getcontenttype ; }
void function ( ) { validateChain ( ) ; }
String function ( String arg0 ) { return myself . bundle . getString ( arg0 ) ; }
StandardServiceRegistryBuilder function ( ) { autoCloseRegistry = true ; return this ; }
int function ( ) { return val . hashCode ( ) ; }
void function ( double arg0 , double arg1 ) { if ( arg0 < arg1 ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" + arg1 ) ; } }
Criteria function ( Object arg0 , Object arg1 ) { return new EqualsCriterion ( arg0 , arg1 ) ; }
V function ( CheckedRunnable < V > arg0 ) { throw arg0 ; }
void function ( File arg0 , File arg1 , String arg2 ) { unzip ( arg0 , arg1 , arg2 , false ) ; }
void function ( ) { when ( dao . getAllCustomers ( ) . size ( ) ) . thenReturn ( 0 ) ; dao . delete ( "srini_string" ) ; when ( dao . getAllCustomers ( ) . size ( ) ) . thenReturn ( 0 ) ; when ( dao . getAllCustomers ( ) . remove ( "srini_string" ) ) . thenReturn ( 0 ) ; }
boolean function ( Object arg0 ) { if ( arg0 == this ) { return true ; } if ( ! ( arg0 instanceof TransInfo ) ) { return false ; } TransInfo loc0 = ( TransInfo ) arg0 ; if ( ! this . range . equals ( loc0 . range ) ) { return false ; } return true ; }
Item function ( ) { if ( size == 0 ) throw new RuntimeException ( "srini_string" ) ; size -- ; if ( first == null ) first = null ; return first . item ; }
String [ ] function ( ) { return getVariables ( ) ; }
MathUtil function ( ) { return instance ; }
List < VectorXZ > function ( ) { return vertexLoop ; }
void function ( ) { m_negativeXErrorPixel = 0 ; m_negativeYErrorPixel = 0 ; m_positiveXErrorPixel = 0 ; m_positiveYErrorPixel = 0 ; }
boolean function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null ) { return false ; } if ( arg0 . equals ( arg1 ) ) { return true ; } return false ; }
Person function ( ) { return new Person ( this ) ; }
void function ( ) { stop = true ; }
Transformer [ ] function ( ) { return iTransformers ; }
Quotient < C > function ( ) { return Quotient . random ( ) ; }
void function ( String arg0 , String arg1 , String arg2 ) { assertEquals ( arg0 , arg1 , arg2 , null ) ; }
void function ( List < Pair < C , C >> arg0 , boolean arg1 ) { sbb . setProvider ( new ProviderPairListProvider ( arg0 , arg1 ) ) ; }
void function ( MyObserver arg0 ) { _observer . add ( arg0 ) ; }
String function ( int arg0 ) { return JDBC_TYPE_MAP . get ( arg0 ) ; }
void function ( List < GenPolynomial < C >> arg0 , List < GenPolynomial < C >> arg1 , List < GenPolynomial < C >> arg2 , List < GenPolynomial < C >> arg3 , List < GenPolynomial < C >> arg4 , List < GenPolynomial < C >> arg5 , List < GenPolynomial < C >> arg6 , List < GenPolynomial < C >> arg7 , List < GenPolynomial < C >> arg8 , List < GenPolynomial < C >> arg9 , List < GenPolynomial < C >> arg10 , List < GenPolynomial < C >> arg11 , List < GenPolynomial < C >> arg12 , List < GenPolynomial < C >> arg13 , List < GenPolynomial < C >>
void function ( final Writer arg0 ) { if ( arg0 != null ) { Assert . assertNull ( arg0 ) ; } }
List < PropertyDeclaration > function ( ) { if ( properties == null ) { properties = new ArrayList < PropertyDeclaration > ( ) ; } return this . properties ; }
int function ( ) { return 0 ; }
double function ( double arg0 , double arg1 , double arg2 ) { double loc0 = 1 ; for ( int loc1 = 0 ; loc1 < N_ITER ; loc1 ++ ) { loc0 *= arg0 * arg1 * loc1 ; } return loc0 ; }
void function ( final OPModeManager arg0 ) { }
void function ( final Region arg0 ) { if ( fIsEclipseNLS ) { fTagPosition = arg0 ; } }
Set < String > function ( Class < ? > arg0 ) { Set < String > loc0 = new HashSet < String > ( ) ; Field [ ] loc1 = arg0 . getFields ( ) ; for ( Field loc2 : loc1 ) { loc0 . add ( loc2 . getName ( ) ) ; } return loc0 ; }
String function ( ) { return name ; }
void function ( ) { buffer [ pointer ] = false ; buffer [ pointer + 1 ] = true ; }
int function ( ) { return e1 . hashCode ( ) ^ e2 . hashCode ( ) ; }
void function ( boolean arg0 ) { debug = arg0 ; }
int function ( ) { return size ; }
TemplateContextType function ( ) { return fContextType ; }
void function ( ) { PdfPTable loc0 = createTable ( "srini_string" ) ; PdfPTable loc1 = createTable ( "srini_string" ) ; loc0 . add ( loc1 ) ; loc1 . add ( loc0 ) ; loc0 . add ( loc1 ) ; loc1 . add ( loc0 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 . add ( loc1 ) ; loc0 .
void function ( int arg0 ) { _index = arg0 ; }
void function ( Map < String , BaseFontParameters > arg0 ) { insertNames ( arg0 ) ; }
ModInteger function ( java . math . BigInteger arg0 ) { return new ModInteger ( val . mod ( arg0 ) , val . mod ( arg0 ) ) ; }
InputStream function ( ) { return this . stream ; }
Location function ( ) { return mockLocation ; }
String function ( ) { return baseZNode ; }
String [ ] function ( String arg0 ) { return OPERATOR_METRICS [ arg0 ] ; }
T function ( S arg0 ) { return values . remove ( arg0 ) ; }
Optional < Section > function ( ) { return Optional . empty ( ) ; }
void function ( ) { if ( ! closed ) { throw new IllegalStateException ( "srini_string" ) ; } db . begin ( ) ; closed = true ; }
int function ( int arg0 ) { int loc0 = ( arg0 >> 16 ) & 0xff ; return loc0 ; }
Predicate function ( ) { return iPredicate ; }
void function ( ) { long loc0 = System . currentTimeMillis ( ) ; long loc1 = expectedExecutionTime + System . currentTimeMillis ( ) ; long loc2 = loc0 - this . expectedExecutionTime ; Assert . assertEquals ( loc1 , loc2 ) ; }
void function ( ) { fForked = true ; fForkChangeExecution = false ; fStopSeverity = - 1 ; }
void function ( MotionEvent arg0 ) { mGestureDetector . onTouchEvent ( arg0 ) ; mPanZoomController . onTouchEvent ( arg0 ) ; }
void function ( boolean arg0 ) { this . invoked = arg0 ; }
ConsoleLoggerModule function ( Class < ? > arg0 ) { if ( singleton == null ) { singleton = new ConsoleLoggerModule ( ) ; } return singleton ; }
int function ( T arg0 ) { return nodePosition . get ( arg0 ) ; }
boolean function ( ) { if ( fIsIgnoringSingleLetters ) { return false ; } else { return isAlphaNumeric ( fLastToken ) ; } }
void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . trace ( FQCN , arg0 , arg1 ) ; } }
boolean function ( ) { return false ; }
Double function ( ) { return xValue ; }
void function ( Chunk arg0 , Chunk arg1 ) { arg0 . setColor ( arg1 . getColor ( ) ) ; arg0 . setStyle ( arg1 . getStyle ( ) ) ; }
String [ ] function ( ) { String [ ] loc0 = new String [ N ] ; for ( int loc1 = 0 ; loc1 < N ; loc1 ++ ) { loc0 [ loc1 ] = var + "srini_string" + order + "srini_string" + loc1 ; } return loc0 ; }