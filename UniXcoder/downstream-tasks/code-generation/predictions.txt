void function ( ) { functionVarMappings . clear ( ) ; functionBracePositions . clear ( ) ; functionNum = 0 ; }
Sha256Hash function ( File arg0 ) { InputStream loc0 = new FileInputStream ( arg0 ) ; return sha256 ( loc0 ) ; }
String function ( Object arg0 , boolean arg1 ) { if ( id == null ) { id = generateID ( ) ; } return id ; }
Matcher < T > function ( T arg0 ) { return new ComparableWithComparator < T > ( arg0 ) ; }
int function ( ) { return denom ; }
String function ( ) { return image ; }
void function ( BundleContext arg0 ) { }
void function ( ) { Assert . assertTrue ( mTestStream . seek ( mBlockSize ) ) ; Assert . assertTrue ( mTestStream . isSeekable ( ) ) ; }
void function ( long arg0 ) { System . gc ( ) ; try { Thread . sleep ( arg0 ) ; } catch ( InterruptedException loc0 ) { throw formatRuntimeException ( loc0 ) ; } }
void function ( ) { mManager = new TransferManager ( BUCKET_NAME , KEY , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" ) ; }
String function ( ) { return "srini_string" ; }
Logger function ( ) { return LOG ; }
int function ( String arg0 ) { if ( al . contains ( arg0 ) ) return al . indexOf ( arg0 ) ; return - 1 ; }
void function ( ) { tx . close ( ) ; }
Map < String , String > function ( String arg0 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . put ( arg0 , arg0 ) ; return loc0 ; }
T [ ] function ( String arg0 , T [ ] arg1 ) { if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if ( arg0 . equals ( "srini_string" ) ) { return arg1 ; } else if (
boolean function ( Collection < JavaFileObject > arg0 , Goal arg1 ) { return runToGoal ( arg1 , arg0 ) ; }
void function ( boolean arg0 ) { if ( arg0 ) Gps . arg0 = true ; else Gps . arg0 = false ; }
boolean function ( View arg0 ) { int loc0 = arg0 . getLayout ( ) . intValue ( ) ; if ( loc0 == 24 ) { return true ; } return false ; }
Checklist function ( String arg0 ) { return ( Checklist ) lists . get ( arg0 ) ; }
void function ( ) { instance . setDay ( 7 ) ; assertEquals ( 7 , instance . getDay ( ) ) ; }
int function ( int arg0 ) { int loc0 = tileFurthestFromBase ( arg0 ) ; if ( loc0 == - 1 ) { loc0 = nextAvailableLane ( ) ; } return loc0 ; }
Matrix function ( ) { if ( ! ( Matrix . square ( ) . equals ( Matrix . identity ( ) ) ) { throw new IllegalArgumentException ( "srini_string" ) ; } return inverse ( ) ; }
ExitStatus function ( ) { return thisExitStatus ; }
String function ( String arg0 ) { return nsh . getHoverAttribute ( arg0 ) ; }
List < AttributeStatementProvider > function ( ) { return Collections . unmodifiableList ( attributeStatementProviders ) ; }
void function ( ) { unloadSounds ( sounds ) ; }
ProjectModel function ( String arg0 ) { return projectCache . get ( arg0 ) ; }
String function ( int arg0 ) { return namedColors . get ( new RGB ( arg0 , arg0 , arg0 ) ) ; }
String function ( ) { return name + "srini_string" + getSuffixFromType ( type ) ; }
int function ( ) { return port ; }
Set < String > function ( ) { Set < String > loc0 = jedis . loc0 ( "srini_string" ) ; return loc0 ; }
void function ( ) { mBlocksToMoveIn . clear ( ) ; mBlocksToMoveOut . clear ( ) ; }
UserSubject function ( ) { return subject ; }
int function ( boolean arg0 ) { int loc0 ; if ( arg0 ) { loc0 = getIntFromFormat ( ) ; } else { loc0 = formatRepeatCount ; } return loc0 ; }
String function ( ) { return errorMsg ; }
boolean function ( String arg0 ) { return _all . containsKey ( arg0 ) ; }
String function ( Node arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; merge ( arg0 , loc0 ) ; return loc0 . toString ( ) ; }
MarshalRegistry function ( Context arg0 ) { MarshalRegistry loc0 = ( MarshalRegistry ) arg0 . getComponent ( MarshalRegistry . class ) ; if ( loc0 == null ) { loc0 = new MarshalRegistry ( arg0 ) ; arg0 . putComponent ( MarshalRegistry . class , loc0 ) ; } return loc0 ; }
List < Pair < T , T >> function ( T arg0 , T arg1 , T arg2 ) { return Pair . of ( arg0 , arg1 , arg2 ) ; }
void function ( ParametersMetaData arg0 ) { this . parametersMetaData = arg0 ; }
String [ ] function ( ) { return new String [ 0 ] ; }
void function ( byte [ ] arg0 ) { try { writer . write ( arg0 ) ; } catch ( XMLStreamException loc0 ) { throw new RuntimeException ( "srini_string" + loc0 . getMessage ( ) , loc0 ) ; } }
String function ( ) { return isActive ; }
HmDataServer function ( String arg0 , int arg1 ) { return new HmDataServer ( arg0 , arg1 ) ; }
ECKey function ( ) { for ( ECKey loc0 : keys ) { if ( loc0 . getPrivate ( ) != null ) { return loc0 ; } } return null ; }
void function ( ) { if ( instrumentation != null ) { instrumentation . destroy ( ) ; } }
void function ( long arg0 ) { this . maximumKeySize = arg0 ; }
int function ( String arg0 ) { return ts . getInt ( arg0 ) ; }
int function ( ) { return bip32HeaderPub ; }
int function ( ) { return signum ( ) == - 1 ? 1 : signum ( ) ; }
MenuItem function ( View arg0 ) { mMenuItem . setActionView ( arg0 ) ; return this ; }
void function ( ) { when ( mockServerMessage . getServerSession ( ) ) . thenReturn ( mockServerSession ) ; notificationController . deletePersistentNotification ( MOCK_SESSION_ID , mockServerMessage ) ; verify ( mockServerMessage ) . delete ( ) ; }
void function ( double arg0 ) { this . seconds = arg0 ; }
void function ( ServiceID arg0 ) { this . serviceID = arg0 ; }
long function ( ) { return buffer . limit ( ) - buffer . position ( ) ; }
T function ( ) { return mPayload ; }
Date function ( ) { return addedDate ; }
List < DirectedAcyclicGraphNode < T >> function ( ) { return mChildren ; }
View function ( ) { View loc0 ; if ( mHeaderProvider != null ) { loc0 = mHeaderProvider . getCurrentView ( ) ; } else { loc0 = mAdapter . getCurrentView ( ) ; } return loc0 ; }
void function ( List < TestResultDetailsDTO > arg0 ) { this . regTestResultDetailsLst = arg0 ; }
long function ( ) { return testId ; }
void function ( ) { Time loc0 = Time . loc0 ( ) ; Date loc1 = loc0 . toDate ( ) ; Date loc2 = loc0 . toDate ( ) ; assertEquals ( loc1 , loc2 ) ; }
void function ( BigDecimal arg0 ) { this . feedConfigId = arg0 ; }
String function ( ) { return this . writeCompressionType ; }
boolean function ( RangeSet < C > arg0 ) { if ( arg0 . isEmpty ( ) ) { return true ; } return arg0 . encloses ( this ) ; }
void function ( Map < String , Object > arg0 ) { for ( Map . Entry < String , Object > loc0 : arg0 . entrySet ( ) ) { setVariable ( loc0 . getKey ( ) , loc0 . getValue ( ) ) ; } }
boolean function ( ) { return this . buffer . remaining ( ) > 0 ; }
void function ( String arg0 , String arg1 , String arg2 ) { if ( arg0 != null ) { arg0 = arg0 + "srini_string" + txnum + "srini_string" + arg1 + "srini_string" + arg2 ; } logMgr . add ( arg0 , arg1 , arg2 , txnum , offset ) ; }
void function ( DataFlowNode arg0 ) { dataFlow . add ( arg0 ) ; }
User function ( ) { return sUserThreadLocal . get ( ) ; }
boolean function ( String arg0 ) { return selectedRecipients . add ( arg0 ) ; }
void function ( ) { File loc0 = new File ( mTestFolder . getRoot ( ) , "srini_string" ) ; FileUtils . delete ( loc0 . getPath ( ) ) ; Assert . assertFalse ( loc0 . exists ( ) ) ; }
boolean function ( String arg0 , OperationSignature arg1 ) { return operations . containsKey ( arg1 ) ; }
boolean function ( List < UserModel > arg0 ) { return userService . updateUsers ( arg0 ) ; }
void function ( String arg0 , Throwable arg1 ) { log ( arg0 , arg1 , null ) ; }
void function ( Response arg0 ) { LOG . trace ( "srini_string" , arg0 ) ; }
void function ( int arg0 ) { curValue = arg0 ; }
String function ( ) { return m_escapedJson ; }
boolean function ( NodeTester arg0 ) { return arg0 . accept ( rootNode ) ; }
BlockStoreContext function ( InetSocketAddress arg0 ) { CachedBlockStoreContext loc0 = CACHED_CONTEXTS . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new CachedBlockStoreContext ( ) ; CACHED_CONTEXTS . put ( arg0 , loc0 ) ; } return loc0 ; }
ImageWriter function ( String arg0 ) { ImageWriter loc0 = lookupImageWriterForFormat ( arg0 ) ; if ( loc0 == null ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return loc0 ; }
String function ( String arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( arg0 ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
void function ( String arg0 , ThreadingParameters arg1 ) { this . threadingParametersMap . put ( arg0 , arg1 ) ; }
void function ( Language arg0 , CodeGenerator arg1 ) { GeneratorManager . INSTANCE . registerGenerator ( arg0 , arg1 ) ; }
void function ( String arg0 , Object arg1 ) { variables . put ( arg0 , arg1 ) ; }
long function ( ) { return index ; }
void function ( Bullet arg0 ) { for ( Bullet loc0 : bullets ) { loc0 . fire ( arg0 ) ; } }
GetOfferDetailsResponse . Return . DetailedOfferData . OfferDisplay function ( ) { return new GetOfferDetailsResponse . Return . DetailedOfferData . OfferDisplay ( ) ; }
long function ( ) { return acknowledgementInterval ; }
void function ( ) { server . closeAllConnections ( ) ; }
void function ( String arg0 , int arg1 ) { debug ( arg0 , arg1 , null ) ; }
Access function ( ) { return new Access ( ) ; }
void function ( String arg0 ) { this . failedAttributeName = arg0 ; }
List < String > function ( Context arg0 , int arg1 ) { Query loc0 = arg0 . getContentResolver ( ) . query ( "srini_string" + arg1 + "srini_string" ) ; return loc0 . getResultList ( ) ; }
void function ( ) { flush ( ) ; }
void function ( String arg0 , String arg1 ) { mActualRemoteControlClient . putString ( METADATA_KEY_ARTWORK , arg0 ) ; mActualRemoteControlClient . putString ( METADATA_KEY_ARTWORK , arg1 ) ; }
void function ( ) { drone . land ( ) ; }
Builder function ( ImmutableMap < String , String > arg0 ) { this . metadata = arg0 ; return this ; }
void function ( ) { assertEquals ( 2 , rmc . getDirectionOfVariation ( "srini_string" ) ) ; }
String function ( String arg0 , String arg1 ) { return StringEscapeUtils . escapeJavaScript ( arg0 , arg1 , policy ) ; }
String function ( ) { return wsseValueType ; }
String function ( ) { return image ; }
List < Resource > function ( ) { return resources ; }
boolean function ( String arg0 ) { return getBoolean ( arg0 , false ) ; }
ResourceTypeHandler function ( String arg0 ) { try { return valueOf ( arg0 ) ; } catch ( IllegalArgumentException loc0 ) { return null ; } }
void function ( String arg0 , String arg1 , String arg2 ) { }
long function ( ) { return getTotalElapsed ( ) / getTotal ( ) ; }
void function ( ) { setValue ( "srini_string" ) ; }
void function ( ) { assertEquals ( 0.0 , rmb . getBearing ( ) , 1.0e-6 ) ; }
Path function ( long arg0 ) { return mFileSystemMaster . getPathToRead ( arg0 ) ; }
int function ( byte [ ] arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 ^= arg0 [ loc1 ] << ( 8 * ( loc1 % 4 ) ) ; } return loc0 ; }
int function ( ) { return tag ; }
Block function ( ) { return header ; }
String function ( ) { return value ; }
Difference function ( ) { return additionDifference ; }
String function ( ) { return version ; }
void function ( int arg0 ) { vstack . push ( arg0 ) ; }
void function ( Object arg0 ) { Assert . assertTrue ( countDownLatch . await ( 1L , TimeUnit . SECONDS ) ) ; Assert . assertEquals ( arg0 , future . get ( ) ) ; }
void function ( int arg0 ) { this . gisticID = arg0 ; }
long function ( K arg0 , long arg1 ) { return getAndAdd ( arg0 , arg1 , 1 ) ; }
void function ( String [ ] arg0 ) { sshExample ( ) ; }
void function ( AbstractPlugin arg0 ) { PluginContainer loc0 = singleton . allPlugins ; if ( loc0 != null ) { loc0 . remove ( arg0 ) ; } }
List < String > function ( Context arg0 , int arg1 ) { Query loc0 = arg0 . getContentResolver ( ) . query ( "srini_string" + arg1 + "srini_string" ) ; return loc0 . getResultList ( ) ; }
void function ( ServiceID arg0 ) { this . localServiceID = arg0 ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; String loc1 = instance . getResponseStringCSV ( ) ; assertEquals ( loc0 , loc1 ) ; }
JButton function ( String arg0 , String arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 ) { return new JButton ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 , arg12 , arg13 , arg14 , arg15 ) ; }
Sha256Hash function ( ) { return dataHash ; }
void function ( byte [ ] arg0 ) { packed . write ( arg0 , 0 , arg0 . length ) ; format . packLong ( packed , 0 ) ; packed . write ( arg0 , 0 , arg0 . length ) ; }
void function ( ) { assertTrue ( hdm . isTrue ( ) ) ; }
void function ( ) { visMask . clear ( ) ; }
String function ( String arg0 ) { if ( scanner == null ) { scanner = new Scanner ( System . in ) ; } return scanner . next ( arg0 ) ; }
String [ ] function ( ) { return new String [ 0 ] ; }
void function ( ) { double loc0 = 2.0 ; double loc1 = vhw . setheading ( loc0 ) ; assertEquals ( loc0 , loc1 ) ; }
List < Constraint > function ( Variable arg0 ) { return cnet . get ( arg0 ) ; }
double function ( ) { return occupancy ; }
String function ( ) { return literalName + "srini_string" + typeName + "srini_string" ; }
void function ( Document arg0 ) { this . panel . setDocument ( arg0 ) ; render ( ) ; }
String function ( ) { return Todoparser . encode ( item . getHeadline ( ) ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Customer loc1 : customers ) { if ( loc1 != null ) { loc0 . append ( loc1 . getNumber ( ) ) ; } } return loc0 . toString ( ) ; }
double function ( ) { return min ; }
void function ( ) { System . out . println ( "srini_string" ) ; Device loc0 = null ; int loc1 = 0 ; int loc2 = dev . getDeviceBlock ( ) ; assertEquals ( loc1 , loc2 ) ; fail ( "srini_string" ) ; }
void function ( int arg0 ) { drone . setAlt ( arg0 ) ; }
void function ( ) { buffer = new byte [ INITIAL_BUFFER_CAPACITY ] ; }
byte [ ] function ( ) { return alertSigningKey ; }
String function ( Uri arg0 ) { String loc0 = arg0 . getScheme ( ) ; if ( loc0 . equals ( "srini_string" ) ) { return "srini_string" ; } else if ( loc0 . equals ( "srini_string" ) ) { return "srini_string" ; } else { return "srini_string" ; } }
void function ( OutputStream arg0 , short arg1 ) { arg0 . write ( ( byte ) ( arg1 >>> 8 ) ) ; arg0 . write ( ( byte ) arg1 ) ; }
void function ( double [ ] arg0 , double [ ] arg1 ) { arg0 [ 0 ] = arg1 [ 0 ] * arg0 [ 1 ] ; arg0 [ 1 ] = arg1 [ 1 ] * arg0 [ 2 ] ; }
boolean function ( final String arg0 , final String arg1 , final boolean arg2 , final OutputStream arg3 ) { return archive ( arg0 , arg1 , arg2 , arg3 , null ) ; }
Builder function ( final String arg0 ) { return new Builder ( arg0 ) ; }
void function ( Set < T > arg0 , T arg1 , Class < ? extends T > arg2 ) { addNodesOfType ( arg0 , arg1 , arg2 , true ) ; }
boolean function ( ) { return onTouchEvent ( ) ; }
boolean function ( ) { return false ; }
void function ( ) { xmppConnection . disconnect ( ) ; }
String function ( String arg0 , String arg1 ) { Object loc0 = mMap . get ( arg0 ) ; return loc0 != null ? loc0 . toString ( ) : arg1 ; }
void function ( byte [ ] arg0 ) { if ( decoder == null ) { return ; } decoder . decode ( arg0 ) ; }
int function ( ) { return originallyEncodedSize ; }
boolean function ( ) { return parseRetain ; }
void function ( String arg0 ) { this . runStatus = arg0 ; }
void function ( ) { drone . spin90Right ( spin90Speed ) ; }
Map < Long , Integer > function ( ) { return new HashMap < > ( ) ; }
XPathContext function ( ) { try { return ( XPathContext ) clone ( ) ; } catch ( CloneNotSupportedException loc0 ) { throw new InternalError ( loc0 ) ; } }
int function ( byte [ ] arg0 , int arg1 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = ( loc0 * BUCKET_SIZE_BYTES ) + arg0 [ loc1 ] ; } return loc0 % BUCKET_SIZE_BYTES ; }
void function ( ) { Sentence loc0 = instance . createInstance ( "srini_string" ) ; assertTrue ( loc0 . hasParser ( "srini_string" ) ) ; }
void function ( String arg0 ) { this . proxiesHeader = arg0 ; }
String function ( ) { return xpath ; }
void function ( BigDecimal arg0 ) { this . runId = arg0 ; }
boolean function ( ) { return _dot_pos >= 0 ; }
void function ( ) { CompleteFileOptions loc0 = CompleteFileOptions . defaults ( ) ; Assert . assertTrue ( loc0 . isRecursive ( ) ) ; Assert . assertTrue ( loc0 . isLeaf ( ) ) ; }
Permission function ( int arg0 ) { return ( Permission ) PERMISSIONS . get ( Integer . valueOf ( arg0 ) ) ; }
void function ( ) { cancelled = true ; }
String [ ] function ( Set arg0 ) { if ( arg0 == null ) { return null ; } return gson . toJson ( arg0 , String . class ) . split ( "srini_string" ) ; }
void function ( ) { assertTrue ( vhw . getSpeedKmh ( ) >= 0.5 ) ; }
void function ( ) { if ( ! isValid ( ) ) { throw new ProtocolException ( "srini_string" ) ; } }
boolean function ( String arg0 ) { return s1 . has ( arg0 ) || s2 . has ( arg0 ) ; }
void function ( HttpSession arg0 ) { arg0 . setAttribute ( "srini_string" , true ) ; arg0 . setAttribute ( "srini_string" , false ) ; }
FullyQualifiedClassType function ( ) { return handlerClass ; }
void function ( ) { oldRevisionGraphMap . put ( revisionInformation , revisionInformation ) ; }
int function ( ) { return _size ; }
Spring function ( ) { return mControlSpringIndex ; }
ExtensionInfo function ( ) { return extensionInfo ; }
void function ( ) { this . rmb = new RMBSentence ( "srini_string" ) ; }
void function ( List < OAuthPermission > arg0 ) { this . scopes = arg0 ; }
List < Ingredient > function ( ) { log . debug ( "srini_string" ) ; return ingredientRepository . findAll ( ) ; }
String function ( DataLine arg0 , int arg1 ) { return adjustDataLine ( arg0 , arg1 , NA_STRING ) ; }
void function ( long arg0 ) { if ( timeoutEnabled ) { timeoutTimer . cancel ( ) ; } if ( arg0 < 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } resetTimeout ( ) ; }
void function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { listFolders ( loc0 ) ; } }
void function ( ) { if ( dbuf != null ) { dbuf . close ( ) ; } if ( socket != null ) { socket . close ( ) ; } }
void function ( MediaEncoder arg0 ) { mMediaMuxer . addEncoder ( arg0 ) ; }
float function ( ) { return mFinal ; }
void function ( Map < String , String > arg0 ) { notEmpty ( arg0 , "srini_string" ) ; }
void function ( ) { when ( mockServerSession . getId ( ) ) . thenReturn ( MOCK_SESSION_ID ) ; notificationController . registerUserSession ( mockServerSession , mockServerMessage ) ; verify ( mockServerSession ) . getServerMessage ( ) ; }
void function ( int arg0 ) { if ( arg0 < 0 || arg0 > getNumSteps ( ) ) { return ; } doAction ( arg0 ) ; }
int function ( Object arg0 ) { int loc0 = 0 ; if ( arg0 instanceof Tag ) { Tag loc1 = ( Tag ) arg0 ; if ( this . key . equals ( loc1 . key ) ) { loc0 = this . value . compareTo ( loc1 . value ) ; } } return loc0 ; }
void function ( int arg0 , float arg1 ) { if ( mHasAliasesSet ) { mDefaultSpacing [ arg0 ] = arg1 ; } else { mSpacing [ arg0 ] = arg1 ; } }
List < String > function ( String arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 . addAll ( parsePackages ( arg0 ) ) ; return loc0 ; }
void function ( QName arg0 , Level arg1 ) { addAttribute ( arg0 , arg1 , false ) ; }
String function ( Message arg0 ) { for ( ContentTypeRule loc0 : rules ) { String loc1 = loc0 . determineContentType ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }
GetOfferDetailsResponse . Return . FullfillmentPartner function ( ) { return new GetOfferDetailsResponse . Return . FullfillmentPartner ( ) ; }
void function ( ItemList < T > arg0 ) { this . items = arg0 ; }
boolean function ( T arg0 ) { return mIndex . containsKey ( arg0 ) ; }
long function ( String arg0 , long arg1 ) { return - 1 ; }
void function ( ) { instance . createParser ( "srini_string" , "srini_string" ) ; }
long function ( ) { return tStop ; }
int function ( ) { return mStartCount ; }
int function ( ) { return p1 . blocksAccessed ( ) + p2 . blocksAccessed ( ) ; }
List < String > function ( String arg0 ) { if ( arg0 == null ) { return Collections . emptyList ( ) ; } List < String > loc0 = getMap ( arg0 ) . get ( SPACE_DELIMITED ) ; if ( loc0 == null ) { return Collections . emptyList ( ) ; } return loc0 ; }
void function ( ) { events . clear ( ) ; }
void function ( ) { }
void function ( int arg0 ) { this . hour = arg0 ; }
EvictionPlan function ( int arg0 ) { return new EvictionPlan ( arg0 ) ; }
long function ( ) { return issuedAt ; }
List < E > function ( ) { return new ArrayList < E > ( ) ; }
void function ( User arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
EigenDecomposition < DenseMatrix64F > function ( int arg0 , int arg1 , boolean arg2 ) { if ( arg2 ) { return new CholeskyDecomposition_D64 ( arg0 , arg1 ) ; } else { return new CholeskyDecomposition_D64 ( arg0 ) ; } }
void function ( ComparisonListener arg0 ) { matchListeners . add ( arg0 ) ; diffListeners . add ( arg0 ) ; }
int function ( ) { return mId ; }
double function ( Matrix arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . dim1 ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 . dim2 ; loc2 ++ ) { loc0 *= arg0 . get ( loc1 , loc2 ) ; } } return loc0 ; }
void function ( boolean arg0 ) { this . cacheTokens = arg0 ; }
File function ( String arg0 , String ... arg1 ) { return new File ( arg0 , Joiner . on ( "srini_string" ) . join ( arg1 ) ) ; }
ServletConfig function ( ) { return ( this . config ) ; }
Schema function ( ) { return sch ; }
void function ( ) { System . out . println ( "srini_string" ) ; Duration loc0 = new Duration ( 0 , "srini_string" ) ; instance . setDuration ( loc0 ) ; }
boolean function ( ) { if ( s == null ) { return false ; } s . next ( ) ; if ( s . isNull ( ) ) { s = ts . newScan ( joinfield , ts . getLen ( ) ) ; } beforeFirst ( ) ; return s . next ( ) ; }
double function ( long arg0 ) { ensurePositive ( arg0 ) ; double loc0 = ensureNegative ( arg0 ) ; double loc1 = 1.0 / ( double ) count ( ) ; return loc0 * loc1 * loc1 ; }
void function ( ) { assertEquals ( 6 , zda . getLocalZoneMinutes ( ) ) ; assertEquals ( 6 , zda . getLocalZoneHours ( ) ) ; assertEquals ( 6 , zda . getLocalZoneMinutes ( ) ) ; }
void function ( String arg0 ) { this . startTime = arg0 ; }
boolean function ( String arg0 ) { return info . containsKey ( arg0 ) ; }
int function ( InodeFile arg0 ) { int loc0 = 0 ; for ( InodeFile loc1 : mFiles ) { if ( loc1 . equals ( arg0 ) ) { loc0 = 1 ; } } return loc0 ; }
int function ( ) { return eig . getDimension ( ) ; }
CheckServiceAccessRequest function ( ) { return new CheckServiceAccessRequest ( ) ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
void function ( ) { }
double [ ] function ( ) { return gammasU ; }
Bounds function ( Scene arg0 , Node arg1 , Transform arg2 ) { return nodeBoundsInScene ( arg0 , arg1 , arg2 , true ) ; }
void function ( MapType arg0 ) { this . mapType = arg0 ; }
int function ( int arg0 , String arg1 ) { if ( arg0 < 0 ) { throw new IllegalArgumentException ( MessageFormat . format ( "srini_string" , arg1 , arg0 ) ) ; } return arg0 ; }
void function ( ) { new CustomAuthenticationProvider ( "srini_string" ) ; }
void function ( ) { Assert . assertNull ( tupleMock ) ; Assert . assertNull ( outputCollectorMock ) ; Assert . assertNull ( topologyContextMock ) ; }
Escaper function ( ) { return URL_FRAGMENT_ESCAPER ; }
Long function ( ) { return seqNo ; }
BufferedByteWriter function ( int arg0 ) { ensureCapacity ( 24 ) ; mWriter . put ( arg0 ) ; return this ; }
void function ( ) { try { ds . close ( ) ; } catch ( SQLException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; } }
void function ( ClassdiagramNode arg0 ) { uplinks . add ( arg0 ) ; }
void function ( ) { Assert . assertEquals ( 2 , mTestTierView . getDirViews ( ) . size ( ) ) ; }
boolean function ( Integer arg0 ) { return periodsElements [ arg0 ] != null ; }
boolean function ( ) { return sendStatus ; }
ScriptPubKey function ( PublicKey arg0 ) { return new ScriptPubKey ( arg0 , false ) ; }
void function ( Cookie ... arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( ! cookies . contains ( arg0 [ loc0 ] ) ) { cookies . add ( arg0 [ loc0 ] ) ; } } }
double function ( ) { return x ; }
String function ( List < Object > arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( Object loc1 : arg0 ) { loc0 . append ( loc1 ) ; loc0 . append ( "srini_string" ) ; } return loc0 . toString ( ) ; }
int function ( ) { return _size ; }
List < MatrixPosition > function ( ) { return positions ; }
void function ( ) { mReadResponse . release ( ) ; }
boolean function ( ) { return activated ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < N ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < N ; loc1 ++ ) { off [ loc0 ] = diag [ loc1 ] ; off [ loc1 ] = diag [ loc0 ] + 1 ; } } }
boolean function ( lalr_item arg0 ) { return _all . containsKey ( arg0 ) ; }
RemoteBlockWriter function ( Configuration arg0 ) { return new RemoteBlockWriter ( arg0 ) ; }
boolean function ( final double arg0 , final double arg1 ) { return ( Math . abs ( arg0 - arg1 ) < EPSILON ) ; }
CertificateChainInfo function ( ) { return chain ; }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof JobExitStatus ) ) { return false ; } JobExitStatus loc0 = ( JobExitStatus ) arg0 ; if ( ! this . equals ( loc0 ) ) { return false ; } return true ; }
boolean function ( byte arg0 ) { return ( arg0 == SPACE || arg0 == TAB ) ; }
EaseUI function ( ) { if ( instance == null ) { instance = new EaseUI ( ) ; } return instance ; }
void function ( ) { _serializerFactory . free ( ) ; }
Date function ( ) { return expires ; }
void function ( Message arg0 ) { Preconditions . checkArgument ( arg0 instanceof AlluxioNetworkProtocol . Protocol . RpcResponse , "srini_string" ) ; }
String function ( ) { String loc0 = settings . getString ( "srini_string" , "srini_string" ) ; String loc1 = Paths . get ( loc0 , settings . getString ( "srini_string" , "srini_string" ) ) ; return loc1 ; }
Bus function ( ) { return bus ; }
ELEvaluator function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String
Double function ( ClassMetricKey arg0 , OperationStats arg1 ) { Double loc0 = memo . get ( arg0 ) ; if ( loc0 == null ) { loc0 = arg1 . compute ( ) ; memo . put ( arg0 , loc0 ) ; } return loc0 ; }
String function ( ) { return sender ; }
void function ( final RepositoryCommit arg0 ) { if ( ! commits . contains ( arg0 ) ) { commits . add ( arg0 ) ; } }
boolean function ( Step arg0 ) { return steps . contains ( arg0 ) ; }
void function ( int arg0 ) { packed . packInt ( arg0 ) ; isRaw = false ; }
void function ( BundleContext arg0 ) { }
Long function ( byte [ ] arg0 , TFieldIdEnum arg1 , TFieldIdEnum ... arg2 ) { return ( Long ) partialDeserializeField ( TType . I32 , arg0 , arg1 , arg2 ) ; }
void function ( int arg0 ) { this . taskMode = arg0 ; }
boolean function ( ) { return ( request . getDateHeader ( "srini_string" ) != null ) ; }
void function ( Collection < String > arg0 ) { this . after = arg0 ; }
void function ( String arg0 ) { this . to = arg0 ; }
void function ( ) { destinationSet = true ; }
void function ( ) { mWriter . close ( ) ; mWriter . flush ( ) ; }
MetadataEditorCompat function ( Context arg0 , String arg1 ) { return new MetadataEditorCompat ( arg0 , arg1 ) ; }
void function ( HashMap < String , Integer > arg0 ) { for ( String loc0 : arg0 . keySet ( ) ) { updateNaiveBayes ( loc0 , arg0 . get ( loc0 ) ) ; } }
String function ( long arg0 , String arg1 ) { return arg1 + "srini_string" + ( arg0 - arg1 ) + "srini_string" ; }
void function ( HttpServletResponse arg0 , Map < String , String > arg1 ) { for ( Map . Entry < String , String > loc0 : arg1 . entrySet ( ) ) { arg0 . addHeader ( getKeyName ( loc0 . getKey ( ) ) , loc0 . getValue ( ) ) ; } }
int function ( File arg0 , boolean arg1 ) { if ( arg0 == null ) { arg0 = new File ( "srini_string" ) ; } mReader = new JournalReader ( mMaster , arg0 , arg1 ) ; mLatestSequenceNumber = mReader . getLatestSequenceNumber ( ) ; return mLatestSequenceNumber ; }
long function ( ) { return mTimeDelta ; }
void function ( byte [ ] arg0 ) { send ( arg0 , 0 , arg0 . length ) ; }
void function ( ) { GSASentence loc0 = instance ; loc0 . setSatelliteIds ( EXAMPLE ) ; assertEquals ( "srini_string" , loc0 . getSatelliteIds ( ) ) ; }
void function ( String arg0 ) { clientSession = new ClientSession ( arg0 , clientEndpoint ) ; clientSession . start ( ) ; }
long function ( ) { return index ; }
Constant function ( ) { return dataval ; }
void function ( String arg0 ) { this . wsseValueType = arg0 ; }
Map < String , String > function ( Parcel arg0 , Class < ? > arg1 ) { final Map < String , String > loc0 = new HashMap < String , String > ( ) ; for ( Map . Entry < String , String > loc1 : arg0 . entries ( ) ) { loc0 . put ( loc1 . getKey ( ) , loc1 . getValue ( ) ) ; } return loc0 ; }
DenseMatrix64F function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( H . numRows ( ) , H . numCols ( ) ) ; for ( int loc1 = 0 ; loc1 < H . numCols ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < H . numCols ( ) ; loc2 ++ ) { loc0 . set ( loc1 , loc2 , H . get ( loc1 , loc2 ) ) ; } return loc0 ; }
void function ( ComplexNode arg0 ) { this . singleNestedComplexNode = arg0 ; }
BoxFolder function ( String arg0 ) { return rootFolder . getFolder ( arg0 ) ; }
void function ( String arg0 ) { this . units = arg0 ; }
long function ( ) { long loc0 = i ; for ( int loc1 = 0 ; loc1 < i ; loc1 ++ ) { loc0 <<= 8 ; loc0 |= ( ( 1L << loc1 ) & HARDENED_BIT ) ; } return loc0 ; }
void function ( String arg0 ) { webEngine . goToUrl ( arg0 ) ; }
void function ( PropertyChangeListener arg0 ) { propertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }
String function ( ) { return xmiId ; }
void function ( final ActivityRequest arg0 ) { Assert . notNull ( arg0 , "srini_string" ) ; }
boolean function ( ) { if ( mCheckpointRead ) { return ! mUfs . exists ( mCheckpointPath ) ; } else { return mCheckpointLastModifiedTime == - 1 ; } }
void function ( ) { rmc . time ( ) ; }
void function ( ) { loadState ( ) ; }
void function ( ) { listener . groupEnd ( buffer , groupDepth ) ; }
void function ( ) { for ( BookPreview loc0 : data ) { loc0 . backup ( ) ; } }
void function ( Record arg0 ) { if ( leaf != null ) { leaf . insert ( arg0 ) ; } else { insert ( arg0 ) ; } }
Map < Class < ? > , String > function ( ) { return TYPES_BY_NAME ; }
void function ( boolean arg0 ) { this . returnEntropy = arg0 ; }
String function ( ) { return request . getRequestURL ( ) . getPath ( ) ; }
int function ( ) { return generatedClassSerial ; }
int function ( ) { return _index ; }
void function ( IFolderChooser arg0 , String arg1 ) { IFolder [ ] loc0 = arg0 . getSelectedFiles ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { if ( loc0 [ loc1 ] . equals ( arg1 ) ) { arg0 . open ( loc0 [ loc1 ] ) ; break ; } } }
String function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . getParameter ( CoreProtocolPNames . HTTP_CONTENT_CHARSET , null ) ; }
void function ( String arg0 ) { switch ( arg0 ) { case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" : case "srini_string" :
void function ( ) { acitivityController . registerUserSession ( mockServerSession , mockServerMessage ) ; assertNotNull ( mockServerSession ) ; }
void function ( String arg0 , String arg1 ) { writeAttribute ( SOAP_ENCODING_REF_1_1 , arg0 , arg1 ) ; }
String function ( ) { return content ; }
void function ( Config arg0 ) { this . config = arg0 ; }
Integer function ( ) { return _id ; }
BrowseOffersResponse . Return function ( ) { return new BrowseOffersResponse . Return ( ) ; }
Builder function ( String arg0 ) { this . objectType = arg0 ; return this ; }
Script pubkey ( Sha256Hash arg0 ) { return new ScriptPubKey ( createMultiSigInputScript ( arg0 ) , createMultiSigOutputScript ( arg0 ) ) ; }
String function ( ) { return getOAuthServerConfiguration ( ) . getOpenIDConnectUserInfoEndpointTokenValidator ( ) ; }
ResourceTypeHandler function ( String arg0 ) { if ( ! isValid ( arg0 ) ) { return FILE ; } return TYPES . get ( arg0 ) ; }
void function ( double arg0 ) { mPendingQueue . add ( arg0 ) ; runIfIdle ( ) ; }
JPanel function ( ) { return uiStack . getCurrentPanel ( ) ; }
LinearSolver < DenseMatrix64F > function ( ) { return new GenericLinearSolver < DenseMatrix64F > ( ) ; }
List < String > function ( ) { return acceptedC14nAlgorithms ; }
BigDecimal function ( ) { return successorId ; }
String function ( ) { return feedId ; }
Iterator < NotationName > function ( ) { return notations . iterator ( ) ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { getByteArrayInternal ( arg0 , arg1 , arg2 , false ) ; }
boolean function ( Card arg0 ) { return enemyHandCards . contains ( arg0 ) ; }
String function ( ) { return receiptDateType ; }
void function ( int arg0 ) { wait ( arg0 , SEMAPHORE_SLEEP_IN_MILLIS ) ; }
long function ( ) { return lifetime ; }
boolean function ( String arg0 ) { return json . has ( arg0 ) ; }
void function ( Canvas arg0 ) { arg0 . drawCircle ( xPosition , yPosition , diameter , color ) ; }
void function ( final ModelImplementation arg0 ) { initializeDefault ( arg0 ) ; }
int function ( int arg0 ) { return ( arg0 & 0x7FFFFFFF ) % gen . get ( ) ; }
Object function ( String arg0 ) { return parameters . get ( arg0 ) ; }
String function ( ) { return createdBy ; }
boolean function ( ) { return mob . isBuilding ( ) ; }
int function ( ) { return opcode ; }
Book function ( @ RequestBody Book arg0 ) { log . debug ( "srini_string" , arg0 ) ; bookRepository . save ( arg0 ) ; return arg0 ; }
void function ( ) { this . url = new URL ( "srini_string" , "srini_string" ) ; }
void function ( TreeModel arg0 ) { rules . add ( arg0 ) ; }
void function ( String arg0 ) { this . resultMessage = arg0 ; }
long function ( ) { checkReady ( ) ; return mSessionId ; }
void function ( ) { Mode loc0 = new Mode ( 0777 ) ; Assert . assertTrue ( loc0 . toString ( ) . equals ( "srini_string" ) ) ; }
void function ( double [ ] arg0 , double [ ] arg1 ) { householder ( arg0 , arg1 , 0 ) ; }
void function ( ) { instance . setHeadingEvent ( event ) ; instance . sentenceRead ( ) ; }
void function ( String arg0 ) { this . c14nAlgorithm = arg0 ; }
Response function ( String arg0 ) { return createErrorResponse ( arg0 , null ) ; }
Iterable < E > function ( Iterable < ? extends E > arg0 ) { if ( arg0 instanceof Collection < ? extends E > ) { return ( ( Collection < ? extends E > ) arg0 ) . iterator ( ) ; } return Collections . singletonList ( arg0 ) ; }
Map < String , Object > function ( ) { return responseContext ; }
Sha256Hash function ( String arg0 ) { return new Sha256Hash ( arg0 . getBytes ( ) ) ; }
T function ( Class < T > arg0 ) { return SERVICES . getService ( arg0 ) ; }
int function ( ) { return row ; }
String function ( ) { return address . getPostalCode ( ) ; }
void function ( String arg0 ) { popupError ( arg0 , "srini_string" ) ; }
void function ( String arg0 ) { _specificityC ++ ; _specificityC += 1 ; _pe = arg0 ; }
Long function ( JSONObject arg0 , String arg1 ) { return arg0 . getLong ( arg1 ) ; }
void function ( String arg0 ) { this . experimentTypes = arg0 ; }
PasswordCredentials function ( ) { return passwordCredentials ; }
String function ( ) { return reason ; }
void function ( final Matrix arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . getRows ( ) ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < arg0 . getCols ( ) ; loc1 ++ ) { checkInputInstance ( arg0 . getElement ( loc0 , loc1 ) , arg0 . getElement ( loc0 , loc1 ) ) ; } }
void function ( ) { PROPS . clear ( ) ; }
void function ( ) { }
boolean function ( int arg0 ) { for ( int loc0 = 0 ; loc0 < N ; loc0 ++ ) { if ( diag [ arg0 + loc0 ] == 0 ) return false ; } return true ; }
void function ( InputStream arg0 ) { try { display ( arg0 ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; } }
boolean function ( Message arg0 ) { return arg0 instanceof PartialMessage ; }
void function ( String [ ] arg0 ) { this . outputFields = arg0 ; }
void function ( ) { Assert . assertEquals ( StorageTierView . DIR_VIEW_UNKNOWN , mTestTierView . getDirView ( ) ) ; }
Document function ( ) { try { return factory . newDocument ( ) ; } catch ( TransformerConfigurationException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
URI function ( ) { return uri ; }
ResourceInternal < T > function ( T arg0 ) { ResourceInternal < T > loc0 = mResources . get ( arg0 ) ; if ( loc0 == null ) { loc0 = createNewResource ( arg0 ) ; mResources . put ( arg0 , loc0 ) ; } return loc0 ; }
void function ( ) { mIn . close ( ) ; mOut . close ( ) ; }
int function ( ) { return column ; }
void function ( byte [ ] arg0 , int arg1 ) { sr . nextBytes ( arg0 , arg1 ) ; int loc0 = sr . nextInt ( arg0 . length - arg1 - 1 ) ; verify ( arg0 , arg1 , loc0 ) ; }
double function ( String arg0 , String arg1 ) { ClassStats loc0 = classes . get ( arg0 ) ; if ( loc0 == null ) { return 0.0 ; } return loc0 . compute ( arg1 ) ; }
void function ( ) { String loc0 = "srini_string" ; InputStream loc1 = new ByteArrayInputStream ( loc0 . getBytes ( "srini_string" ) ) ; verifyResults ( loc1 , "srini_string" ) ; }
boolean function ( String arg0 ) { return aliases . remove ( arg0 ) ; }
boolean function ( ) { return ( AuthType . SIMPLE == arg0 ) || ( AuthType . KERBEROS == arg0 ) || ( AuthType . CUSTOM == arg0 ) ; }
void function ( RemoteControlClient arg0 ) { mActualRemoteControlClient = arg0 ; }
void function ( final ModelImplementation arg0 ) { initializeDefault ( arg0 ) ; }
boolean function ( int arg0 ) { return buildingSpot . get ( arg0 ) != null ; }
long function ( ) { return k ; }
int function ( ) { return _size ; }
List < Abis > function ( ) { List < Abis > loc0 = new ArrayList < Abis > ( ) ; loc0 . addAll ( getLibsDirectory ( ) . listContents ( ) ) ; return loc0 ; }
void function ( Server arg0 ) { this . server = arg0 ; }
Map < String , String > function ( ) { return headers ; }
void function ( String arg0 ) { resourceExtensions . remove ( arg0 ) ; }
SearchFactory function ( ) { if ( instance == null ) { instance = new SearchFactory ( ) ; } return instance ; }
void function ( ) { }
void function ( ) { new CustomAuthenticationProvider ( "srini_string" ) ; }
void function ( String arg0 ) { this . errorDescription = arg0 ; }
boolean function ( String arg0 ) { return prodscan . hasField ( arg0 ) ; }
boolean function ( String arg0 ) { for ( SinkInfo loc0 : findSinkByMethodSignature ( arg0 ) ) { if ( loc0 != null ) { return true ; } } return false ; }
void function ( ) { boolean loc0 = false ; try { System . setProperty ( "srini_string" , "srini_string" ) ; } catch ( SecurityException loc1 ) { loc0 = true ; } }
void function ( String arg0 , Point2D arg1 , double arg2 ) { locationPositions . put ( arg0 , arg1 , arg2 ) ; }
List < String > function ( ) { return this . mnemonicCode ; }
Integer function ( String arg0 ) { return offsets . get ( arg0 ) ; }
void function ( BundleContext arg0 ) { }
boolean function ( long arg0 ) { return mOutputFileIndex . containsKey ( arg0 ) ; }
boolean function ( String arg0 ) { return true ; }
int function ( ) { return recyclerView . getLastVisiblePosition ( ) ; }
String function ( String arg0 ) { return config . getString ( makeKey ( arg0 ) ) ; }
int function ( String arg0 ) { return setString ( arg0 , "srini_string" ) ; }
String function ( ) { return image ; }
DiffBuilder function ( ) { ignoreComments = true ; return this ; }
ResponseEntity < Void > function ( @ PathVariable Long arg0 ) { log . debug ( "srini_string" , arg0 ) ; dishCollectionService . delete ( arg0 ) ; return ResponseEntity . ok ( ) . build ( ) ; }
Pair < Map < RandomVariable , Object > , Double > function ( Randomizer arg0 , Network arg1 , double arg2 , double arg3 ) { return ask ( arg0 , arg1 , arg2 , arg3 , 1.0 ) ; }
void function ( int arg0 , int arg1 ) { int loc0 = PRIMES [ arg1 ] ; int [ ] loc1 = _values [ loc0 ] ; _values [ loc0 ] = arg0 ; _prime = loc1 [ loc0 ] ; _size ++ ; _values [ loc0 ] = arg0 ; _values [ loc0 + 1 ] = arg1 ; }
byte [ ] function ( ) { format . checkType ( 'b' , false ) ; byte [ ] loc0 = new byte [ valueLen ] ; format . consume ( ) ; System . arraycopy ( value , valueOff , loc0 , 0 , valueLen ) ; return loc0 ; }
SAMLSSORespDTO function ( @ PathVariable String arg0 ) { throw new SAMLSSOException ( "srini_string" ) ; }
void function ( ModelElement arg0 , ChangeListener arg1 ) { }
long function ( ) { return tStart ; }
RegistrationRequest function ( ) { return new RegistrationRequest ( ) ; }
boolean function ( String arg0 , String ... arg1 ) { for ( String loc0 : arg1 ) { if ( arg0 . endsWith ( loc0 ) ) { return true ; } } return false ; }
Crypto function ( ) { return signatureCrypto ; }
void function ( ) { maxMemory = 0 ; }
void function ( File arg0 ) { this . sourceCodeFile = arg0 ; }
void function ( Node arg0 ) { closed . remove ( arg0 ) ; }
String function ( ) { return _messageBody ; }
void function ( Path arg0 ) { model . move ( arg0 ) ; triggerEvent ( ) ; }
boolean function ( ) { return ignoreExceptions ; }
int function ( int arg0 , char arg1 ) { if ( arg0 == 0 ) { return 0 ; } int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { if ( components [ loc1 ] . length ( ) == 0 ) { loc0 ++ ; } } return loc0 ; }
SortedSet < String > function ( Map < String , SortedSet < String >> arg0 ) { SortedSet < String > loc0 = new TreeSet < String > ( ) ; for ( Map . Entry < String , SortedSet < String >> loc1 : arg0 . entrySet ( ) ) { loc0 . add ( loc1 . getKey ( ) ) ; } return loc0 ; }
int function ( ) { return vals . hashCode ( ) ; }
int function ( int arg0 ) { return tiles . get ( arg0 ) [ 0 ] ; }
String function ( ) { return transformedTokenIdentifier ; }
void function ( String arg0 ) { this . loadedInCats = arg0 ; }
int function ( ) { return decisions ; }
String function ( long arg0 ) { SimpleDateFormat loc0 = new SimpleDateFormat ( pattern ) ; return loc0 . format ( new Date ( arg0 ) ) ; }
int function ( ) { return mSize ; }
void function ( double arg0 ) { double loc0 = System . currentTimeMillis ( ) ; if ( s_newVersionSet ) { Log . v ( "srini_string" , "srini_string" + loc0 + "srini_string" + arg0 ) ; } s_installed = true ; s_newVersion = arg0 > 0.0 ; }
String function ( ) { return host ; }
void function ( RepositoryCommit arg0 ) { if ( ! commits . contains ( arg0 ) ) { commits . add ( arg0 ) ; } }
void function ( ) { String loc0 = instance . getMonth ( ) ; assertEquals ( "srini_string" , loc0 ) ; }
int function ( String arg0 , boolean arg1 , boolean arg2 ) { return 1 + ( arg1 ? 1 : 0 ) + ( arg2 ? 1 : 0 ) ; }
void function ( RuleContext arg0 , List < Node > arg1 , Language arg2 ) { for ( RuleChainVisitor loc0 : languageToRuleChainVisitor . values ( ) ) { loc0 . visit ( arg0 , arg1 , arg2 ) ; } }
Builder function ( ) { return new Builder ( this ) ; }
void function ( int arg0 , String arg1 ) { errorElement . setAttributeNS ( null , EN_ERROR , arg0 ) ; errorElement . setAttributeNS ( null , EN_SECURITY_ERROR , arg1 ) ; }
void function ( String arg0 ) { instanceName = arg0 ; }
boolean function ( ) { return rebuildDownstream ; }
void function ( boolean arg0 ) { this . consoleMode = arg0 ; }
void function ( StringBuilder arg0 , String arg1 ) { arg0 . append ( arg1 ) ; }
Object function ( String arg0 ) { return undef ( arg0 ) ; }
List function ( ) { return newFeatures ; }
ClassStats function ( Class arg0 ) { for ( ClassStats loc0 : nestedClasses . values ( ) ) { if ( loc0 . getClass ( ) . getName ( ) . equals ( arg0 . getName ( ) ) ) { return loc0 ; } } return null ; }
void function ( String arg0 ) { this . gene = arg0 ; }
void function ( String arg0 ) { if ( isInCache ( arg0 ) ) { resourceLocations . add ( arg0 ) ; } }
void function ( Entry arg0 ) { mNextEntrySequenceNumber ++ ; mEntryOutputStream . writeEntry ( arg0 ) ; mNextEntrySequenceNumber ++ ; }
boolean function ( int arg0 ) { return HTTP_CONTROLS [ arg0 ] ; }
void function ( final String arg0 , final CookieSpecFactory arg1 ) { Args . notNull ( arg0 , "srini_string" ) ; Args . notNull ( arg1 , "srini_string" ) ; registeredSpecs . put ( arg0 , arg1 ) ; }
BoundingBox function ( BoundingBox arg0 , BoundingBox arg1 ) { BoundingBox loc0 = unifyWith ( arg0 ) ; BoundingBox loc1 = unifyWith ( arg1 ) ; return new BoundingBox ( loc0 . getLatMin ( ) , loc0 . getLonMax ( ) , loc1 . getLatMin ( ) , loc1 . getLonMax ( ) ) ; }
java . awt . Component function ( ) { return impl . getCurrentComponent ( ) ; }
GeneralRange < T > function ( Comparator < ? super T > arg0 , @ Nullable T arg1 , BoundType arg2 ) { return new GeneralRange < T > ( arg0 , true , arg1 , arg2 , null , OPEN ) ; }
void function ( String arg0 , InputStream arg1 , String arg2 ) { new PMDCompiler ( configuration ) . process ( arg0 , arg1 , arg2 ) ; }
void function ( ) { for ( ApprovedSite loc0 : repository . getAllApprovedSites ( ) ) { if ( loc0 . getClientIdentifier ( ) . equalsIgnoreCase ( clientId ) ) { repository . remove ( loc0 ) ; } } }
void function ( String arg0 , String arg1 ) { this . mapping . put ( arg0 , arg1 ) ; }
ClassLoader function ( ClassLoader arg0 , String ... arg1 ) { Validate . notNull ( arg0 , "srini_string" ) ; Validate . notNull ( arg1 , "srini_string" ) ; ClassLoader loc0 = null ; for ( String loc1 : arg1 ) { try { loc0 = arg0 . getClassLoader ( loc1 ) ; } catch ( SecurityException loc1 ) { } if ( loc0 == null ) { loc0 = arg0 . getParent ( ) ; } if ( loc0 != null ) { return loc0 ; } } return null ; }
void function ( ) { mTestStream = new TestBufferedBlockOutStream ( ) ; }
Constant function ( String arg0 ) { if ( sch . isInteger ( arg0 ) ) return rf . getVal ( arg0 ) ; else return rf . getString ( arg0 ) ; }
N function ( Node arg0 ) { return enter ( arg0 , null ) ; }
ThreadFactoryBuilder function ( ThreadFactory arg0 ) { this . backingThreadFactory = checkNotNull ( arg0 , "srini_string" ) ; return this ; }
List < ClassdiagramNode > function ( ) { return downlinks ; }
Long function ( ) { return testId ; }
String function ( ) { return "srini_string" ; }
long function ( String arg0 ) { return getLong ( arg0 , - 1 ) ; }
String function ( String arg0 ) { return encode ( arg0 , "srini_string" ) ; }
Timestamp function ( ) { return createdDate ; }
ELEvaluator function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String
QName function ( ) { return qname ; }
void function ( TransformerFactory arg0 ) { factory = arg0 ; }
int function ( ) { return gen . getAndIncrement ( ) ; }
void function ( ) { }
Executor function ( ) { return new Executor ( ) { @ Override public void execute ( Runnable arg0 ) { new Thread ( arg0 , serviceName ( ) ) . start ( ) ; } } ; }
void function ( ) { assertEquals ( 4 , rmb . getOriginId ( ) ) ; }
Object function ( String arg0 ) { if ( arg0 == null ) { arg0 = anonymousClassCounter ++ ; } return feature ( arg0 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; TestDosAttack loc0 = new TestDosAttack ( ) ; String loc1 = "srini_string" ; String loc2 = loc0 . getVersion ( ) ; assertEquals ( loc1 , loc2 ) ; }
Object function ( String arg0 ) { return getFeature ( arg0 , true ) ; }
Timestamp function ( ) { return endDate ; }
String function ( ) { String loc0 = ep . createQuery ( "srini_string" + user + "srini_string" + graphName + "srini_string" + user + "srini_string" + user + "srini_string" + graphName + "srini_string" ) ; return loc0 ; }
String function ( ) { return applicationDescription ; }
void function ( ) { GSASentence loc0 = new GSASentence ( EXAMPLE ) ; GSAOperator loc1 = new GSAOperator ( loc0 ) ; loc1 . setVerticalDOP ( 2 ) ; assertEquals ( 2 , loc1 . getVerticalDOP ( ) ) ; }
String function ( ) { return code ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . setMinutes ( 0 ) ; Time loc1 = new Time ( ) ; loc1 . setMinutes ( 0 ) ; assertEquals ( loc0 , loc1 ) ; }
SignatureProperties function ( ) { return signatureProperties ; }
long function ( K arg0 , @ Nullable LongSupplier arg1 ) { return getAndAdd ( arg0 , arg1 , 0L ) ; }
void function ( ) { }
Method function ( MethodDeclaration arg0 ) { return ( Method ) Proxy . newProxyInstance ( getClass ( ) . getClassLoader ( ) , new Class < ? > [ ] { String . class } , new Method [ ] { arg0 } ) ; }
void function ( String arg0 , String arg1 ) { if ( sIsLogEnabled ) { Log . e ( arg0 , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg1 ) ; } }
void function ( ) { tagList . openElements ( "srini_string" ) ; }
void function ( String arg0 ) { this . srcFileName = arg0 ; }
IConfigurationFactory function ( ) { return SINGLETON ; }
boolean function ( ) { if ( s1 . hasNext ( ) ) { s1 . next ( ) ; return true ; } else if ( s2 . hasNext ( ) ) { s2 . next ( ) ; return true ; } else { return false ; } }
V function ( ) { return value ; }
int function ( ) { return xPosition ; }
long function ( ) { long loc0 = 0 ; try { loc0 = Long . parseLong ( header . getChecksum ( ) ) ; } catch ( NumberFormatException loc1 ) { } return loc0 ; }
void function ( ) { if ( m_buffers == null ) { throw new NullPointerException ( "srini_string" ) ; } }
void function ( ) { RpcFileReadRequest loc0 = new RpcFileReadRequest ( OFFSET , LENGTH , TEMP_UFS_FILE_ID ) ; Assert . assertEquals ( OFFSET , 0 , loc0 . getOffset ( ) ) ; Assert . assertEquals ( LENGTH , 0 , loc0 . getLength ( ) ) ; }
boolean function ( char arg0 ) { return tok . delim == arg0 ; }
void function ( boolean arg0 , String arg1 ) { if ( ! arg0 ) { throw new IllegalArgumentException ( arg1 ) ; } }
void function ( ) { LoginUser . reset ( ) ; }
List < T > function ( List < T > arg0 ) { return ( arg0 == null ) ? ImmutableList . of ( ) : arg0 ; }
URI function ( URI arg0 , HttpHost arg1 , boolean arg2 ) { return rewriteURI ( arg0 , arg1 , arg2 , true ) ; }
void function ( ) { mListeners . clear ( ) ; }
IJavaScriptRuntime function ( ) { return runtime ; }
Date function ( ) { return serverStatus . getBootDate ( ) ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( ) { HdgParserVariation loc0 = new HdgParserVariation ( ) ; assertEquals ( "srini_string" , loc0 . getVariation ( ) . toString ( ) ) ; }
WalletExtension function ( Wallet arg0 , Sha256Hash arg1 ) { return arg0 . getExtensions ( ) . get ( arg1 ) ; }
void function ( ) { Cache < K , V > loc0 = getOpenIDCache ( ) ; loc0 . clear ( ) ; }
void function ( String arg0 ) { this . loginName = arg0 ; }
void function ( ) { System . out . println ( "srini_string" ) ; Position loc0 = new Position ( ) ; loc0 . setDatum ( 1.0 ) ; loc0 . setDatum ( 2.0 ) ; loc0 . setDatum ( 3.0 ) ; loc0 . setDatum ( 4.0 ) ; }
void function ( String arg0 ) { if ( StringUtils . isBlank ( arg0 ) ) { throw new TransformerException ( "srini_string" ) ; } }
Vector function ( ) { Vector loc0 = new Vector ( ) ; Vector loc1 = getNewFeatures ( ) ; loc0 . removeAll ( loc1 ) ; return loc0 ; }
OpenIDTokenResponse function ( String arg0 , String arg1 ) { return dao . updateToken ( arg0 , arg1 ) ; }
void function ( ) { serverSocket . close ( ) ; }
void function ( int arg0 ) { this . lane_id = arg0 ; }
void function ( MapNode arg0 ) { nodes . put ( arg0 . getId ( ) , arg0 ) ; }
void function ( ) { createCommitModel ( ) ; createPatchGroupOfBranch ( ) ; createDifferenceModel ( ) ; }
void function ( ) { fail ( "srini_string" ) ; }
void function ( String arg0 ) { try { load ( new FileInputStream ( arg0 ) ) ; } catch ( IOException loc0 ) { } }
void function ( List < Interceptor < ? extends Message >> arg0 ) { this . inInterceptors = arg0 ; }
void function ( String arg0 , boolean arg1 ) { config . setBoolean ( arg0 , arg1 ) ; }
String function ( ) { return mSubjectSecondary ; }
Object function ( ) { return source ; }
void function ( Delete arg0 ) { }
void function ( String arg0 ) { this . tenantDomain = arg0 ; }
void function ( ) { Assert . assertEquals ( mTestDirView . getCapacityBytes ( ) , mTestTierView . getCapacityBytes ( ) ) ; }
String function ( ) { return uniqueName ; }
void function ( int arg0 ) { this . peakStart = arg0 ; }
void function ( ) { mLockManager . lockBlock ( TEST_BLOCK_ID , TEST_SESSION_ID , BlockLockType . BLOCK ) ; verify ( mLockManager ) . lockBlock ( TEST_BLOCK_ID , TEST_SESSION_ID , TEST_BLOCK_ID , BlockLockType . BLOCK ) ; }
String function ( char [ ] arg0 ) { return encode ( arg0 , 0 , arg0 . length ) ; }
void function ( ) { assertTrue ( mwv . getTrue ( ) ) ; }
int function ( ) { return maxUpdateRetries ; }
void function ( int arg0 ) { if ( playerList . containsKey ( arg0 ) ) { playerList . get ( arg0 ) [ 1 ] ++ ; } else { playerList . put ( arg0 , 1 ) ; } }
void function ( long arg0 ) { this . deliveryTag = arg0 ; }
StoredClientChannel function ( Sha256Hash arg0 , Sha256Hash arg1 ) { return getUsableChannelForServerID ( arg0 , arg1 ) ; }
void function ( View arg0 , int arg1 ) { arg0 . removePage ( arg1 ) ; }
void function ( ExceptionListener arg0 ) { this . exceptionListener = arg0 ; }
void function ( RpgCommand arg0 ) { model . sendCommand ( arg0 ) ; }
String function ( ) { return caseId ; }
int function ( String arg0 ) { if ( isWindows ( ) ) { throw new UnsupportedOperationException ( "srini_string" ) ; } return stat ( arg0 ) . st_mode ; }
String function ( ) { return emojiText ; }
int function ( ) { return dimension ; }
void function ( String arg0 ) { this . checksumType = arg0 ; }
Set < T > function ( Set < T > arg0 , Class < T > arg1 ) { Set < T > loc0 = new HashSet < T > ( ) ; for ( T loc1 : arg0 ) { if ( arg1 . isInstance ( loc1 ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { rte . setSentenceCount ( 0 ) ; assertFalse ( rte . getSentenceCount ( ) == 0 ) ; }
void function ( Crypto arg0 ) { this . encryptionCrypto = arg0 ; }
int function ( int arg0 , int arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < positions . size ( ) ; loc0 ++ ) { MatrixPosition loc1 = positions . get ( loc0 ) ; if ( loc1 . arg0 == arg0 && loc1 . arg1 == arg1 ) { return loc1 . utility ; } } return 0 ; }
void function ( String arg0 , IndividualStructure arg1 ) { this . addIndividualStructure ( arg0 , arg1 , false ) ; }
Context function ( ) { return context ; }
SDDTripleStateEnum function ( ) { return tripleStateA ; }
void function ( String arg0 , String arg1 ) { Map < String , String > loc0 = userStoreManagers . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new HashMap < String , String > ( ) ; userStoreManagers . put ( arg0 , loc0 ) ; } loc0 . put ( arg1 , arg1 ) ; }
void function ( final JavaMailSender arg0 ) { this . mailSender = arg0 ; }
void function ( Class < ? > arg0 , Class < ? > arg1 ) { classTable . put ( arg0 , arg1 ) ; }
void function ( Bus arg0 ) { this . bus = arg0 ; }
void function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( numcols , numrows ) ; assertEquals ( numcols , loc0 . numCols ) ; assertEquals ( numrows , loc0 . numRows ) ; }
void function ( ) { Year loc0 = rmc . getYear ( 0 ) ; assertEquals ( loc0 , 1990 ) ; }
void function ( String arg0 ) { this . geneList = arg0 ; }
List < Role > function ( ) { if ( roles == null ) { roles = new ArrayList < Role > ( ) ; } return this . roles ; }
void function ( String arg0 ) { this . referencedRevisionA = arg0 ; }
void function ( String arg0 ) { parser ( arg0 , true ) ; }
BigDecimal function ( ) { return downloadSize ; }
void function ( int arg0 , int arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < arg2 ; loc1 ++ ) { extractor . extract ( rand , arg0 , loc0 , arg2 ) ; } } }
void function ( Class < ? > arg0 ) { PROPS . add ( arg0 ) ; }
void function ( String arg0 ) { events . addLast ( new IParserEvent ( arg0 , null ) ) ; }
boolean function ( ) { return timeoutDate != null ; }
NameValuePair function ( final String arg0 , final String arg1 ) { return new BasicNameValuePair ( arg0 , arg1 ) ; }
byte [ ] function ( String arg0 ) { return arg0 . getBytes ( UTF8_CHARSET ) ; }
void function ( short arg0 ) { packed . putShort ( ( short ) arg0 ) ; isRaw = false ; }
String function ( int arg0 ) { return templates [ arg0 ] . getTemplateName ( ) ; }
JSONArray function ( NodeList arg0 ) { JSONArray loc0 = new JSONArray ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . getLength ( ) ; loc1 ++ ) { Node loc2 = arg0 . item ( loc1 ) ; if ( loc2 instanceof Node ) { loc0 . put ( loc2 . getNodeName ( ) ) ; } } return loc0 ; }
Class < ? > function ( String arg0 ) { Class < ? > loc0 = COLLECTION_CLASSES_BY_NAMES . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } return null ; }
EndpointReferenceType function ( String arg0 ) { for ( EndpointResolver loc0 : resolvers ) { EndpointReferenceType loc1 = loc0 . resolve ( arg0 ) ; if ( loc1 != null ) { return loc1 ; } } return null ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { arg0 [ arg1 ] = ( byte ) ( arg2 >>> 24 ) ; arg0 [ arg1 + 1 ] = ( byte ) ( arg2 >>> 16 ) ; arg0 [ arg1 + 2 ] = ( byte ) ( arg2 >>> 8 ) ; arg0 [ arg1 + 3 ] = ( byte ) arg2 ; }
void function ( ) { drone . spin90 ( ) ; }
Measurements function ( ) { if ( singleton == null ) { singleton = new Measurements ( ) ; } return ( singleton ) ; }
JAXBBuilder function ( Marshaller arg0 ) { this . marshaller = arg0 ; return this ; }
void function ( List < String > arg0 ) { this . acceptedKeyWrapAlgorithms = arg0 ; }
void function ( String arg0 , String arg1 , String arg2 ) { if ( ! getOpenID ( arg0 , arg1 , arg2 ) ) { log . error ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" + arg2 ) ; throw new IOException ( "srini_string" ) ; } }
boolean function ( long arg0 ) { return mPersistedFiles . contains ( arg0 ) ; }
LinearSolver < DenseMatrix64F > function ( ) { return new LinearSolver < DenseMatrix64F > ( ) ; }
EndpointImplFactory function ( ) { return singleton ; }
void function ( ) { when ( mTestTier . getStorageTierViewOrdinal ( ) ) . thenReturn ( TEST_TIER_LEVEL ) ; when ( mTestTier . getStorageDirViewAlias ( ) ) . thenReturn ( "srini_string" ) ; mThrown . expect ( IllegalArgumentException . class ) ; mThrown . expectMessage ( "srini_string" ) ; mTestTier . getStorageDirView ( "srini_string" ) ; }
boolean function ( List < String > arg0 ) { return ( arg0 == null || arg0 . size ( ) == 0 ) ; }
List < T > function ( ) { List < T > loc0 = new ArrayList < T > ( ) ; for ( Node loc1 = this ; loc1 != null ; loc1 = loc1 . parent ) { loc0 . add ( loc1 . parent ) ; } return loc0 ; }
int function ( int arg0 ) { return ( arg0 & INT_MASK ) != 0 ? flip ( arg0 ) : arg0 ; }
void function ( Matrix arg0 ) { solveTranL ( arg0 , arg0 ) ; }
boolean function ( String arg0 ) { return ( arg0 != null ) && ( arg0 . trim ( ) . length ( ) > 0 ) ; }
DeterministicKey function ( ) { return keys . get ( rootPath ) ; }
Consumer < T > function ( BinaryOperator < T > arg0 ) { return ( t ) -> arg0 . apply ( t ) ; }
Function < K , V > function ( ) { return identity ; }
void function ( byte [ ] arg0 ) { this . challenge = ( ( byte [ ] ) arg0 ) ; }
void function ( Named arg0 ) { table . put ( arg0 . getName ( ) , arg0 ) ; TOPICS . add ( "srini_string" + arg0 . getName ( ) + "srini_string" ) ; }
void function ( String arg0 ) { synchronized ( sTimers ) { ScheduledTimer loc0 = sTimers . get ( arg0 ) ; if ( loc0 != null ) { loc0 . schedule ( ) ; } } }
Matcher < T > function ( T arg0 ) { return new ComparableWithComparator < T > ( arg0 ) ; }
void function ( XCommand < ? > arg0 ) { List < XCommand < ? >> loc0 = commandQueue . get ( arg0 . getId ( ) ) ; if ( loc0 == null ) { loc0 = new ArrayList < XCommand < ? >> ( ) ; commandQueue . put ( arg0 . getId ( ) , loc0 ) ; } loc0 . add ( arg0 ) ; }
void function ( String arg0 ) { sLock . lock ( ) ; try { sTimers . get ( arg0 ) . waitFor ( ) ; } finally { sLock . unlock ( ) ; } }
void function ( boolean arg0 ) { valid = arg0 ; }
int function ( String arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 ++ ) { loc0 = loc0 * 31 + arg0 . charAt ( loc1 ) ; } return loc0 ; }
String function ( ) { return destination ; }
void function ( ) { if ( drone . isRunning ( ) ) { drone . setMode ( Drone . MODE_PAUSED ) ; drone . set spinSpeed ( spinSpeed ) ; drone . setCycleTime ( cycleTime ) ; drone . setCycleLeft ( cycleLeft ) ; drone . setCycleRight ( cycleRight ) ; drone . setHoverTime ( hoverTime ) ; } }
IssuerListDTO [ ] function ( ) { try { return stub . getIssuerList ( ) ; } catch ( Exception loc0 ) { throw loc0 ; } }
void function ( String arg0 , Object arg1 ) { this . attributes . remove ( arg0 ) ; this . attributes . put ( arg0 , arg1 ) ; }
int function ( ) { return step ++ ; }
void function ( ) { Date loc0 = new Date ( 1999 ) ; boolean loc1 = DateUtils . equals ( instance , loc0 ) ; assertTrue ( loc1 ) ; }
void function ( Node arg0 ) { head = arg0 ; }
Array < Asset > function ( String arg0 ) { return null ; }
void function ( ) { }
double function ( ) { return this . power ; }
String function ( ) { return referencedRevisionLabelB ; }
String function ( ) { return graph . toString ( ) ; }
void function ( SentenceListener arg0 ) { this . listeners . put ( "srini_string" , arg0 ) ; }
void function ( long arg0 ) { channelClient . inc ( arg0 ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( '.' ) ; if ( loc0 < 0 ) { return "srini_string" ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
void function ( ) { UserInfo loc0 = service . getByUsernameAndClientId ( adminUsername ) ; Assert . assertEquals ( "srini_string" , loc0 . getAuthority ( ) ) ; }
boolean function ( Scan arg0 ) { for ( Term loc0 : terms ) { if ( loc0 . eval ( arg0 ) ) { return true ; } } return false ; }
void function ( int arg0 ) { if ( ! allocated [ arg0 ] ) { allocated [ arg0 ] = true ; serverSocket . close ( ) ; } }
XHTMLPanel function ( ) { return panel ; }
void function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { mutationMap . put ( loc0 , "srini_string" ) ; } }
void function ( ) { }
void function ( String arg0 ) { this . writer . writeStartElement ( arg0 ) ; }
double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 ) { return computeEigenValue ( arg0 , arg1 , null ) ; }
void function ( ActivityRequest arg0 ) { validateConfiguration ( arg0 ) ; }
void function ( ) { build ( ) ; }
void function ( ) { InjvmRegistry loc0 = new InjvmRegistry ( ) ; loc0 . register ( service , consumerUrl ) ; }
int function ( ) { return 9999 ; }
void function ( ) { playlists . clear ( ) ; db . query ( "srini_string" , playlists ) ; }
void function ( ) { flush ( true ) ; }
void function ( String arg0 ) { this . password = arg0 ; }
String function ( ) { return signatureUsername ; }
void function ( Long arg0 ) { log . debug ( "srini_string" , arg0 ) ;ingredientRepository . delete ( arg0 ) ; }
void function ( ) { loadAssets ( ) ; }
int function ( ) { return depth ; }
Builder < K , V > function ( ) { mapOfRanges = null ; return this ; }
double [ ] function ( ) { return gammasV ; }
void function ( ) { }
void function ( ) { }
ToStringHelper function ( double arg0 ) { return addHolder ( String . valueOf ( arg0 ) ) ; }
void function ( ) { fail ( "srini_string" ) ; }
void function ( GameElement arg0 ) { checkGameElement ( arg0 ) ; }
T function ( ) { return key ; }
void function ( ) { new ResolvedHost ( InetAddress . getByName ( "srini_string" ) , "srini_string" ) ; }
double function ( ) { ensurePositive ( count ( ) ) ; return sampleCovariance ( count ( ) ) ; }
void function ( List < String > arg0 , List < Integer > arg1 ) { for ( int loc0 = 0 ; loc0 < arg0 . size ( ) ; loc0 ++ ) { countWords ( arg0 . get ( loc0 ) , arg1 ) ; } }
ThreadFactoryBuilder function ( int arg0 ) { this . priority = arg0 ; return this ; }
String function ( String arg0 ) { return String . format ( "srini_string" , host , port , arg0 , contextPath , servletPath ) ; }
void function ( Attributes arg0 ) { attributes = arg0 ; }
Object function ( Object arg0 ) { return arg0 ; }
byte [ ] function ( ) { return this . value ; }
String function ( String arg0 ) { return _uriResolver . resolve ( arg0 ) ; }
String function ( ) { return source ; }
Document function ( String arg0 , String arg1 ) { DocumentBuilderFactory loc0 = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder loc1 = loc0 . newDocumentBuilder ( ) ; Document loc2 = loc1 . parse ( new InputSource ( new StringReader ( arg0 ) ) ) ; return loc2 ; }
void function ( String arg0 , File arg1 ) { try ( OutputStream loc0 = new FileOutputStream ( arg1 ) ) { write ( arg0 , loc0 ) ; } }
void function ( ) { fail ( "srini_string" ) ; }
int function ( int arg0 ) { return ceil ( arg0 ) ; }
Scriptable function ( ) { return scope ; }
void function ( File arg0 ) { this . foldersElement . addElement ( "srini_string" ) . addElement ( "srini_string" ) . addElement ( "srini_string" ) . addElement ( "srini_string" ) . addElement ( "srini_string" ) ; }
HashMap < String , GeneticProfile > function ( ) { return getDefaultCopyNumberMap ( ) ; }
String function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg5 , String arg7
List < DishCollection > function ( ) { log . debug ( "srini_string" ) ; return dishCollectionRepository . findAll ( ) ; }
GetPrice function ( ) { return new GetPrice ( ) ; }
int function ( ) { return keyIdentifierType ; }
long function ( ) { return dataUnitId ; }
void function ( BlockMatrix64F arg0 ) { for ( int loc0 = 0 ; loc0 < blockLength ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < blockLength ; loc1 ++ ) { arg0 . set ( loc0 , loc1 , arg0 . get ( loc0 , loc1 ) * gammas [ loc1 ] ) ; } } }
void function ( lalr_item arg0 ) { not_null ( arg0 ) ; _all . remove ( arg0 ) ; }
TreeNode function ( TreeNode arg0 , TreeNode arg1 ) { if ( arg0 == null ) return null ; if ( arg1 == null ) return arg0 ; if ( arg0 . compareTo ( arg1 ) < 0 ) return arg0 ; if ( arg1 . compareTo ( arg0 ) > 0 ) return arg1 ; return findNode ( arg0 . left , arg1 ) ; }
double function ( DenseMatrix64F arg0 ) { if ( arg0 . numRows != arg0 . numCols ) throw new IllegalArgumentException ( "srini_string" ) ; return elementSumSq ( arg0 ) ; }
BufferedInputStream function ( Reader arg0 ) { return new BufferedReader ( arg0 ) ; }
String function ( String arg0 ) { return arg0 != null ? arg0 : "srini_string" ; }
Expression function ( ) { return newValue ; }
BufferedByteWriter function ( long arg0 ) { ensureCapacity ( 8 ) ; mWriter . putLong ( arg0 ) ; return this ; }
String function ( ) { return contentType ; }
boolean function ( ) { return parseLazy ; }
void function ( boolean arg0 ) { this . validateUseKey = arg0 ; }
void function ( Long arg0 ) { this . dataSetId = arg0 ; }
float function ( ) { return dotsPerDeg ; }
boolean function ( Object arg0 ) { return ts . isSubtype ( arg0 , topType ) ; }
void function ( ) { }
String function ( ) { return getWorkflow ( ) . getJobOwner ( ) ; }
ProjectActions function ( ) { if ( theInstance == null ) { theInstance = new ProjectActions ( ) ; } return theInstance ; }
void function ( O arg0 , int arg1 ) { int loc0 = count . get ( arg0 ) ; if ( loc0 == - 1 ) { loc0 = 1 ; } count . put ( arg0 , loc0 + arg1 ) ; wordCountMultiSet ++ ; }
Image function ( ) { if ( _image == null ) { _image = new Image ( _uri ) ; } return _image ; }
void function ( ) { String loc0 = "srini_string" ; RMCParser loc1 = new RMCParser ( ) ; loc1 . setCourse ( loc0 ) ; assertEquals ( loc0 , loc1 . getCourse ( ) ) ; }
View function ( ) { return mMenuItem . getActionView ( ) ; }
void function ( ) { GSASentence loc0 = instance ; loc0 . sethHorizontalDOP ( 1.0 ) ; assertTrue ( loc0 . getHorizontalDOP ( ) > 0.0 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { arg0 = "srini_string" ; } if ( arg0 . length ( ) == 1 ) { arg0 = arg0 . charAt ( 0 ) ; } return arg0 ; }
String function ( String arg0 ) { return calculate ( arg0 , 0 ) ; }
void function ( Node arg0 ) { closed . add ( arg0 ) ; }
void function ( int arg0 ) { RANDOM . nextInt ( arg0 ) ; }
Writable function ( byte [ ] arg0 , int arg1 , int arg2 ) { Writable loc0 = new Writable ( ) ; loc0 . readBytes ( arg0 , arg1 , arg2 ) ; return loc0 ; }
String function ( String arg0 , String arg1 , String arg2 ) { return config . getKey ( arg0 , arg1 , arg2 ) ; }
void function ( ) { _imageCache . clear ( ) ; _imageCacheCapacity = 0 ; }
void function ( ) { Assert . assertTrue ( mOSSUnderFileSystem . delete ( SRC , DST ) ) ; }
AstNode function ( String arg0 , Map < String , String > arg1 ) { return parse ( arg0 , arg1 , null ) ; }
int function ( ByteBuffer arg0 , int arg1 ) { int loc0 = ( arg0 . remaining ( ) & 0xff ) << 16 ; int loc1 = ( arg0 . remaining ( ) & 0xff ) << 8 ; int loc2 = ( arg0 . remaining ( ) & 0xff ) ; int loc3 = ( arg0 . remaining ( ) & 0xff ) << 24 ; int loc4 = ( arg0 . remaining ( ) & 0xff ) << 32 ; int loc5 = ( arg0 . remaining ( ) & 0xff ) << 40 ; int loc6 = ( arg0 . remaining ( ) & 0xff ) << 48 ; int loc7 = ( arg0 . remaining ( ) & 0xff
String function ( ) { return relativePath ; }
boolean function ( Language arg0 ) { return usesMetrics ( arg0 ) || usesDfa ( arg0 ) ; }
void function ( String arg0 ) { this . build = arg0 ; }
void function ( int arg0 , int arg1 , int arg2 ) { ResampleOp loc0 = new ResampleOp ( arg0 , arg1 , arg2 ) ; loc0 . setRange ( 0 , arg1 ) ; Canvas . getInstance ( ) . show ( loc0 ) ; }
JWEAlgorithm function ( JsonObject arg0 , String arg1 ) { return getAsJweAlgorithm ( arg0 , arg1 , null ) ; }
byte [ ] function ( ArrayList < String > arg0 ) { byte [ ] loc0 = new byte [ arg0 . size ( ) ] ; for ( int loc1 = 0 ; loc1 < arg0 . size ( ) ; loc1 ++ ) { loc0 [ loc1 ] = arg0 . get ( loc1 ) ; } return loc0 ; }
void function ( String arg0 ) { this . testData = arg0 ; }
void function ( ) { m_turnClient = new TcpTurnClient ( m_encodedCandidates ) ; m_turnClient . connect ( ) ; m_controlling = true ; }
void function ( Context arg0 , int arg1 , Intent arg2 ) { request ( arg0 , arg1 , arg2 , null ) ; }
void function ( ) { RMBParser loc0 = new RMBParser ( ) ; loc0 . setVelocity ( 4.0 ) ; assertEquals ( 4.0 , loc0 . getVelocity ( ) , 1.0e-6 ) ; }
void function ( ) { }
void function ( ) { Assert . assertEquals ( COMMITTED_BLOCKS_NUM , mBlockStoreMetaFull . getCapacityBytesOnTiers ( ) . size ( ) ) ; }
int function ( ) { return cm . getResponseCode ( cn , 4 ) ; }
boolean function ( ) { return HTTP_NON_PROXY_HOSTS . equalsIgnoreCase ( HTTP_PROXY_HOST ) ; }
void function ( TBase arg0 , byte [ ] arg1 , TFieldIdEnum arg2 , TFieldIdEnum ... arg3 ) { try { arg0 . read ( protocol_ , arg1 , arg2 , arg3 ) ; } catch ( TException loc0 ) { throw new TException ( loc0 ) ; } finally { protocol_ . reset ( ) ; } }
void function ( String arg0 , String arg1 ) { if ( sIsLogEnabled ) { Log . e ( arg0 , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg1 ) ; } }
String function ( ) { return signatureAlias ; }
void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_APPLICATION , "srini_string" ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }
String function ( KeyStroke arg0 ) { return getKeyText ( arg0 ) + "srini_string" + getKeyText ( arg0 . getKeyStroke ( ) ) ; }
void function ( String arg0 ) { this . charset = arg0 ; }
ClientDetailsEntity function ( JsonObject arg0 ) { JsonElement loc0 = arg0 . get ( "srini_string" ) . getAsJsonObject ( ) ; return new UnboundClientDetailsEntity ( loc0 ) ; }
Builder function ( String arg0 ) { this . portId = arg0 ; return this ; }
void function ( ) { boolean loc0 = rte . isActiveRoute ( ) ; assertTrue ( loc0 ) ; }
void function ( ) { actions . clear ( ) ; actions . addAll ( getActions ( ) ) ; }
int function ( ) { return id ; }
HexDigest function ( byte [ ] arg0 ) { return digestInstance . digest ( arg0 ) ; }
List < String > function ( String arg0 ) { List < String > loc0 = testDefinitions . get ( arg0 ) ; if ( loc0 == null ) { loc0 = Collections . emptyList ( ) ; } return loc0 ; }
Date function ( String arg0 ) { try { return parseIsoDate ( arg0 , LOCALE ) ; } catch ( ParseException loc0 ) { return new Date ( 0 ) ; } }
boolean function ( ) { return ko ; }
void function ( ) { System . out . println ( "srini_string" ) ; TMParser loc0 = empty ; loc0 . setTime ( 0.5 ) ; assertEquals ( 0.5 , loc0 . getTime ( ) , 1.0e-6 ) ; }
ByteBuffer function ( ByteBuffer arg0 , ByteBuffer arg1 ) { int loc0 = arg0 . capacity ( ) ; int loc1 = arg1 . capacity ( ) ; ByteBuffer loc2 = ByteBuffer . allocate ( loc0 > loc1 ? loc0 : loc1 ) ; loc2 . put ( arg0 ) ; loc2 . put ( arg1 ) ; return loc2 ; }
String function ( String arg0 , String arg1 ) { return nsh . getAttributeValue ( arg0 , arg1 ) ; }
void function ( String arg0 ) { this . album = arg0 ; }
FiltersType function ( ) { return cipherSuiteFilters ; }
MemoryLogger function ( ) { return instance ; }
void function ( ) { vtg . setMagneticCourse ( 2.0 ) ; assertEquals ( 2.0 , vtg . getMagneticCourse ( ) , 1E-6 ) ; }
Boolean function ( Properties arg0 , String arg1 , boolean arg2 ) { String loc0 = arg0 . getProperty ( arg1 ) ; if ( loc0 == null ) { return arg2 ; } return Boolean . parseBoolean ( loc0 ) ; }
void function ( ) { this . ep = new Endpoint ( "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" , "srini_string" ) ; }
String function ( ) { return val ; }
Setting function ( String arg0 , String arg1 ) { loadValue ( arg0 , arg1 ) ; return this ; }
String function ( Figure arg0 ) { Figure loc0 = arg0 ; while ( loc0 != null ) { if ( loc0 . getId ( ) . equals ( "srini_string" ) ) { return loc0 . getId ( ) ; } loc0 = loc0 . getParent ( ) ; } return null ; }
Sha256Hash function ( File arg0 ) { InputStream loc0 = new FileInputStream ( arg0 ) ; return sha256 ( loc0 ) ; }
boolean function ( Connection arg0 ) { String loc0 = arg0 . getDriver ( ) ; return loc0 . equals ( "srini_string" ) ; }
Class < ? extends Service > function ( ) { return UUIDService . class ; }
void function ( ) { urlConn . connect ( ) ; }
Date function ( String arg0 ) { return parseUTCtoSqlLocal ( arg0 ) ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( ) { mStream . write ( ( byte ) 1 ) ; Assert . assertTrue ( mStream . write ( ( byte ) 1 ) == 1 ) ; }
void function ( ) { instance . createParser ( "srini_string" ) ; }
void function ( StateListener arg0 ) { listeners . add ( arg0 ) ; }
void function ( Project arg0 ) { ProjectManager loc0 = getManager ( ) ; loc0 . removeProject ( arg0 ) ; }
boolean function ( ) { return duration > 0 ; }
ReplacedElement function ( Element arg0 , String arg1 , int arg2 ) { if ( ! imageComponents . containsKey ( arg0 ) ) { imageComponents . put ( arg0 , new HashMap ( ) ) ; } imageComponents . get ( arg0 ) . put ( arg1 , arg2 ) ; return this ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
List < String > function ( ) { List < String > loc0 = new ArrayList < String > ( ) ; for ( FederationModel loc1 : federationRegistrations ) { loc0 . add ( loc1 . getFederationToken ( ) ) ; } return loc0 ; }
boolean function ( @ ParamDoc ( name = "srini_string" , value = "srini_string" ) String arg0 , @ ParamDoc ( name = "srini_string" , value = "srini_string" ) String arg1 , @ ParamDoc ( name = "srini_string" , value = "srini_string" ) String arg2 ) { return false ; }
int function ( ) { return p2shHeader ; }
int function ( int arg0 ) { return steps . get ( arg0 ) . y ; }
List < String > function ( ) { return Collections . unmodifiableList ( DEFAULT_SCHEME_PRIORITY ) ; }
void function ( ) { if ( log != null ) { log . destroy ( ) ; } }
GoogleMapsClientManaged function ( ) { return mapsClient ; }
String function ( ) { return cssName . toString ( ) ; }
Message function ( Message arg0 ) { return arg0 ; }
Filters function ( ) { return filters ; }
Node function ( Document arg0 , String arg1 , String arg2 ) { return engine . select ( arg0 , arg1 , arg2 ) ; }
void function ( ) { locationPositions . clear ( ) ; links . clear ( ) ; }
java . util . Enumeration function ( ) { return typeName . iterator ( ) ; }
void function ( String arg0 , DifferenceGroup arg1 ) { differenceGroups . put ( arg0 , arg1 ) ; }
JSONWriter function ( ) { beforeValue ( ) ; mWriter . write ( '[' ) ; mWriter . write ( escape ( this . type ) ) ; mWriter . write ( ']' ) ; return this ; }
void function ( ) { GSASentence loc0 = instance ; loc0 . gethHorizontalDOP ( ) ; assertTrue ( loc0 instanceof GSASentence ) ; }
void function ( final String arg0 , final String arg1 , final String arg2 , final String arg3 , final String arg4 , final String arg5 , final String arg6 , final String arg7 , final String arg8 , final String arg9 , final String arg10 , final String arg11 , final String arg12 , final String arg13 , final String arg14 , final String arg15 , final String arg16 , final String arg17 ) { checkKey ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 , arg12 , arg13 , arg14 , arg15 , arg16 , arg17
String function ( ) { return logPath ; }
int function ( String arg0 , OutputStream arg1 ) { return encoder . decode ( arg0 , 0 , arg0 . length ( ) , arg1 ) ; }
boolean function ( String arg0 ) { if ( arg0 == null ) { return false ; } return arg0 . equalsIgnoreCase ( "srini_string" ) || arg0 . equalsIgnoreCase ( "srini_string" ) || arg0 . equalsIgnoreCase ( "srini_string" ) ; }
int function ( ) { return _all . size ( ) ; }
void function ( ) { buffer . Flush ( ) ; }
Thread function ( ) { return waiter ; }
void function ( InputStream arg0 ) { arg0 . setAccessible ( true ) ; }
void function ( ) { new UploadFrame ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , TEMP_UFS_FILE_ID , OFFSET , LENGTH ) ; }
java . lang . String function ( ) { return typeName . toString ( ) ; }
BufferedImage function ( int arg0 , int arg1 , int arg2 ) { return getImage ( arg0 , arg1 , arg2 , false ) ; }
File function ( String arg0 ) { File loc0 = File . createTempFile ( arg0 , "srini_string" ) ; loc0 . deleteOnExit ( ) ; return loc0 ; }
void function ( Date arg0 ) { this . fetcherStartTimeStamp = arg0 ; }
float function ( ) { return 0.5f ; }
int function ( ) { return yPosition ; }
void function ( String arg0 ) { this . id = arg0 ; }
boolean function ( T arg0 ) { return nodePosition . containsKey ( arg0 ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . indexOf ( "srini_string" ) ; if ( loc0 >= 0 ) { return arg0 . substring ( 0 , loc0 ) ; } return null ; }
String function ( ) { return elem2 ; }
void function ( ) { GLLParser loc0 = instance ; loc0 . setTime ( 0 ) ; assertEquals ( 0 , loc0 . getTime ( ) ) ; }
boolean function ( ByteBuffer arg0 ) { return getChecksum ( arg0 ) == getChecksum ( arg0 ) ; }
List < Integer > function ( Grafo arg0 ) { List < Integer > loc0 = criarGrafo ( arg0 ) ; carregarVertices ( loc0 ) ; return loc0 ; }
void function ( Item arg0 ) { this . itemDropped = arg0 ; }
ListStatusOptions function ( LoadMetadataType arg0 ) { this . mLoadMetadataType = arg0 ; return this ; }
AbstractPlugin function ( String arg0 ) { for ( AbstractPlugin loc0 : this . plugins ) { if ( loc0 . getName ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }
void function ( ) { if ( goal != null ) { goal . start ( exclusiveTime ) ; } }
void function ( ) { when ( mMetaManager . getBlockMeta ( TEST_BLOCK_ID ) ) . thenReturn ( mMetaManager . getBlockMeta ( TEST_BLOCK_ID * 2 ) ) ; mThrown . expect ( IllegalArgumentException . class ) ; mMetaManagerView . getBlockMeta ( TEST_BLOCK_ID * 2 ) ; Assert . assertEquals ( mMetaManager . getBlockMeta ( TEST_BLOCK_ID * 2 , mMetaManager . getBlockMeta ( TEST_BLOCK_ID * 2 ) ) ; }
Permission function ( ) { return applyUMask ( FILE_UMASK ) ; }
String function ( String arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . replaceAll ( "srini_string" , "srini_string" ) . replaceAll ( "srini_string" , "srini_string" ) ; }
void function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( ! loc0 . exists ( ) ) { loc0 . mkdir ( ) ; } }
void function ( ) { Month loc0 = rmc . getMonth ( ) ; assertEquals ( 8 , loc0 . getValue ( ) ) ; }
void function ( Document arg0 ) { this . doc = arg0 ; }
USAddress function ( ) { return billTo ; }
void function ( ) { when ( mHttpConMock . getResponseCode ( ) ) . thenReturn ( IOException . class ) ; SwiftOutputStream loc0 = new SwiftOutputStream ( mHttpConMock ) ; loc0 . close ( ) ; verify ( mHttpConMock ) . getOutputStream ( ) ; }
byte [ ] function ( ) { return secret ; }
symbol function ( ) { return _on_symbol ; }
void function ( Options arg0 ) { }
boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof Decision ) ) { return false ; } Decision loc0 = ( Decision ) arg0 ; return this . name . equals ( loc0 . name ) ; }
RMProperties function ( Message arg0 ) { return ( RMProperties ) arg0 . getProperty ( getRMPropertiesKey ( ) ) ; }
GetOfferDetailsResponse . Return . Product function ( ) { return new GetOfferDetailsResponse . Return . Product ( ) ; }
void function ( ) { when ( mockServerMessage . getServerSession ( ) ) . thenReturn ( null ) ; acitivityController . deregisterUserSession ( MOCK_SESSION_ID , mockServerMessage ) ; }
void function ( ) { channelClient . disconnect ( ) ; }
void function ( List < String > arg0 ) { }
void function ( String ... arg0 ) { SpringApplication . run ( SampleApplication . class , arg0 ) ; }
void function ( ) { TMParser loc0 = new TMParser ( "srini_string" ) ; assertEquals ( 8.0 , loc0 . getSpeed ( ) , 1E-6 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; Device loc1 = dev ; String loc2 = loc1 . getCapabilities ( ) ; assertEquals ( loc0 , loc2 ) ; fail ( "srini_string" ) ; }
Position function ( int arg0 , int arg1 ) { if ( arg0 < 0 || arg0 > 2 ) { return null ; } if ( arg1 < 0 || arg1 > 2 ) { return UNKNOWN ; } return new Position ( arg0 - 1 , arg1 - 1 ) ; }
void function ( String arg0 ) { this . transformedTokenIdentifier = arg0 ; }
List < VertexLabelType > function ( ) { return vertexLabels ; }
void function ( ) { boolean loc0 = rte . isActiveRoute ( ) ; assertTrue ( loc0 ) ; }
float function ( ) { return Math . sqrt ( ( latMax - latMin ) * ( lonMax - lonMin ) ) ; }
void function ( ) { HdgParser loc0 = new HdgParser ( ) ; loc0 . setDeviation ( 1.0 ) ; assertEquals ( 2.0 , loc0 . getVariation ( ) , 1.0 ) ; }
boolean function ( ) { return mConnected ; }
Calendar function ( Date arg0 ) { return createCalendar ( UTC , arg0 ) ; }
void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( mBuffer , LENGTH ) ; Assert . assertEquals ( LENGTH , loc0 . getLength ( ) ) ; }
void function ( String arg0 ) { this . testId = arg0 ; }
void function ( ) { HdgParser loc0 = new HdgParser ( ) ; double loc1 = loc0 . getDeviation ( ) ; assertEquals ( 4.0 , loc1 , 1.0e-6 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; LogEntryInterval loc0 = new LogEntryInterval ( ) ; int loc1 = 0 ; int loc2 = loc0 . getNumberRequests ( ) ; assertEquals ( loc1 , loc2 ) ; }
String function ( char [ ] arg0 ) { StringBuilder loc0 = new StringBuilder ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 . append ( arg0 [ loc1 ] ) ; } return loc0 . toString ( ) ; }
void function ( ) { Mode . Bits loc0 = new Mode . Bits ( 1 ) ; Mode . Bits loc1 = new Mode . Bits ( 0 ) ; Mode . Bits loc2 = new Mode . Bits ( 0 ) ; assertEquals ( Mode . Bits . or , loc0 . or ( loc1 ) ) ; assertEquals ( Mode . Bits . or , loc1 . or ( loc2 ) ) ; }
void function ( Context arg0 , int arg1 ) { if ( Build . VERSION . SDK_INT < 11 ) { Activity loc0 = ( Activity ) arg0 . getSystemService ( Context . ACTIVITY_SERVICE ) ; loc0 . startActivity ( arg0 , arg1 ) ; } else { loc0 . startActivity ( arg0 , arg1 ) ; } }
double function ( DenseMatrix64F arg0 , DenseMatrix64F arg1 , DenseMatrix64F arg2 ) { final double loc0 = 1.0 / arg0 . size ( ) ; final double loc1 = 1.0 / arg1 . size ( ) ; for ( int loc2 = 0 ; loc2 < arg0 . size ( ) ; loc2 ++ ) { for ( int loc3 = 0 ; loc3 < arg2 . size ( ) ; loc3 ++ ) { loc0 *= arg0 . get ( loc2 , loc3 ) * arg2 . get ( loc2 , loc3 ) ; loc1 *= arg1 . get ( loc2 , loc3 ) * arg2 . get (
DAVResource function ( URI arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return factory . create ( root , arg0 ) ; }
void function ( String arg0 ) { logger . info ( arg0 ) ; }
boolean function ( Pattern arg0 , Object arg1 ) { Matcher loc0 = arg0 . matcher ( arg1 ) ; if ( loc0 . find ( ) ) { return true ; } return false ; }
UserModel function ( UserModel arg0 ) { return userService . updateUser ( arg0 ) ; }
void function ( ) { if ( mAlternateUfsRoot != null ) { mFileSystem . delete ( mAlternateUfsRoot , false ) ; } }
String function ( File arg0 ) { return readFile ( arg0 . getAbsolutePath ( ) ) ; }
void function ( ) { testEventProperties . put ( ActivityEvent . ID_KEY , "srini_string" ) ; acitivityController . handleEvent ( new Event ( ActivityEvent . EVENT_TOPIC , testEventProperties ) ) ; }
String function ( Class < ? > arg0 ) { if ( SHORT_NAMES_BY_TYPE . containsKey ( arg0 ) ) { return SHORT_NAMES_BY_TYPE . get ( arg0 ) ; } else { return arg0 . getName ( ) ; } }
AccessibilityEvent function ( View arg0 , int arg1 ) { return IMPL . getEvent ( arg0 , arg1 ) ; }
QRDecomposition < DenseMatrix64F > function ( int arg0 ) { return new QRDecomposition < DenseMatrix64F > ( arg0 ) ; }
void function ( byte [ ] arg0 ) { _messageBody = arg0 ; }
void function ( MenuItemListener arg0 ) { mMenuItem . setListener ( arg0 ) ; }
void function ( ) { fail ( "srini_string" ) ; }
void function ( ByteBuffer arg0 ) { if ( arg0 . remaining ( ) < 4 ) { throw new IOException ( "srini_string" ) ; } m_protocolHandler . process ( arg0 ) ; }
double function ( ) { checkState ( count > 0 , "srini_string" ) ; return ( double ) count / count ; }
Method function ( String arg0 ) { if ( arg0 == null ) { arg0 = anonymousClass ( ) + "srini_string" ; } return ClassUtil . getMethod ( classifier , arg0 ) ; }
void function ( final HttpParams arg0 , boolean arg1 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } arg0 . setBooleanParameter ( CoreConnectionPNames . TCP_NODELAY , arg1 ) ; }
boolean function ( String arg0 ) { return check ( arg0 ) ; }
void function ( AbstractReportNode arg0 ) { childNodes . add ( arg0 ) ; }
boolean function ( ) { return bufferSize == 0 ; }
Function < T , V > function ( ) { @ SuppressWarnings ( "srini_string" ) SupplierFunction < V > loc0 = ( SupplierFunction < V > ) SupplierFunctionImpl . INSTANCE ; return loc0 ; }
void function ( ) { hdg . setheading ( 2.0 ) ; }
StorageTierView function ( ) { return mTierViews . get ( mInUseBlocks . size ( ) - 1 ) ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( "srini_string" ) ; loc0 . append ( m_documentBuilder . toString ( ) ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
void function ( THashSet < String > arg0 ) { mWhitelist = arg0 ; }
int function ( ) { return p1 . distinct ( ) + p2 . distinct ( ) ; }
String function ( File arg0 ) { return arg0 . getCanonicalPath ( ) ; }
int function ( ) { return pref_group_len ; }
double function ( ) { return Math . sqrt ( normF ( ) ) ; }
double function ( DenseMatrix64F arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . getNumElements ( ) ; loc1 ++ ) { loc0 += Math . sqrt ( arg0 . getElement ( loc1 ) ) ; } return loc0 ; }
boolean function ( final MessageContext arg0 ) { final MessagingRole loc0 = arg0 . getMessagingRole ( ) ; return loc0 == MessageContext . REQUESTOR ; }
String function ( ) { return fldname ; }
void function ( List < String > arg0 ) { for ( String loc0 : arg0 ) { saveFile ( loc0 ) ; } }
void function ( ClientRequestContext arg0 ) { if ( arg0 . isBlank ( ) ) { throw new BadRequestException ( "srini_string" ) ; } }
byte [ ] function ( byte [ ] arg0 , int arg1 , int arg2 ) { return decompress ( arg0 , 0 , arg1 , arg2 ) ; }
void function ( String arg0 ) { String [ ] loc0 = arg0 . split ( "srini_string" ) ; for ( String loc1 : loc0 ) { put ( loc1 , get ( loc1 ) + 1 ) ; } }
HeuristicFunction function ( Object arg0 , Map arg1 ) { this . goal = arg0 ; this . map = arg1 ; return this ; }
int function ( ) { return emptyAnnotationRejects ; }
void function ( ) { Assert . assertEquals ( 1 , mTestStream . remaining ( ) ) ; }
List < StorageTierView > function ( String arg0 ) { List < StorageTierView > loc0 = mAliasToTierViews . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; }
DeterministicKey function ( ) { byte [ ] loc0 = getPrivKeyBytes33 ( ) ; byte [ ] loc1 = getPrivKeyBytes ( ) ; return new DeterministicKey ( loc0 , loc1 ) ; }
void function ( ) { mPlan . heartbeat ( ) ; }
void function ( PropertyChangeListener arg0 ) { m_PropertyChangeSupport . removePropertyChangeListener ( arg0 ) ; }
void function ( ) { transform ( ) ; }
ArrayList function ( ) { return ( parameters ) ; }
BigDecimal function ( ) { return fileSize ; }
boolean function ( String arg0 , String arg1 ) { return properties . put ( arg0 , arg1 ) ; }
StatSource function ( int arg0 ) { return statSources . get ( arg0 ) ; }
void function ( ) { }
void function ( Node arg0 ) { indexNodes ( arg0 . getRuleSet ( ) , arg0 . getRules ( ) ) ; }
long function ( ) { return testId ; }
void function ( short arg0 ) { packed . write ( ( byte ) ( arg0 >>> 8 ) ) ; packed . write ( ( byte ) arg0 ) ; }
TransactionOutputChanges function ( ) { return txOutChanges ; }
void function ( String arg0 ) { this . callbackHandlerClass = arg0 ; }
int function ( ) { int loc0 = 0 ; for ( CanonicalGene loc1 : genes_in_ROI ) { if ( loc1 . getChromosome ( ) == chromosome ) { loc0 ++ ; } } return loc0 ; }
void function ( String arg0 ) { tree = MTDFragmentAST . parseTree ( arg0 ) ; }
void function ( THashSet < String > arg0 ) { mBlacklist = arg0 ; }
BigDecimal function ( ) { return expDataUnitId ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
void function ( RemoteControl arg0 , String arg1 ) { arg0 . putString ( METADATA_KEY_ARTWORK , arg1 ) ; }
String function ( WorkflowActionBean arg0 ) { return arg0 . getExternalId ( ) ; }
String function ( String arg0 ) { return config . getString ( makeKey ( arg0 ) ) ; }
int function ( byte [ ] arg0 , int arg1 ) { int loc0 = 0 ; int loc1 = 0 ; while ( arg0 [ arg1 + loc0 ] != 0 ) loc0 ++ ; return loc0 ; }
String function ( int arg0 ) { return "srini_string" + arg0 ; }
void function ( ) { hdm . setheading ( 0.5 ) ; assertEquals ( 0.5 , hdm . setheading ( 0.5 ) , 1E-6 ) ; }
void function ( T arg0 ) { circularArray . add ( arg0 ) ; haveOverflow = true ; }
void function ( ) { mMasterThread = new Thread ( this ) ; mMasterThread . start ( ) ; }
void function ( String arg0 ) { this . identifier = arg0 ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { ensureCapacity ( arg0 , arg1 , arg2 ) ; }
void function ( ) { mReadLock . lock ( ) ; Assert . assertTrue ( mClientRWLock . isLocked ( ) ) ; }
Long function ( ) { return testId ; }
List < String > function ( ) { return log ; }
void function ( ) { RMCParser loc0 = new RMCParser ( EXAMPLE ) ; RMCVariation loc1 = loc0 . getVariation ( ) ; assertEquals ( loc1 . getId ( ) , 1 ) ; }
int function ( Date arg0 ) { Calendar loc0 = Calendar Calendar ; loc0 . setTimeInMillis ( arg0 . getTime ( ) ) ; return convertFrequencyToMinutes ( loc0 . get ( Calendar . MINUTE ) ) ; }
File function ( ) { return new File ( getLibsDirectory ( ) , "srini_string" ) ; }
Set < String > function ( ResourceTypeHandler arg0 ) { return extensionsDenied . get ( arg0 ) ; }
void function ( ) { RPCBlockReadResponse loc0 = new RPCBlockReadResponse ( TEMP_UFS_FILE_ID , OFFSET , LENGTH ) ; assertEquals ( LENGTH , loc0 . getPayloadDataBuffer ( ) . limit ( ) ) ; }
String function ( String arg0 , Object ... arg1 ) { return String . format ( arg0 , arg1 ) ; }
List < T > function ( T ... arg0 ) { List < T > loc0 = new ArrayList < T > ( ) ; Collections . addAll ( loc0 , arg0 ) ; return loc0 ; }
void function ( Class < ? > arg0 , Object arg1 ) { if ( ! arg0 . isInstance ( arg1 ) ) { throw new IllegalArgumentException ( String . format ( "srini_string" , arg0 . getName ( ) , arg1 , arg0 . getName ( ) ) ) ; } }
Document function ( String arg0 ) { DocumentBuilderFactory loc0 = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder loc1 = loc0 . newDocumentBuilder ( ) ; Document loc2 = loc1 . parse ( new InputSource ( new StringReader ( arg0 ) ) ) ; return loc2 ; }
Object function ( HSSFRow arg0 ) { return arg0 . getRowData ( ) ; }
boolean function ( ) { return isValid ( ) ; }
void function ( String arg0 , String arg1 ) { addFile ( arg0 , new File ( BASE_TEST_RESOURCE_PATH , arg1 ) ) ; }
Method function ( Class < ? > arg0 , Method arg1 , Class < ? > ... arg2 ) { for ( Class < ? > loc0 : arg2 ) { if ( arg0 . isAssignableFrom ( loc0 ) ) { if ( arg1 . isAssignableFrom ( loc0 ) ) { return arg1 ; } } return null ; }
void function ( Parcel arg0 , Map < K , V > arg1 , Class < K > arg2 , Map < V , V > arg3 ) { arg0 . writeInt ( arg1 . size ( ) ) ; for ( Map . Entry < K , V > loc0 : arg1 . entrySet ( ) ) { writeMap ( arg0 , arg2 , loc0 . getKey ( ) , loc0 . getValue ( ) ) ; } }
String function ( ) { return title ; }
void function ( Timestamp arg0 ) { this . modifiedDate = arg0 ; }
T function ( ) { return value ; }
boolean function ( String arg0 ) { return false ; }
SettableFuture < PaymentChannelClientConnection > function ( ) { return channelOpenFuture ; }
String function ( ) { return graph . toString ( ) ; }
Timestamp function ( ) { return modifiedDate ; }
void function ( byte [ ] arg0 , int arg1 , int arg2 ) { arg0 [ arg1 ] = ( byte ) ( arg2 >>> 8 ) ; arg0 [ arg1 + 1 ] = ( byte ) arg2 ; }
void function ( String arg0 , RequestListener arg1 , final Object arg2 ) { request ( arg0 , new Bundle ( ) , "srini_string" , arg1 , arg2 ) ; }
ServiceBuilder function ( Api arg0 ) { this . api = arg0 ; return this ; }
boolean function ( short arg0 ) { return ( arg0 < 0 ) || ( arg0 >= 0 ) ; }
boolean function ( final String arg0 ) { if ( System . getProperty ( "srini_string" ) . toLowerCase ( ) . contains ( "srini_string" ) ) { return true ; } return false ; }
void function ( ) { System . out . println ( "srini_string" ) ; Position loc0 = new Position ( ) ; loc0 . setLongitude ( 222 ) ; loc0 . setLatitude ( 375 ) ; loc0 . setDatum ( "srini_string" ) ; assertEquals ( 222.0 , loc0 . getLongitude ( ) , 1E-6 ) ; }
void function ( ) { RpcFileReadRequest loc0 = new RpcFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH , OFFSET + LENGTH ) ; Assert . assertEquals ( TEMP_UFS_FILE_ID , loc0 . getTransactionId ( ) ) ; }
boolean function ( StoredBlock arg0 ) { return chainWork . compareTo ( arg0 . chainWork ) < 0 ; }
void function ( ) { fetcherContext = new FetcherContext ( fetcherRegDataUnitVerifier ) ; }
void function ( ) { if ( connection != null ) connection . close ( ) ; }
Sha256Hash function ( ) { return hash ; }
void function ( ) { tagList . openTag ( "srini_string" ) ; tagList . openTag ( "srini_string" ) ; tagList . closeTag ( "srini_string" ) ; }
void function ( String arg0 ) { if ( arg0 . length ( ) > 0 ) { writer . write ( arg0 ) ; } }
HashCodeBuilder function ( final Object [ ] arg0 , final int arg1 , final int arg2 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 = 31 * loc0 + arg0 [ loc1 ] ; } loc0 = 31 * loc0 + arg1 ; loc0 = 31 * loc0 + arg2 ; return this ; }
void function ( String arg0 ) { this . filepath = arg0 ; }
void function ( ) { _printer . dispose ( ) ; }
String function ( ) { return uniqueName . substring ( project . getPackageName ( ) . length ( ) ) ; }
int function ( ) { return this . value ; }
boolean function ( ) { return ( image . startsWith ( THIS_DOT ) || image . startsWith ( SUPER_DOT ) ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; TMParser loc0 = new TMParser ( "srini_string" ) ; loc0 . time ( ) ; }
String function ( ) { return string1 ; }
void function ( String arg0 ) { this . userName = arg0 ; }
void function ( File arg0 ) { m_markedForRemoval = true ; m_directory = arg0 ; }
String function ( String arg0 ) { return nsh . getVisitedAttribute ( arg0 ) ; }
void function ( String arg0 ) { webEngine . get ( arg0 ) ; }
Result function ( Result arg0 ) { return filterOnly ( arg0 , true ) ; }
ClassMetric function ( ModelNode arg0 , String arg1 ) { Operation loc0 = arg0 . get ( OP ) ; if ( loc0 == null ) { return null ; } return getResultingClass ( loc0 , arg1 ) ; }
void function ( final PropertyChangeEvent arg0 ) { removeAllElementListeners ( ) ; initialiseListener ( arg0 ) ; }
LinearSolver < DenseMatrix64F > function ( ) { return new GeneralSolver ( ) ; }
Long function ( ) { return dataSetId ; }
void function ( Timestamp arg0 ) { this . modifiedDate = arg0 ; }
void function ( ) { initInternal ( ) ; }
int function ( byte [ ] arg0 , int arg1 , int arg2 ) { return ( arg0 [ arg1 + arg2 ] & 0xFF ) | ( arg0 [ arg1 + arg2 + 1 ] << 8 ) | ( arg0 [ arg1 + arg2 + 2 ] & 0xFF ) ; }
int function ( String arg0 ) { return config . getInt ( makeKey ( arg0 ) , - 1 ) ; }
void function ( ) { curValue ++ ; }
Collection < Node > function ( String arg0 ) { Collection < Node > loc0 = getNeighbors ( arg0 ) ; return loc0 ; }
InetSocketAddress function ( ) { return localServer . getLocalAddress ( ) ; }
String function ( ) { return namespaceURI ; }
void function ( Terminal arg0 ) { repository . remove ( arg0 ) ; }
int function ( String arg0 ) { return ti . numFields ( arg0 ) ; }
void function ( long arg0 ) { waitForSeqAckLatch . incrementAndGet ( ) ; }
void function ( ) { RpcFileReadRequest loc0 = new RpcFileReadRequest ( TEMP_UFS_FILE_ID , OFFSET , LENGTH ) ; assertEquals ( LENGTH , loc0 . getPayloadDataBuffer ( ) . limit ( ) ) ; }
SpringChain function ( ) { return new SpringChain ( ) ; }
boolean function ( String arg0 ) { File loc0 = new File ( arg0 ) ; return loc0 . exists ( ) ; }
String function ( ) { return checksumType ; }
void function ( ) { System . out . println ( "srini_string" ) ; TestDosAttack loc0 = new TestDosAttack ( ) ; String loc1 = "srini_string" ; String loc2 = loc0 . getName ( ) ; assertEquals ( loc1 , loc2 ) ; }
long function ( ) { return this . deliveryAssurance . getInactivityTimeout ( ) ; }
ELEvaluator function ( String arg0 , String arg1 , String arg2 ) { return new SLAEvaluator ( arg0 , arg1 , arg2 ) ; }
Sentence function ( String arg0 ) { Class < ? extends SentenceParser > loc0 = parsers . get ( arg0 ) ; if ( loc0 == null ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return ( Sentence ) loc0 . newInstance ( arg0 ) ; }
TimestampService function ( ) { return new TimestampService ( ) ; }
void function ( String arg0 ) { lastVersion = arg0 ; }
void function ( InputStream arg0 ) { this . resolver = new HessianRemoteResolver ( arg0 ) ; }
void function ( boolean arg0 ) { this . verifyProofOfPossession = arg0 ; }
PolicyPublisher function ( ) { return policyPublisher ; }
Options function ( ) { return options ; }
void function ( ) { drone . sleep ( ) ; }
void function ( T arg0 ) { }
void function ( ErrorQueue arg0 ) { this . eq = arg0 ; }
void function ( Stylesheet arg0 ) { this . stylesheet = arg0 ; }
Auth function ( ) { return auth ; }
void function ( JsonObject arg0 , String arg1 , int arg2 ) { arg0 . addProperty ( arg1 , arg2 ) ; }
void function ( AccessibilityEvent arg0 ) { if ( IMPL == null ) { return ; } AccessibilityDelegate loc0 = IMPL . onAddAccessibilityEvent ( arg0 ) ; if ( loc0 != null ) { loc0 . onAddAccessibilityEvent ( arg0 ) ; } }
String function ( int arg0 ) { return namedColors . get ( new RGB ( arg0 , arg0 , arg0 ) ) ; }
Schema function ( ) { return sch ; }
Long function ( ) { return batchId ; }
void function ( String arg0 , Point2D arg1 , String arg2 ) { links . add ( arg0 , arg1 , arg2 ) ; }
void function ( String arg0 , int arg1 ) { info . put ( arg0 , new FieldInfo ( arg0 , arg1 ) ) ; }
void function ( final Collection arg0 , final String arg1 ) { notEmpty ( arg0 , arg1 , "srini_string" ) ; }
void function ( ) { mManager = new TransferManager ( BUCKET_NAME , ACCOUNT_OWNER , PATH , DST , mClient , mS3UnderFileSystem ) ; }
int function ( ) { return blockSize ; }
boolean function ( PropertyDeclaration arg0 ) { return cascadedProperties . containsKey ( arg0 ) ; }
boolean function ( ) { return errorCode != null ; }
void function ( OutputStream arg0 ) { if ( ! hasRequestBody ( ) ) { response . reset ( ) ; } arg0 . write ( response . toString ( ) ) ; }
String function ( ) { return log . toString ( ) ; }
int function ( ) { return 8 + ( x << 8 ) + y ; }
void function ( String arg0 ) { if ( val . compareTo ( Constant . BIGINT_MAX ) > 0 ) { val = val . intValue ( ) ; } }
boolean function ( ) { return duration == 0 ; }
U2FService function ( ) { return u2fService ; }
ResponseEntity < DishCollection > function ( @ PathVariable Long arg0 ) { log . debug ( "srini_string" , arg0 ) ; return ResponseUtil . wrapOrNotFound ( dishCollectionService . find ( arg0 ) ) ; }
ScriptSig function ( byte [ ] arg0 , String arg1 ) { return new P2SHOutputSig ( arg0 , arg1 , chunks ) ; }
void function ( ) { assertEquals ( "srini_string" , 0 , service . getIssueInstant ( ) . toString ( ) ) ; }
Builder function ( String arg0 ) { this . id = arg0 ; return this ; }
boolean function ( ) { return accountNonExpired ; }
String function ( ) { return nsh . getLang ( ) ; }
AbstractAction function ( ) { return redoAction ; }
Collection < Device > function ( ) { return devices . values ( ) ; }
boolean function ( ) { return accountNonExpired ; }
List < Station > function ( ) { return stationDao . getStations ( ) ; }
void function ( ) { buffers . clear ( ) ; pins . clear ( ) ; }
void function ( String arg0 ) { doLog ( arg0 , null ) ; }
boolean function ( ) { return settings . getBoolean ( "srini_string" , false ) ; }
void function ( byte [ ] arg0 ) { packed . write ( arg0 ) ; }
HashMap < String , GeneticProfile > function ( ) { HashMap < String , GeneticProfile > loc0 = new HashMap < String , GeneticProfile > ( ) ; for ( GeneticProfile loc1 : mutationProfileList ) { loc0 . put ( loc1 . getName ( ) , loc1 ) ; } return loc0 ; }
String function ( ) { return executionEndDateTime ; }
void function ( ) { assertEquals ( 0 , ttm . getNumber ( ) ) ; }
Mode function ( Configuration arg0 ) { return applyUMask ( arg0 , 0 ) ; }
void function ( long arg0 ) { this . sequenceNumber = arg0 ; }
void function ( ) { for ( BasicPoolEntry loc0 : leasedConnections ) { loc0 . close ( ) ; } }
void function ( ParserEventType arg0 ) { }
void function ( ) { assertEquals ( 0.0 , ttm . getBearing ( ) , 0.0 ) ; }
boolean function ( int arg0 ) { return this . plugins . remove ( arg0 ) ; }
List < String > function ( final List < String > arg0 , final String ... arg1 ) { return parsePackages ( arg0 , arg1 , null ) ; }
void function ( StreamOutput arg0 ) { arg0 . writeInt ( length ( ) ) ; arg0 . writeDouble ( get ( ) ) ; }
void function ( Date arg0 ) { this . fetcherEndTimeStamp = arg0 ; }
String function ( ) { return this . user ; }
File function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( ! loc0 . exists ( ) ) { loc0 . mkdir ( ) ; } return loc0 ; }
void function ( ) { page_now = 0 ; }
BufferedImage function ( ) { return image ; }
CertificateInfo function ( ) { return new CertificateInfo ( ) ; }
SharedContext function ( ) { return this . dim ; }
ApplicationManagementService function ( final ApplicationContext arg0 ) { return ( ApplicationManagementService ) arg0 . getService ( ApplicationManagementService . class . getName ( ) ) ; }
void function ( ) { if ( locks != null ) { locks . destroy ( ) ; } }
BufferedByteWriter function ( byte [ ] arg0 , int arg1 ) { ensureCapacity ( arg1 ) ; mWriter . put ( arg0 , 0 , arg1 ) ; return this ; }
int function ( int arg0 ) { return arg0 <= 0 ? 0 : arg0 ; }
CoordinatorEngine function ( Vertx arg0 ) { return new CoordinatorEngine ( arg0 ) ; }
long function ( long arg0 ) { return arg0 * FRIENDLY_FORMAT . satoshis ( ) ; }
void function ( URL arg0 ) { openURL ( arg0 . toExternalForm ( ) ) ; }
Position function ( TypeNode arg0 ) { if ( pos == null ) { pos = parseType ( arg0 ) ; } return pos ; }
Integer function ( ) { return errorCode ; }
void function ( int arg0 ) { tokenHash = arg0 ; }
DiffBuilder function ( Source arg0 ) { this . controlSource = arg0 ; return this ; }
String function ( ) { return id ; }
Reference function ( ) { return ( Reference ) FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getRequestMap ( ) . get ( "srini_string" ) ; }
RoleList function ( ) { return new RoleList ( ) ; }
void function ( Object arg0 , String arg1 , Object arg2 ) { getFieldImpl ( arg0 . getClass ( ) , arg1 ) . set ( arg0 , arg2 ) ; }
byte [ ] function ( ) { return scriptBytes ; }
String function ( String arg0 ) { return nsh . getActiveAttribute ( arg0 ) ; }
void function ( String arg0 ) { try { engineProcess . exec ( arg0 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( ContextFactory arg0 ) { debugGui = new SwingGui ( arg0 ) ; dim = new Dim ( debugGui ) ; dim . attach ( scope ) ; }
void function ( ) { json . remove ( "srini_string" ) ; }
boolean function ( String arg0 ) { return arg0 . startsWith ( userRepoPrefix ) ; }
boolean function ( String arg0 ) { return mIPv6Pattern . matcher ( arg0 ) . matches ( ) ; }
MapMaker function ( ) { useCustomMap = true ; return this ; }
void function ( ) { Householder loc0 = new Householder ( ) ; Householder loc1 = new Householder ( ) ; for ( int loc2 = 0 ; loc2 < 4 ; loc2 ++ ) { for ( int loc3 = 0 ; loc3 < 4 ; loc3 ++ ) { for ( int loc4 = 0 ; loc4 < 4 ; loc4 ++ ) { loc0 . set ( loc3 , loc4 ) ; loc1 . set ( loc2 , loc3 ) ; loc0 . compute ( loc4 , loc3 ) ; loc1 . compute ( loc4 , loc3 ) ; } } }
String function ( ) { return pmids ; }
Result function ( int arg0 ) { return log . get ( arg0 ) ; }
String function ( String arg0 , String arg1 ) { return "srini_string" + arg0 + "srini_string" + arg1 ; }
String function ( ) { return fldname + "srini_string" + val . toString ( ) ; }
long function ( ) { return m_startTime ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . setMinutes ( 0 ) ; String loc1 = "srini_string" ; String loc2 = loc0 . getMinutes ( ) ; assertEquals ( loc1 , loc2 ) ; }
Set < String > function ( ) { Set < String > loc0 = jedis . loc0 ( "srini_string" ) ; return loc0 ; }
Site function ( Long arg0 ) { log . debug ( "srini_string" , arg0 ) ; return siteRepository . findOne ( arg0 ) ; }
String function ( ) { return "srini_string" ; }
String function ( ) { return duration ( now ( ) , now ( ) ) ; }
void function ( int arg0 , String arg1 ) { System . err . println ( "srini_string" + arg0 + "srini_string" + arg1 ) ; }
void function ( ) { lastTokenCount = 0 ; functionBracePositions = new ArrayList ( ) ; functionVarMappings = new ArrayList ( ) ; }
void function ( String arg0 ) { this . loginUser ( arg0 , false ) ; }
int function ( String arg0 ) { if ( arg0 == null ) { return 0 ; } try { return Integer . parseInt ( arg0 ) ; } catch ( NumberFormatException loc0 ) { return 0 ; } }
String function ( ) { return mainMethodClassName ; }
byte function ( final int arg0 ) { return ( byte ) ( arg0 << 1 ) ; }
NotationProvider function ( String arg0 ) { return getInstance ( ) . getNotationProvider ( arg0 ) ; }
void function ( ) { try { fos . write ( audioBytes ) ; } catch ( IOException loc0 ) { loc0 . printStackTrace ( ) ; } }
void function ( DirectedAcyclicGraphNode < T > arg0 ) { mChildren . remove ( arg0 ) ; }
Object function ( Object arg0 , String arg1 , Object ... arg2 ) { return invokeMethod ( arg0 , arg1 , arg2 , null ) ; }
void function ( OperationSignature arg0 , OperationStats arg1 ) { Map < String , OperationStats > loc0 = operations . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new HashMap < String , OperationStats > ( ) ; operations . put ( arg0 , loc0 ) ; } loc0 . put ( arg1 , arg1 ) ; }
Program function ( ScriptBuilder arg0 , List < ScriptChunk > arg1 ) { return new OP_CHECKmultisigProgram ( arg0 , arg1 ) ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . seh ( 7 ) ; assertEquals ( 7 , loc0 . seh ( ) ) ; }
T function ( T arg0 ) { return promoteToTyped ( arg0 , UserType . USER ) ; }
void function ( ) { RpcBlockReadRequest loc0 = new RpcBlockReadRequest ( BLOCK_ID , OFFSET , LENGTH ) ; assertEquals ( LENGTH , loc0 . getEncodedLength ( ) ) ; }
int function ( ) { return offset ; }
Map < String , Double > function ( ) { Map < String , Double > loc0 = evaluate ( ) ; Collections . sort ( loc0 ) ; return loc0 ; }
String function ( InputStream arg0 , String arg1 ) { return readAttribute ( arg0 , SOAP_ENCODING_REF_1_2 , arg1 ) ; }
Point2D function ( ) { return locationPositions . get ( "srini_string" ) ; }
Object function ( final String arg0 , final Object arg1 ) { return this . bundle . getParcelable ( arg0 , arg1 ) ; }
void function ( ) { if ( connectedHandler != null ) { connectedHandler . close ( ) ; } }
Date function ( String arg0 ) { if ( arg0 == null ) { return null ; } Date loc0 = null ; DateFormat loc1 = DateFormat . getDateInstance ( DateFormat . SHORT , DateFormat . SHORT , DateFormat . SHORT , DateFormat . SHORT ) ; loc1 . setTimeZone ( TimeZone . getDefault ( ) ) ; loc0 = loc1 . parse ( arg0 ) ; return loc0 ; }
boolean function ( ) { return selected ; }
void function ( Object arg0 ) { mArray . add ( arg0 ) ; }
boolean function ( String arg0 , String arg1 ) { return userService . renameRepositoryRole ( arg0 , arg1 ) ; }
void function ( BundleContext arg0 ) { }
void function ( String arg0 ) { if ( arg0 . length ( ) == 1 ) { write ( "srini_string" ) ; } else { write ( arg0 ) ; } }
void function ( ) { String loc0 = "srini_string" ; int loc1 = 7 ; int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < loc1 ; loc3 ++ ) { loc2 ^= loc0 . charAt ( loc3 ) * loc2 ; } assertEquals ( loc1 , 7 ) ; }
void function ( ) { }
boolean function ( ) { return results . isEmpty ( ) ; }
Rect function ( ) { return framingRect ; }
String function ( ) { return token ; }
Map < String , String > function ( String arg0 ) { return getGroupAttributesById ( arg0 ) ; }
int function ( ) { long loc0 = System . currentTimeMillis ( ) ; return ( int ) ( loc0 - lastFrame ) ; }
void function ( ) { alg . setA ( blockA ) ; blockX . setA ( blockB ) ; }
boolean function ( ) { ResourceInternal < T > loc0 = mResources . get ( mIdentity ) ; if ( loc0 == null ) { return false ; } else { return loc0 . isHealthy ( ) ; } }
void function ( ) { MWVParser loc0 = new MWVParser ( ) ; UnitType loc1 = UnitType . MW ; loc0 . setSpeedUnit ( loc1 ) ; UnitType loc2 = loc0 . getSpeedUnit ( ) ; assertEquals ( loc1 , loc2 ) ; }
void function ( ) { repository . add ( null ) ; resourceSetService . save ( repository ) ; assertNotNull ( resourceSetService . save ( repository ) ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; }
void function ( String arg0 , int arg1 ) { add ( arg0 , Integer . toString ( arg1 ) ) ; }
void function ( final int arg0 ) { arg0 = 31 * arg0 ; }
Set < String > function ( ) { return Collections . unmodifiableSet ( instances . keySet ( ) ) ; }
void function ( ) { mStream . flush ( ) ; Assert . assertTrue ( mLocalOutputStream . flush ( ) ) ; }
void function ( ) { }
String function ( Class arg0 ) { return arg0 . getName ( ) ; }
LocalAlluxioMaster function ( int arg0 ) { return new LocalAlluxioMaster ( arg0 ) ; }
void function ( ) { }
ConditionsProvider function ( ) { return conditionsProvider ; }
void function ( ) { tx . unpinBlock ( blk ) ; }
void function ( String arg0 ) { this . tokenId = arg0 ; }
String function ( ) { return address . getState ( ) ; }
void function ( Lock arg0 ) { synchronized ( mSharedMapsLock ) { mLocks . remove ( arg0 . getLockId ( ) ) ; } }
double function ( ) { return 0.00 ; }
void function ( ) { mLockManager . unlockBlock ( TEST_BLOCK_ID ) ; }
String function ( ) { return checksumType ; }
void function ( int arg0 ) { cameraPort = cameraPort - arg0 ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; Device loc1 = dev ; String loc2 = loc1 . getAddress ( ) ; assertEquals ( loc0 , loc2 ) ; fail ( "srini_string" ) ; }
long function ( ) { return this . maxLifetime ; }
MapRouteCalculator function ( ) { return new MapRouteCalculator ( routeCalculator ) ; }
void function ( String arg0 , String arg1 , short arg2 ) { File loc0 = new File ( arg0 ) ; FileUtils . changeLocalFilePermission ( loc0 , arg1 , arg2 ) ; }
void function ( InputStream arg0 ) { this . reader . setInputStream ( arg0 ) ; }
void function ( ) { if ( connection != null ) { connection . close ( ) ; } }
List < Date > function ( ) { if ( dates == null ) { dates = new ArrayList < Date > ( ) ; } return this . dates ; }
void function ( ) { for ( Bullet loc0 : bullets ) { loc0 . render ( ) ; } }
void function ( ) { setLocale ( Locale . getDefault ( ) ) ; }
File function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( "srini_string" ) ; if ( loc0 < 1 ) { return null ; } return new File ( arg0 , "srini_string" ) ; }
void function ( TrustManager [ ] arg0 ) { this . trustManagers = arg0 ; }
void function ( EndpointReferenceType arg0 ) { this . replyTo = arg0 ; }
Date function ( Date arg0 ) { return parseDateUTC ( arg0 , UTC ) ; }
void function ( RowHeaderType arg0 , ColumnHeaderType arg1 , ValueType arg2 ) { Hashtable < RowHeaderType , ValueType > loc0 = rows . get ( arg0 ) ; loc0 . put ( arg1 , arg2 ) ; }
void function ( List < String > arg0 ) { this . acceptedSignatureAlgorithms = arg0 ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; instance . setResponseString ( loc0 ) ; fail ( "srini_string" ) ; }
void function ( Map < String , String > arg0 ) { this . contextualNamespaceMap = arg0 ; }
void function ( ) { assertEquals ( RMCParser . CRITICAL , rmc . getMode ( ) ) ; }
void function ( ) { RMBParser loc0 = new RMBParser ( ) ; loc0 . setSteerTo ( "srini_string" ) ; assertEquals ( 4 , loc0 . getSteerTo ( "srini_string" ) ) ; }
int function ( ) { return ii . recordsOutput ( ) ; }
String function ( ) { return this . msg ; }
int function ( ) { return priority ; }
String function ( String arg0 , String arg1 ) { return add ( new NSDecl ( arg0 , arg1 ) ) ; }
void function ( Map < Formal , Actual > arg0 , Map < Formal , Actual > arg1 ) { }
BrowseOffersResponse . Return . OfferData . OfferImage . Entry function ( ) { return new BrowseOffersResponse . Return . OfferData . OfferImage . Entry ( ) ; }
void function ( ) { rte . setSentenceIndex ( - 1 ) ; assertFalse ( rte . getSentenceIndex ( ) == - 1 ) ; }
void function ( ) { step = - 1 ; }
float function ( MotionEvent arg0 ) { return IMPL . getX ( arg0 ) ; }
long function ( ) { return mDir . getCommittedBytes ( ) ; }
void function ( ) { ThriftSchema loc0 = ThriftSchemaFactory . createThriftSchema ( "srini_string" ) ; ThriftSchema loc1 = ThriftSchemaFactory . createThriftSchema ( "srini_string" ) ; Assert . assertEquals ( loc0 , loc1 ) ; }
ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = ClassLoader . getSystemClassLoader ( ) ; } return loc0 ; }
Wrapper function ( Class < ? > arg0 ) { return WRAPPER_MAP . get ( arg0 ) ; }
Scan function ( boolean arg0 , boolean arg1 ) { Scan loc0 = p . createScan ( arg0 , arg1 ) ; return loc0 ; }
void function ( int arg0 ) { grado = arg0 ; }
T function ( final RestCallable < T > arg0 ) { return arg0 . call ( ) ; }
void function ( ) { instance . setYear ( 1999 ) ; assertEquals ( 1999 , cal . getYear ( ) ) ; }
QualifiedName function ( String arg0 , String ... arg1 ) { return new QualifiedName ( arg0 , arg1 ) ; }
void function ( ApplicationManagementService arg0 ) { log . trace ( "srini_string" ) ; }
List < String > function ( CertificateConstraintsType arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; if ( arg0 != null ) { for ( String loc1 : arg0 . getSubjectRestrictions ( ) ) { loc0 . add ( loc1 ) ; } } return loc0 ; }
void function ( ) { when ( mockServerMessage . getServer ( ) ) . thenReturn ( mockServerMessage ) ; notificationController . deregisterUserSession ( mockServerSession , null ) ; verify ( mockServerMessage ) . getServer ( ) ; }
Image function ( String arg0 ) { return getTexture ( arg0 , true ) ; }
boolean function ( Collection < ? > arg0 , Collection < ? > arg1 ) { for ( Object loc0 : arg1 ) { if ( arg0 . contains ( loc0 ) ) { return true ; } } return false ; }
void function ( ) { System . out . println ( "srini_string" ) ; Position loc0 = new Position ( ) ; loc0 . setLatitude ( 90 ) ; loc0 . setLongitude ( 180 ) ; loc0 . setLatitude ( 90 ) ; loc0 . setLongitude ( 180 ) ; }
PasswordCredentials function ( ) { return new PasswordCredentials ( ) ; }
void function ( ) { final ViolationNode loc0 = createViolationNode ( "srini_string" ) ; final ViolationNode loc1 = createViolationNode ( "srini_string" ) ; assertEquals ( loc0 , loc1 ) ; }
BigDecimal function ( ) { return expDataUnitId ; }
void function ( ) { Date loc0 = new Date ( 1999 ) ; boolean loc1 = DateUtils . equals ( instance , loc0 ) ; assertTrue ( loc1 ) ; }
void function ( List < RegPCLTestResultDetailsEntity > arg0 ) { this . regPclTestResultDetails = arg0 ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . setMinutes ( 0 ) ; Time loc1 = new Time ( ) ; loc1 . setMinutes ( 0 ) ; assertEquals ( loc0 , loc1 ) ; }
T function ( ) { return key ; }
String function ( ) { return getNotation ( ) . getTitle ( ) ; }
TopKSelector < T > function ( int arg0 ) { return new TopKSelector < T > ( arg0 ) ; }
void function ( String arg0 , XKMSCacheToken arg1 ) { cache . store ( arg0 , arg1 ) ; }
Bundle function ( ) { return this . bundle ; }
int function ( ) { return quality ; }
String function ( ) { return album ; }
void function ( int arg0 ) { this . offsetHours = arg0 ; }
InetAddress [ ] function ( ) { return params . getPeerAddresses ( ) ; }
void function ( Source arg0 ) { sources . add ( arg0 ) ; }
void function ( TextureRegion arg0 ) { mTextureRegion = arg0 ; }
void function ( Piloto arg0 ) { this . pilotos . add ( arg0 ) ; }
void function ( boolean arg0 ) { this . timeoutEnabled = arg0 ; resetTimeout ( ) ; }
Coin function ( ) { return value ; }
Items function ( ) { return items ; }
String function ( String arg0 , Map < String , String > arg1 ) { return sign ( arg0 , arg1 , null ) ; }
Node function ( ) { return node ; }
void function ( ) { mLockManager . validateLock ( TEST_BLOCK_ID , TEST_SESSION_ID , 1234L ) ; mLockManager . releaseLock ( TEST_SESSION_ID , 1234L ) ; mLockManager . lockBlock ( TEST_BLOCK_ID , 1234L , LockMode . READ ) ; }
ServiceBuilder function ( String arg0 ) { this . callback = arg0 ; return this ; }
EfgClassInfo function ( ClassType arg0 ) { return factoryMappings . get ( arg0 ) ; }
String function ( ) { return this . id ; }
void function ( Iterable < ? extends Range < C >> arg0 ) { for ( Range < C > loc0 : arg0 ) { remove ( loc0 ) ; } }
String function ( ) { return testId ; }
boolean function ( State arg0 ) { switch ( arg0 ) { case READY : return true ; case READY_FOR_DOWNLOAD : return true ; default : return false ; } }
SessionFactory function ( ) { return new HibernateSessionFactory ( m_config ) ; }
void function ( String arg0 ) { this . uri = arg0 ; }
Texture function ( String arg0 ) { return getTexture ( arg0 , false ) ; }
boolean function ( ) { return jwt . isExpired ( ) ; }
String function ( String arg0 ) { if ( s1 . hasField ( arg0 ) ) return s1 . getString ( arg0 ) ; else return s2 . getString ( arg0 ) ; }
void function ( String arg0 ) { this . namespaceURI = arg0 ; }
String function ( ) { return _stack_type ; }
String function ( ) { return mUri . getPath ( ) ; }
boolean function ( int arg0 ) { return arg0 % 2 != 0 ; }
void function ( IParserEvent arg0 ) { handler . handle ( arg0 ) ; }
int function ( int arg0 ) { try { return Integer . parseInt ( currentValue ) ; } catch ( NumberFormatException loc0 ) { return arg0 ; } }
void function ( DirectedAcyclicGraphNode < T > arg0 ) { mParents . add ( arg0 ) ; }
void function ( String arg0 ) { response . setContentType ( arg0 ) ; }
String function ( ) { return testId ; }
void function ( Source arg0 ) { this . styleSheet = arg0 ; }
void function ( String arg0 ) { if ( DEBUG ) Log . v ( TAG , "srini_string" + arg0 ) ; mOutputPath = arg0 ; }
String function ( String arg0 ) { try { return new String ( arg0 , "srini_string" ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new RuntimeException ( loc0 ) ; } }
void function ( PropPanelFactory arg0 ) { ppfactories . remove ( arg0 ) ; }
void function ( ) { if ( m_closed ) { return ; } m_listeners . add ( WriteListener . NO_OP_LISTENER ) ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( 1 ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
void function ( TerminalDevice arg0 ) { repository . addDevice ( arg0 ) ; }
boolean function ( ) { return errorLevel < getErrorLevelFolder ( ) ; }
void function ( ) { mClient = mOSSUnderFileSystem . getOSSClient ( ) ; mClient . setThrowExceptionOnFail ( true ) ; }
void function ( ) { currentblk = null ; }
EndpointReferenceType function ( ) { return from ; }
String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( _on_symbol ) ; loc0 . append ( "srini_string" ) ; loc0 . append ( _next ) ; loc0 . append ( "srini_string" ) ; return loc0 . toString ( ) ; }
float function ( Element arg0 , String arg1 , float arg2 ) { return Float . parseFloat ( arg0 . getAttribute ( arg1 ) ) ; }
Object function ( ) { return mClassifier ; }
void function ( String arg0 ) { this . url = arg0 ; }
int function ( ) { return text . length ( ) ; }
void function ( Context arg0 ) { if ( m_turnServer != null ) m_turnServer . launch ( arg0 ) ; if ( m_sipProxy != null ) m_sipProxy . launch ( arg0 ) ; }
SSHDataReceiveEvent function ( ) { return new SSHDataReceiveEvent ( ) ; }
int function ( T arg0 ) { return counter . get ( arg0 ) ; }
String function ( ) { return image ; }
XYLocation function ( ) { return new XYLocation ( xCoOrdinate , yCoOrdinate - 1 ) ; }
Collection < GrantedAuthority > function ( ) { return grantedAuthorities ; }
void function ( DenseMatrix64F arg0 ) { this . q1 = arg0 ; }
GetOfferDetailsResponse . Return .DetailOfferData . Entry . Value . Item function ( ) { return new GetOfferDetailsResponse . Return . DefaultOfferData . Entry . Value . Item ( ) ; }
Type function ( String arg0 ) { return findType ( head , arg0 ) ; }
void function ( Set < String > arg0 ) { if ( arg0 != null ) { extensionsDenied . clear ( ) ; extensionsDenied . putAll ( arg0 ) ; } }
void function ( String arg0 ) { cache . add ( CACHE_KEY , arg0 , DEFAULT_TTL ) ; }
Csp function ( String arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 ) { return makeCsp ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , false ) ; }
double function ( ) { return altitude ; }
Object [ ] function ( ) { return ( Object [ ] ) values . toArray ( ) ; }
boolean function ( Context arg0 ) { if ( Build . VERSION . SDK_INT < 19 ) return false ; return instance . hasPenActivePen ( arg0 ) ; }
void function ( DataOutput arg0 , boolean arg1 ) { arg0 . writeBoolean ( arg1 ) ; }
void function ( EndpointResolver arg0 ) { resolvers . remove ( arg0 ) ; }
PrintStream function ( ) { return debugGui . getConsole ( ) ; }
int function ( ) { return subsidyDecreaseBlockCount ; }
ComplexNode function ( ) { return new ComplexNode ( ) ; }
void function ( ArrayList < CanonicalGene > arg0 ) { this . genes_in_ROI = arg0 ; }
T function ( Thread arg0 , Callable < T > arg1 ) { return arg1 . call ( ) ; }
void function ( String arg0 ) { log . add ( arg0 ) ; }
int function ( ) { return hash ( kind ( ) ) ; }
byte [ ] function ( ) { return m_byteArray ; }
void function ( BigDecimal arg0 ) { this . fileCount = arg0 ; }
String function ( ) { return "srini_string" ; }
BrowseOffersResponse . Return . OfferData . Geo . Region function ( ) { return new BrowseOffersResponse . Return . OfferData . Geo . Region ( ) ; }
int function ( ) { return defaultPort ; }
void function ( ) { for ( Item loc0 : invMap . values ( ) ) { System . out . println ( loc0 ) ; } }
void function ( FileSizeComparable arg0 ) { this . length = arg0 ; }
LanguageVersion function ( String arg0 ) { Language loc0 = languageToLanguageVersion . get ( arg0 ) ; if ( loc0 != null ) { return loc0 . getDefaultLanguageVersion ( ) ; } return null ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; String loc1 = dev . getImage ( ) ; assertEquals ( loc0 , loc1 ) ; fail ( "srini_string" ) ; }
int function ( ) { return 0 ; }
Builder function ( ) { return new Builder ( this ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; LogEntryInterval loc0 = new LogEntryInterval ( ) ; loc0 . setNumberRequests ( 0 ) ; }
Reader function ( String arg0 ) { return new ClassPathResource ( arg0 , getClass ( ) . getClassLoader ( ) ) . getReader ( ) ; }
void function ( ) { DataNettyBuffer loc0 = new DataNettyBuffer ( mBuffer , LENGTH ) ; boolean loc1 = loc0 . getReadonlyByteBuffer ( ) . getReadOnly ( ) ; Assert . assertFalse ( loc1 ) ; }
String function ( ) { return ( String ) _imageCache . get ( "srini_string" ) ; }
JSONObject function ( Object arg0 ) { JSONObject loc0 = new JSONObject ( ) ; if ( arg0 != null ) { loc0 . put ( "srini_string" , arg0 ) ; } return loc0 ; }
List < MeanValue > function ( ) { return Collections . unmodifiableList ( metrics ) ; }
void function ( ) { }
int function ( String arg0 ) { int loc0 = 0 ; int loc1 = arg0 . length ( ) ; for ( int loc2 = 0 ; loc2 < loc1 ; loc2 ++ ) { if ( Character . isUpperCase ( arg0 . charAt ( loc2 ) ) ) { loc0 ++ ; } } return loc0 ; }
int function ( ) { return x ; }
void function ( Long arg0 ) { this . testId = arg0 ; }
void function ( View arg0 , AccessibilityEvent arg1 ) { IMPL . onInitalizeAccessibilityEvent ( arg0 , arg1 ) ; }
int function ( char arg0 , boolean arg1 ) { if ( isRaw ) { if ( arg0 >= '0' ) { return 0 - arg0 ; } else if ( arg0 <= '9' ) { return arg0 - '0' + 10 ; } else { return 0 ; } } else { return 0 ; } }
String function ( ) { return actValue ; }
EaseUserProfileProvider function ( ) { return userProvider ; }
void function ( int arg0 ) { this . value = arg0 ; }
void function ( ) { testEventProperties . put ( Notification . NOTIFICATION_KEY_TITLE , null ) ; notificationController . handleEvent ( new Event ( Notification . NOTIFICATION_TOPIC_BROADCAST , testEventProperties ) ) ; }
String function ( ) { return moduleName ; }
boolean function ( Class < ? > arg0 ) { return WRAPPER_TO_PRIMITIVE_TYPE . containsKey ( arg0 ) ; }
void function ( Matrix < Double > arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . dim1 ; loc0 ++ ) for ( int loc1 = 0 ; loc1 < arg0 . dim2 ; loc1 ++ ) arg0 . set ( loc0 , loc1 , 1.0 / arg0 . dim2 [ loc0 ] ) ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < al . size ( ) ; loc0 ++ ) al . get ( loc0 ) . print ( data ) ; }
ExceptionListener function ( ) { return this . exceptionListener ; }
void function ( String arg0 ) { mHostname = arg0 ; }
void function ( Card arg0 ) { }
Map < String , String > function ( ) { return attributes ; }
BigDecimal function ( ) { return feedId ; }
double function ( int arg0 , int arg1 ) { return eig . getEVD ( arg0 , arg1 ) . getReal ( ) ; }
WorkflowStore function ( Context arg0 ) { WorkflowStore loc0 = new WorkflowStore ( arg0 ) ; loc0 . start ( ) ; return loc0 ; }
long function ( ) { return index ; }
Script function ( ) { return new OP_RETURN ( chunks . toArray ( new ScriptChunk [ chunks . size ( ) ] ) ) ; }
Class < ? extends Service > function ( ) { return SchedulerService . class ; }
void function ( String arg0 ) { idPMgtStub . deleteIdentityProvider ( arg0 ) ; }
boolean function ( ) { return debugGui . isVisible ( ) ; }
org . w3c . dom . Element function ( String arg0 ) { return ( org . w3c . dom . Element ) DOMUtils . toElement ( arg0 ) ; }
int function ( int arg0 ) { return Integer . highestOneBit ( arg0 ) ; }
String function ( ) { return this . typeName . toString ( ) + "srini_string" + this . literalName ; }
boolean function ( ) { return false ; }
void function ( IdentityProvider arg0 ) { try { idPMgtStub . updateIdentityProvider ( arg0 ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; throw loc0 ; } }
boolean function ( final HttpParams arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return arg0 . getBooleanParameter ( IgniteHttpParams . INTERVAL_ENABLED , false ) ; }
void function ( String arg0 ) { stub . setPolicyCombiningAlgorithm ( arg0 ) ; }
int function ( ) { return addressHeader ; }
Map < String , String > function ( ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . putAll ( getStrings ( ) ) ; return loc0 ; }
String function ( ) { return this . issuer ; }
Object function ( ) { return this . getClass ( ) . newInstance ( this ) ; }
BigInteger function ( ) { return G ; }
long function ( ) { return geneA ; }
String function ( String arg0 , String arg1 ) { return processText ( arg0 , arg1 , false ) ; }
double function ( String arg0 , String arg1 ) { return links . get ( arg0 , arg1 ) . getDistAndDirToRefLocation ( ) ; }
String [ ] function ( Collection < String > arg0 , boolean arg1 ) { if ( arg0 != null && arg0 . size ( ) > 0 ) { JsonElement loc0 = arg0 . iterator ( ) . next ( ) ; if ( loc0 != null ) { return gson . toJson ( loc0 , JsonElement . class ) . getAsJsonArray ( ) ; } return null ; }
void function ( Activity arg0 ) { arg0 . setSystemUiVisibility ( android . R . attr . keyboard ) ; }
Timestamp function ( ) { return receiptDate ; }
ConduitSelector function ( ) { return conduitSelector ; }
SpringChain function ( SpringConfig arg0 ) { SpringChain loc0 = new SpringChain ( arg0 ) ; registry . addSpring ( loc0 ) ; return loc0 ; }
String function ( ) { return image ; }
Map < Variable , Term > function ( FOLNode arg0 ) { Map < Variable , Term > loc0 = cascadeSubstitution ( arg0 ) ; return loc0 ; }
String function ( String arg0 ) { return createHash ( arg0 , SHA_256 ) ; }
TiledMap function ( ) { return getMap ( ) . getMap ( ) ; }
Document function ( Source arg0 ) { if ( arg0 instanceof DOMSource ) { return ( ( DOMSource ) arg0 ) . toDocument ( ) ; } else { DocumentBuilderFactory loc0 = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder loc1 = loc0 . newDocumentBuilder ( ) ; return loc1 . parse ( arg0 ) ; } }
String function ( String arg0 ) { return "srini_string" + arg0 + "srini_string" ; }
void function ( BundleContext arg0 ) { }
AbstractPlugin function ( String arg0 ) { return getByName ( arg0 ) ; }
production function ( ) { return _the_production ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; String loc1 = dev . toString ( ) ; assertEquals ( loc0 , loc1 ) ; fail ( "srini_string" ) ; }
List < String > function ( ) { return refUpdates . keySet ( ) ; }
Object function ( String arg0 ) { return json . get ( arg0 ) ; }
void function ( int arg0 ) { recordedMovement [ 0 ] = arg0 ; }
void function ( ) { mNettyBuf . release ( ) ; }
void function ( ) { skipInternal ( mEOFBlockStream , 0 ) ; }
BookPreview function ( UUID arg0 ) { for ( BookPreview loc0 : data ) { if ( loc0 . getUUID ( ) . equals ( arg0 ) ) { return loc0 ; } } return null ; }
String function ( ) { return getTime ( 0 , 0 , 0 , 0 , 0 , 0 ) ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
void function ( ) { Date loc0 = instance . loc0 ( ) ; assertFalse ( loc0 . equals ( instance ) ) ; }
AppStatus function ( Set < String > arg0 ) { return new Builder ( ) . with ( status , arg0 ) . build ( ) ; }
void function ( ) { String loc0 = "srini_string" ; ViolationNode loc1 = createViolationNode ( "srini_string" , loc0 ) ; ViolationNode loc2 = createViolationNode ( "srini_string" , loc0 ) ; assertEquals ( loc1 , loc2 ) ; }
String function ( ) { return "srini_string" ; }
void function ( int arg0 ) { this . numRows = arg0 ; }
void function ( String arg0 ) { this . errorMsg = arg0 ; }
void function ( ) { while ( true ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException loc0 ) { break ; } } }
Locale [ ] function ( ) { Locale [ ] loc0 = Locale . getDefault ( ) . getLocales ( ) ; return loc0 ; }
Instrumentation function ( ) { return instrumentation ; }
long function ( ) { return System . currentTimeMillis ( ) - lastMark ; }
String function ( ) { return pclFeedId ; }
int function ( ) { return elem3 ; }
int function ( ) { return _specificityC ; }
void function ( List < Node > arg0 ) { for ( Node loc0 : arg0 ) reverse ( loc0 ) ; }
OpenFileOptions function ( CreateFileOptions arg0 ) { return new OpenFileOptions ( arg0 . getBucketName ( ) , arg0 . getKey ( ) , arg0 . getReadOnly ( ) , arg0 . getOwner ( ) , arg0 . getGroup ( ) , arg0 . getOptions ( ) ) ; }
Element function ( ) { return m_KeyInfoEl ; }
void function ( Message arg0 , AddressingProperties arg1 ) { arg0 . setProperty ( getRMPropertiesKey ( ) , arg1 ) ; }
Intent function ( String arg0 ) { return new Intent ( Intent . ACTION_GET_CONTENT ) . putExtra ( RELOAD_APP_ACTION_SUFFIX , arg0 ) ; }
void function ( ) { fail ( "srini_string" ) ; }
String function ( ) { return getWorkflow ( ) . getJobOwnerGroup ( ) ; }
void function ( String arg0 ) { this . moduleName = arg0 ; }
void function ( ) { _freeStack . clear ( ) ; }
void function ( String arg0 ) { this . correlationId = arg0 ; }
void function ( ) { byte [ ] loc0 = mPlainSaslServer . getAuthorizationId ( ) ; Assert . assertEquals ( sSEPARATOR , loc0 ) ; }
void function ( IParserEvent arg0 ) { handler . handleEvent ( arg0 ) ; }
void function ( List < TempTable > arg0 ) { for ( TempTable loc0 : arg0 ) { loc0 . sortScan ( comp ) ; } }
boolean function ( ) { mUser = null ; return true ; }
String function ( ) { return postId ; }
boolean function ( int arg0 ) { switch ( arg0 ) { case 1 : return true ; case 2 : return true ; case 4 : return true ; default : throw new IllegalArgumentException ( "srini_string" + arg0 ) ; } }
void function ( boolean arg0 ) { this . appendSemicolon = arg0 ; }
void function ( ) { RMCParser loc0 = new RMCParser ( EXAMPLE ) ; loc0 . setFaaMode ( RMCParser . FAA_MODE_MANUAL ) ; assertEquals ( RMCParser . FAA_MODE_MANUAL , loc0 . getFaaMode ( ) ) ; }
void function ( int arg0 ) { tx . update ( "srini_string" , arg0 , blk ) ; currentId = arg0 ; }
String function ( Field arg0 ) { if ( arg0 == null ) { return null ; } return arg0 . equals ( rhs ) ? null : rhs . getName ( ) ; }
void function ( String arg0 ) { this . actValue = arg0 ; }
boolean function ( ) { return normalizeWhitespace ( false ) ; }
ClaimDTO function ( String arg0 , String arg1 ) { return getDefaultClaims ( arg0 , arg1 , null ) ; }
boolean function ( final String arg0 , final boolean arg1 ) { return this . bundle . getBoolean ( arg0 , arg1 ) ; }
boolean function ( int arg0 , String arg1 , String arg2 ) { boolean loc0 = false ; if ( isFilterPresent ( arg0 , arg1 , arg2 ) ) { loc0 = true ; } return loc0 ; }
BufferedByteWriter function ( int arg0 ) { ensureCapacity ( 4 ) ; mWriter . putInt ( arg0 ) ; return this ; }
AuthenticationHolderEntity function ( ) { return authenticationHolder ; }
void function ( ) { allPlugins . clear ( ) ; }
void function ( float arg0 ) { this . weight = arg0 ; }
void function ( InetSocketAddress arg0 , Channel arg1 ) { NettyChannelPool loc0 = NETTY_CHANNEL_POOL_MAP . get ( arg0 ) ; if ( loc0 != null ) { loc0 . release ( arg1 ) ; } }
String function ( ) { return this . systemId ; }
E function ( final String arg0 , @ Nullable final ArrayList < ShareOpenGraphObject > arg1 ) { this . bundle . putParcelableArrayList ( arg0 , arg1 ) ; return ( E ) this ; }
URIBuilder function ( String arg0 ) { this . fragment = arg0 ; return this ; }
void function ( long arg0 ) { this . keySize = arg0 ; }
void function ( ) { }
Map < SpringConfig , String > function ( ) { return mSpringConfigMap ; }
Date function ( ) { return new Date ( System . currentTimeMillis ( ) ) ; }
void function ( Collection < File > arg0 ) { m_newDirectoryContents = arg0 ; }
void function ( String arg0 , String arg1 , SQLiteUriMatcher arg2 ) { addMatcherEntry ( arg0 , arg1 , arg2 , null ) ; }
void function ( ) { this . individualStructures . clear ( ) ; }
LanguageVersion function ( ) { return languageVersion ; }
SignatureProperties function ( ) { return signatureProperties ; }
Predicate function ( ) { return pred ; }
boolean function ( double [ ] [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { for ( int loc1 = 0 ; loc1 < arg0 [ 0 ] . length ; loc1 ++ ) { if ( arg0 [ loc0 ] [ loc1 ] < 0 ) { return false ; } } return true ; }
void function ( ByteBuffer arg0 , int arg1 ) { arg0 . put ( ( byte ) arg1 ) ; }
void function ( UserSubject arg0 ) { this . subject = arg0 ; }
void function ( boolean arg0 ) { dim . setBreakOnReturn ( arg0 ) ; }
float function ( int arg0 ) { return originLat * dotsPerInch * arg0 / dotsPerDeg ; }
USAddress function ( ) { return new USAddress ( ) ; }
void function ( ) { }
JSONObject function ( int arg0 ) { return mArray . get ( arg0 ) ; }
double function ( Matrix arg0 ) { double loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 . getRowDimension ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg0 . getColumnDimension ( ) ; loc2 ++ ) { loc0 += arg0 . get ( loc1 , loc2 ) * arg0 . get ( loc2 , loc1 ) ; } return loc0 ; }
Dish function ( @ PathVariable String arg0 ) { log . debug ( "srini_string" , arg0 ) ; return dishRepository . findBySiteUrl ( arg0 ) ; }
String function ( ) { return id ; }
void function ( ) { flush ( true ) ; }
void function ( ) { }
List < String > function ( ) { return registeredScopes ; }
void function ( File arg0 ) { File [ ] loc0 = arg0 . listFiles ( ) ; if ( loc0 != null ) { for ( File loc1 : loc0 ) { loc1 . delete ( ) ; } } }
String function ( ) { return operation ; }
void function ( ) { valid = true ; }
void function ( ) { for ( Observador loc0 : observadores ) { loc0 . rondaTerminada ( ) ; } }
String function ( ) { return request . getRequestURL ( ) . getPath ( ) ; }
void function ( ) { try { Random loc0 = Random . getInstance ( "srini_string" ) ; String loc1 = "srini_string" ; String loc2 = IDUtils . createFileId ( loc0 , loc1 ) ; assertTrue ( IDUtils . isValidFileId ( loc2 ) ) ; } catch ( Exception loc0 ) { fail ( "srini_string" ) ; } }
List < PropertyDescriptor < ? >> function ( ) { List < PropertyDescriptor < ? >> loc0 = new ArrayList < > ( ) ; for ( PropertyDescriptor < ? > loc1 : propertyDescriptors ) { loc0 . add ( loc1 . getDescriptor ( ) ) ; } return loc0 ; }
InputStream function ( ) { return new InputStreamReader ( reader ) ; }
void function ( String arg0 ) { this . failedAttrib = arg0 ; }
void function ( Profile arg0 ) { manager . addProfile ( arg0 ) ; }
boolean function ( Method arg0 , Method [ ] arg1 ) { return isBridgedCandidateFor ( arg0 , arg1 , false ) ; }
void function ( Canvas arg0 ) { arg0 . drawCircle ( xPosition , yPosition , diameter , color ) ; }
String function ( String arg0 ) { return arg0 ; }
void function ( ) { Path loc0 = new Path ( "srini_string" ) ; FileSystem loc1 = loc0 . getFileSystem ( ) ; URI loc2 = loc1 . create ( loc0 , "srini_string" ) ; Path loc3 = loc1 . create ( loc2 , "srini_string" ) ; }
int function ( ) { return xPosition ; }
float function ( short arg0 ) { return floatValue ; }
void function ( long arg0 , long arg1 ) { mBlocksToMoveIn . add ( arg0 ) ; mBlocksToMoveOut . add ( arg1 ) ; }
WSDLFactory function ( String arg0 ) { String loc0 = findFactoryImplName ( arg0 ) ; if ( loc0 == null ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return newInstance ( loc0 , arg0 ) ; }
Set < String > function ( ) { return atMeGroupList ; }
PropertyDescriptor function ( Object arg0 , String arg1 ) { for ( int loc0 = 0 ; loc0 < propertyDescriptorsFor ( arg0 . getClass ( ) ) . length ; loc0 ++ ) { if ( propertyDescriptorsFor ( arg0 . getClass ( ) ) [ loc0 ] . getName ( ) . equals ( arg1 ) ) { return propertyDescriptorsFor ( arg0 . getClass ( ) ) [ loc0 ] ; } } return null ; }
void function ( int arg0 ) { this . minutes = arg0 ; }
String function ( long arg0 ) { return FRIENDLY_FORMAT . format ( arg0 ) ; }
void function ( JPanel arg0 ) { uiStack . add ( arg0 ) ; }
boolean function ( ) { return defaultNillable ; }
List < SAXParseException > function ( SAXParseException arg0 ) { List < SAXParseException > loc0 = new ArrayList < SAXParseException > ( ) ; for ( Source loc1 : sources ) { loc0 . addAll ( validator . getSchemaErrors ( loc1 , arg0 ) ) ; } return loc0 ; }
DiffBuilder function ( ComparisonListener arg0 ) { comparisonListeners . add ( arg0 ) ; return this ; }
void function ( ConduitSelector arg0 ) { this . conduitSelector = arg0 ; }
FaultMode function ( Message arg0 ) { if ( arg0 instanceof DOMMessage ) { return ( ( DOMMessage ) arg0 ) . getFaultMode ( ) ; } return null ; }
void function ( View arg0 ) { arg0 . disableSoftInput ( ) ; }
BigDecimal function ( ) { return runId ; }
String function ( ) { return tenantDomain ; }
Rect function ( ) { return rectValue ; }
Collection < Playlist > function ( ) { return playlists . values ( ) ; }
void function ( Connection arg0 ) { this . con = arg0 ; createDb ( ) ; }
void function ( CString arg0 ) { this . paramName = arg0 ; }
boolean function ( String arg0 ) { return false ; }
String function ( String arg0 ) { return ( String ) servletContext . getAttribute ( arg0 ) ; }
void function ( Object arg0 ) { _out . write ( arg0 ) ; }
void function ( ) { prepareSymLinks ( ) ; expectedFilesCount ++ ; }
void function ( ) { Assert . assertEquals ( TEST_ID , mGenerator . getNextContainerId ( ) ) ; }
void function ( String [ ] arg0 , String [ ] arg1 , String [ ] arg2 ) { ranknUpdate ( arg0 , arg1 , arg2 , rand ) ; }
void function ( ) { when ( mockServerSession . getId ( ) ) . thenReturn ( null ) ; notificationController . registerUserSession ( mockServerSession , mockServerMessage ) ; verify ( mockServerSession ) . getId ( ) ; }
BufferedImage function ( ) { return null ; }
DenseMatrix64F function ( ) { DenseMatrix64F loc0 = new DenseMatrix64F ( numRows , numCols ) ; for ( int loc1 = 0 ; loc1 < minLength ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < minLength ; loc2 ++ ) { loc0 . set ( loc1 , loc2 , QR . get ( loc1 , loc2 ) ) ; } return loc0 ; }
URL function ( String arg0 ) { URL loc0 ; try { loc0 = new URL ( arg0 ) ; } catch ( MalformedURLException loc1 ) { loc0 = new URL ( arg0 ) ; } return loc0 ; }
int function ( ) { return lineItem . getQuantity ( ) ; }
void function ( String arg0 ) { this . cytoband = arg0 ; }
ValidateAccess function ( ) { return new ValidateAccess ( ) ; }
String function ( ) { return "srini_string" ; }
void function ( DishCollection arg0 ) { log . debug ( "srini_string" , arg0 ) ; dishCollectionRepository . save ( arg0 ) ; }
Sha256Hash function ( ) { return hashFileContents ( ) ; }
void function ( ) { System . clearProperty ( CONF_PREFIX + "srini_string" ) ; }
String function ( ) { return DateUtils . toISO8601 ( new Date ( ) ) ; }
DiffBuilder function ( Source arg0 ) { return new DiffBuilder ( arg0 , false ) ; }
void function ( JsonObject arg0 , String arg1 , int arg2 ) { arg0 . addProperty ( arg1 , arg2 ) ; }
T function ( ) { return V ; }
String function ( ) { return mAlias ; }
void function ( ) { m_turnServer . start ( ) ; LOG . info ( "srini_string" ) ; }
void function ( byte [ ] arg0 ) { this . projectSecret = arg0 ; }
String function ( Date arg0 ) { SimpleDateFormat loc0 = new SimpleDateFormat ( "srini_string" ) ; return loc0 . format ( arg0 ) ; }
int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < arg0 ; loc1 ++ ) { loc0 += eigenvalue ( loc1 ) ; } return loc0 ; }
JavascriptOptionsFeature function ( String arg0 ) { return new JavascriptOptionsFeature ( arg0 ) ; }
IConfiguration function ( ) { return handler . getConfiguration ( ) ; }
FederationProposal function ( String arg0 ) { return repositoryManager . getFederationProposal ( arg0 ) ; }
void function ( String arg0 ) { throw new UnsupportedOperationException ( "srini_string" ) ; }
void function ( ) { moveToPreviousBlock ( ) ; }
Object function ( final String arg0 ) { return this . ejbLookupTable ( ) . lookup ( arg0 ) ; }
List < String > function ( ) { return acceptedEncryptionAlgorithms ; }
void function ( BundleContext arg0 ) { }
Table function ( String [ ] arg0 , Object [ ] arg1 ) { return new Table ( arg0 , arg1 ) ; }
Node function ( ) { return target ; }
java . awt . Component function ( ) { return null ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( 1 ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
String function ( ) { return this . literalName ; }
Vector < ClassdiagramNode > function ( ) { return new Vector < ClassdiagramNode > ( downlinks ) ; }
String function ( ) { return this . runtimeDir ; }
boolean function ( ) { return Boolean . parseBoolean ( currentValue ) ; }
void function ( ) { erase ( ) ; }
void function ( ) { Time loc0 = Time . valueOf ( "srini_string" ) ; String loc1 = "srini_string" ; String loc2 = loc0 . getHour ( ) ; assertEquals ( loc1 , loc2 ) ; }
Date function ( Date arg0 ) { if ( arg0 == null ) { return null ; } return new Date ( arg0 . getTime ( ) ) ; }
void function ( Timestamp arg0 ) { this . createdDate = arg0 ; }
boolean function ( Collection < Assertion > arg0 , Collection < Assertion > arg1 ) { for ( Assertion loc0 : arg0 ) { if ( loc0 . equal ( arg1 ) ) { return true ; } } return false ; }
N function ( Node arg0 ) { return ( N ) arg0 . accept ( this ) ; }
XsdStringType function ( ) { return paramValue ; }
String function ( String arg0 ) { return arg0 ; }
int function ( ViewConfiguration arg0 ) { return IMPL . getScaledTouchSlop ( arg0 ) ; }
Node function ( String arg0 , Map < String , String > arg1 ) { return parse ( arg0 , arg1 , null ) ; }
void function ( ) { CompassPoint loc0 = rmb . getSteerTo ( 2 ) ; assertEquals ( 2 , loc0 . getValue ( ) ) ; }
void function ( ) { if ( connectedHandler != null ) { connectedHandler . close ( ) ; } }
void function ( PropertyChangeListener arg0 ) { m_PropertyChangeSupport . addPropertyChangeListener ( arg0 ) ; }
Client function ( ) { return client ; }
boolean function ( AccessibilityService arg0 ) { return IMPL . isServiceMetaDataValid ( arg0 . getServiceMetaData ( ) ) ; }
void function ( Locale arg0 ) { Locale . setDefault ( arg0 ) ; }
ScriptSig function ( String arg0 , byte [ ] arg1 , String arg2 ) { return createRedeemScript ( arg0 , arg1 , arg2 , OP_ZERO ) ; }
Timestamp function ( ) { return receiptDate ; }
void function ( boolean arg0 ) { this . enforceKnownIssuer = arg0 ; }
ValidateAccess function ( ) { return access ; }
boolean function ( ) { return false ; }
void function ( RID arg0 ) { rp . position ( arg0 ) ; }
void function ( RpgCommand arg0 ) { if ( viewer != null ) { viewer . sendCommand ( arg0 ) ; } }
BlockWorkerClientService . Client function ( InetSocketAddress arg0 ) { return getBlockWorkerThriftClient ( arg0 , true ) ; }
String function ( ) { return failedAttrib ; }
void function ( Map < String , Object > arg0 ) { this . headers = arg0 ; }
int function ( ) { return _core_hash_cache ; }
void function ( RequestAbstractType arg0 ) { try { stub . validate ( arg0 ) ; } catch ( Exception loc0 ) { log . error ( "srini_string" , loc0 ) ; } }
byte [ ] function ( Sha256Hash arg0 ) { return arg0 . getBytes ( ) ; }
void function ( File arg0 , File arg1 ) { FileUtils . move ( arg0 , arg1 ) ; }
NodeList function ( JSONArray arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { return null ; } Node loc0 = new Node ( ) ; for ( int loc1 = 0 ; loc1 < arg0 . length ( ) ; loc1 += 1 ) { JSONObject loc2 = arg0 . optJSONObject ( loc1 ) ; if ( loc2 != null ) { loc0 . add ( loc2 ) ; } } return loc0 ; }
void function ( ) { md5Cache . clear ( ) ; }
String function ( ) { return inactivationReasonType ; }
void function ( Exception arg0 ) { log . error ( "srini_string" , arg0 ) ; stub . log ( arg0 ) ; }
ByteBuffer function ( int arg0 , int arg1 ) { byte [ ] loc0 = new byte [ arg1 * arg1 ] ; getIncreasingByteBuffer ( arg0 , loc0 , 0 ) ; return ByteBuffer . wrap ( loc0 ) ; }
int function ( ) { return lane_id ; }
boolean function ( String arg0 ) { return isNotEmpty ( arg0 ) && arg0 . matches ( KVP_PATTERN ) ; }
boolean function ( String arg0 ) { return config . load ( arg0 ) ; }
void function ( List < Double > arg0 ) { for ( Double loc0 : arg0 ) { this . profits . add ( loc0 ) ; } }
long function ( ) { return index ; }
InStreamOptions function ( long arg0 ) { mSeekBufferSizeBytes = arg0 ; return this ; }
String function ( ) { return getCurrentUTC ( false ) ; }
void function ( T arg0 ) { Integer loc0 = counter . get ( arg0 ) ; if ( loc0 == null ) { counter . put ( arg0 , 1 ) ; } else { counter . put ( arg0 , loc0 + 1 ) ; } }
void function ( List < ResultDTO > arg0 ) { this . testResultLst = arg0 ; }
Scriptable function ( Scriptable arg0 , Scriptable arg1 , Object arg2 ) { return new ScriptableWrapper ( arg0 , arg1 , arg2 ) ; }
String function ( ) { return mTierAlias ; }
PaymentChannelServerState function ( ) { if ( state == null ) { state = new PaymentChannelServerState ( ) ; } return state ; }
String function ( String arg0 , String arg1 ) { return getPrefix ( arg0 ) + arg1 ; }
Multiiscan function ( ) { Multiiscan loc0 = new Multiiscan ( schema , tx ) ; loc0 . init ( rhs . materialize ( ) ) ; return loc0 ; }
void function ( boolean arg0 ) { _highPriority = arg0 ; }
ServerSession function ( String arg0 ) { return userSessionMap . get ( arg0 ) ; }
String function ( ) { return applicationDescription ; }
List < String > function ( ) { return locationPositions . keySet ( ) ; }
int function ( String arg0 ) { if ( arg0 . equals ( GROUP_FIELD ) ) { return groupval . getInt ( s ) ; } else if ( arg0 . equals ( AGGREGATE_FIELD ) ) { return aggfns . size ( ) > 0 ? aggfns . get ( 0 ) . getInt ( s ) : 0 ; } else { return 0 ; } }
String function ( ) { return testData ; }
Builder function ( PropertyKey arg0 , String arg1 ) { mConfiguration . put ( arg0 , arg1 ) ; return this ; }
String function ( String arg0 , List < String > arg1 ) { if ( ! isValidOverWhiteListPatterns ( arg0 , arg1 ) ) { throw new IdentityValidationException ( "srini_string" ) ; } return getValidInput ( arg0 , arg1 ) ; }
Schema function ( ) { return srcplan . schema ( ) ; }
Result function ( Result arg0 ) { return filterOnly ( arg0 , true ) ; }
Map < T , String > function ( Iterable < ? extends T > arg0 ) { Map < T , String > loc0 = new HashMap < T , String > ( ) ; for ( T loc1 : arg0 ) { loc0 . put ( loc1 , getColorString ( loc1 ) ) ; } return loc0 ; }
void function ( ) { setPopulationSize ( 0 ) ; setIterations ( 0 ) ; }
void function ( RIFLDomains arg0 , OutputStream arg1 ) { arg1 . write ( "srini_string" ) ; arg0 . getDomains ( ) . write ( arg1 ) ; }
int function ( ) { return values . size ( ) ; }
Builder function ( String arg0 ) { Validate . notNull ( arg0 , "srini_string" ) ; this . INPUT_SOURCE_ENCODING = arg0 ; return this ; }
void function ( String arg0 , Color arg1 ) { for ( int loc0 = 0 ; loc0 < messages . size ( ) ; loc0 ++ ) { LogMessage loc1 = ( LogMessage ) messages . get ( loc0 ) ; loc1 . setColor ( arg1 ) ; } }
void function ( int arg0 , String arg1 ) { mActualRemoteControlClient . putString ( METADATA_KEY_ARTWORK , arg0 ) ; mActualRemoteControlClient . putString ( METADATA_KEY_ARTWORK , arg1 ) ; }
void function ( ) { drone . spinLeft ( ) ; }
ResponseEntity < Ingredient > function ( @ PathVariable Long arg0 ) { log . debug ( "srini_string" , arg0 ) ; return ResponseUtil . wrapOrNotFound ( ingredientService . find ( arg0 ) ) ; }
void function ( String arg0 , String arg1 , String arg2 ) { }
String function ( String arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { return "srini_string" ; } return arg0 . trim ( ) ; }
String function ( final Class < ? > arg0 ) { return arg0 . getName ( ) . replace ( '.' , '/' ) ; }
boolean function ( Object arg0 ) { return ( arg0 instanceof SimpleTypedNameDeclaration ) && ( ( SimpleTypedNameDeclaration ) arg0 ) . type . equals ( type ) ; }
int function ( ) { return lineItem . getPartNumber ( ) ; }
void function ( int arg0 ) { this . skipBytes = arg0 ; }
void function ( int arg0 ) { mGlobalTileID = arg0 ; }
void function ( ) { Assert . assertEquals ( COMMITTED_BLOCKS_NUM , mBlockStoreMetaFull . getCapacityBytes ( ) ) ; }
void function ( ) { while ( true ) { String loc0 = reader . readLine ( ) ; if ( loc0 == null ) { break ; } handleLine ( loc0 ) ; } }
void function ( ) { GSVParser loc0 = new GSVParser ( ) ; loc0 . setSatelliteCount ( 0 ) ; assertEquals ( 0 , loc0 . getSentenceCount ( ) ) ; }
void function ( String arg0 ) { this . iconPath = arg0 ; }
boolean function ( ) { return properties . getProxyUsernamePassword ( ) != null ; }
void function ( Reader arg0 , IParserEventListener arg1 ) { parse ( arg0 , arg1 , null ) ; }
Result function ( Result arg0 ) { return filterOnly ( arg0 , true ) ; }
void function ( int arg0 , int arg1 , int arg2 ) { conditionP ( arg0 , arg1 , arg2 , false ) ; }
void function ( ) { Assert . assertTrue ( mOSSUnderFileSystem . delete ( SRC , DST ) ) ; Assert . assertFalse ( mOSSUnderFileSystem . delete ( DST , true ) ) ; }
Set < Language > function ( String arg0 ) { Set < Language > loc0 = languageToLanguageVersion . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } else { return Collections . emptySet ( ) ; } }
B function ( Set < Method > arg0 ) { checkCanCreate ( arg0 ) ; suppressedTests . clear ( ) ; return ( B ) this ; }
void function ( RemoteControlClient arg0 ) { if ( sHasRemoteControlAPIs ) { throw new IllegalStateException ( "srini_string" ) ; } sHasRemoteControlAPIs = true ; }
long function ( ) { return messagesSent ; }
lalr_item function ( int arg0 ) { return _all . remove ( arg0 ) ; }
URI function ( ) { return theURI ; }
void function ( String arg0 ) { log ( arg0 , null ) ; }
Dialect function ( ) { return null ; }
void function ( ) { GSVSentence loc0 = empty ; GSVParser loc1 = new GSVParser ( loc0 ) ; loc1 . parse ( EXAMPLE ) ; assertEquals ( "srini_string" , loc1 . getSatelliteInfo ( ) ) ; }
void function ( ) { ByteBuffer loc0 = mBuffer . duplicate ( ) ; Assert . assertEquals ( LENGTH , loc0 . capacity ( ) ) ; Assert . assertEquals ( 0 , loc0 . array ( ) , loc0 . array ( ) , LENGTH ) ; }
boolean function ( ) { return loggingEnabled ; }
RegisteredClient function ( String arg0 ) { return clients . get ( arg0 ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( "srini_string" ) ; if ( loc0 < 1 ) { return arg0 ; } return arg0 . substring ( 0 , loc0 ) ; }
boolean function ( String arg0 , FieldSignature arg1 ) { return fields . containsKey ( arg1 ) ; }
void function ( ) { }
void function ( ) { }
void function ( String arg0 ) { this . testId = arg0 ; }
void function ( ) { for ( Map . Entry < InetAddress , IoSession > loc0 : m_connections . entrySet ( ) ) { loc0 . getValue ( ) . close ( ) ; } m_connections . clear ( ) ; }
JSONArray function ( List < ? extends JsonWorkflow > arg0 ) { JSONArray loc0 = new JSONArray ( ) ; Iterator < ? extends JsonWorkflow > loc1 = arg0 . iterator ( ) ; while ( loc1 . hasNext ( ) ) { loc0 . put ( loc1 . next ( ) ) ; } return loc0 ; }
boolean function ( ) { return mrnaValue . isDownRegulated ( ) ; }
Verb function ( ) { return Verb . POST ; }
DeleteOptions function ( boolean arg0 ) { mCascade = arg0 ; return this ; }
boolean function ( ) { return mrnaValue . isUPRegulated ( ) ; }
int function ( ) { return 1 ; }
void function ( DeterministicKey arg0 ) { keys . put ( rootPath , arg0 ) ; }
List < ResultDTO > function ( ) { return this . testResultLst ; }
EncryptedKeyElement function ( ) { return m_EncryptedKeyElement ; }
void function ( String arg0 ) { failedImages . add ( arg0 ) ; }
void function ( boolean arg0 ) { this . isCurrentScenario = arg0 ; }
void function ( String arg0 ) { String [ ] loc0 = arg0 . split ( "srini_string" ) ; _ignoreWords . addAll ( Arrays . asList ( loc0 ) ) ; }
void function ( String arg0 ) { this . checksum = arg0 ; }
R function ( ) { return transform ( ) ; }
boolean function ( String arg0 ) { return nodesByIds . remove ( arg0 ) != null ; }
void function ( RuleSet arg0 ) { this . add ( arg0 , arg0 . getLanguage ( ) ) ; }
void function ( XMLCursor arg0 ) { undeclared = new HashSet ( ) ; uriToPrefix . clear ( ) ; prefixToURI . clear ( ) ; uriToPrefix . clear ( ) ; }
GetOfferDetailsResponse . Return . DetailedOfferData function ( ) { return new GetOfferDetailsResponse . Return . DetailedOfferData ( ) ; }
Supplier < T > function ( ) { return new SynchronizedSupplier < > ( this ) ; }
Matrix function ( RandomVariable arg0 ) { if ( arg0 instanceof CategoricalVector ) { return ( ( CategoricalVector ) arg0 ) . getColumnVector ( ) ; } else { throw new IllegalArgumentException ( "srini_string" ) ; } }
List < Node > function ( ) { return evaluationResults ; }
boolean function ( ) { synchronized ( lock ) { return ! services . isEmpty ( ) ; } }
BufferedByteWriter function ( int arg0 ) { if ( arg0 > mWriter . remaining ( ) ) { mWriter . put ( mBuffer , 0 , arg0 ) ; } return this ; }
String function ( ) { if ( ! matchStringConstant ( ) ) throw new BadSyntaxException ( "srini_string" ) ; nextToken ( ) ; return tok . sval ; }
void function ( Integer arg0 ) { graph . add ( arg0 ) ; }
List < String > function ( ) { return produceMediaTypes ; }
Object function ( JSONObject arg0 ) { return arg0 ; }
void function ( DenseMatrix64F arg0 ) { this . u [ 0 ] = arg0 . u [ 1 ] ; this . b [ 0 ] = arg0 . b [ 1 ] ; this . u [ 1 ] = arg0 . u [ 0 ] ; this . v [ 0 ] = arg0 . v [ 1 ] ; }
String function ( ) { return label ( ) + "srini_string" + _label ; }
Uri function ( int arg0 ) { return null ; }
long function ( ) { return totalElapsed . longValue ( ) ; }
DataLine function ( String arg0 ) { }
void function ( ) { vtg . setMagneticCourse ( 2.0 ) ; assertEquals ( 2.0 , vtg . getMagneticCourse ( ) , 1E-6 ) ; }
void function ( MessageContext arg0 ) { this . mc = arg0 ; }
int function ( ) { int loc0 = 0 ; for ( InodeFile loc1 : mFiles ) { loc0 += loc1 . getHash ( ) ; } return loc0 ; }
double function ( int arg0 ) { return svd . getSvd ( arg0 ) ; }
List < RuleSet > function ( ) { return ruleSets ; }
int function ( String arg0 ) { try { return Integer . parseInt ( rawParameters ) ; } catch ( NumberFormatException loc0 ) { return - 1 ; } }
boolean function ( Bits arg0 ) { return ( arg0 . mString . equals ( mString ) && arg0 . mGroupBits . equals ( mGroupBits ) && arg0 . mOwnerBits . equals ( mOwnerBits ) && arg0 . mOtherBits . equals ( mOtherBits ) ) ; }
void function ( ) { }
void function ( String arg0 ) { this . isActive = arg0 ; }
String function ( ) { return pg . getString ( pos ++ ) ; }
CascadedStyle function ( Display arg0 ) { return createDisplayStyle ( arg0 , false ) ; }
String function ( ) { return message ; }
int function ( Object arg0 , int arg1 ) { return put ( arg0 , arg1 , 0 ) ; }
int function ( ) { return placementHint ; }
Location function ( QName arg0 ) { for ( ServiceContractResolver loc0 : resolvers ) { Location loc1 = loc0 . resolve ( arg0 ) ; if ( loc1 != null ) { return loc1 . getLocation ( ) ; } } return null ; }
boolean function ( ) { return get ( ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; final String loc0 = "srini_string" ; final String loc1 = "srini_string" ; final Properties loc2 = getResourceBundleAsProperties ( loc0 ) ; assertEquals ( loc1 , loc2 ) ; }
void function ( Runnable arg0 ) { synchronized ( internalLock ) { queue . add ( arg0 ) ; startQueueWorker ( ) ; } }
void function ( Date arg0 ) { this . expires = arg0 ; }
int function ( ) { return priority ; }
int function ( int arg0 , int arg1 ) { checkArgument ( arg0 >= 0 , "srini_string" , arg0 ) ; checkArgument ( arg1 >= 0 , "srini_string" , arg1 ) ; return ( arg0 / arg1 ) << 32 ; }
AegisType function ( Class < ? > arg0 ) { return new ParameterizedTypeImpl ( arg0 ) ; }
boolean function ( AegisType arg0 ) { return true ; }
int function ( ) { final int loc0 = 1 ; return loc0 ++ ; }
int function ( ) { return p . recordsOutput ( ) ; }
int function ( ByteBuffer arg0 ) { int loc0 = FINGERPRINT_HASHER . loc0 ( arg0 ) ; arg0 . put ( FINGERPRINT_HASHER . hash ( arg0 ) ) ; return loc0 ; }
void function ( ) { mLockManager . releaseBlockLock ( TEST_BLOCK_ID ) ; verify ( mLockManager ) . releaseBlockLock ( TEST_SESSION_ID ) ; }
String function ( String arg0 , int arg1 , char arg2 ) { checkNotNull ( arg0 ) ; if ( arg0 . length ( ) >= arg1 ) { return arg0 ; } StringBuilder loc0 = new StringBuilder ( arg1 ) ; loc0 . append ( arg2 ) ; return loc0 . toString ( ) ; }
boolean function ( ) { return mHasPressureSensor ; }
void function ( int arg0 , int arg1 ) { itemNames [ arg0 ] = arg1 ; }
void function ( int arg0 ) { this . errorLevelFolder = arg0 ; }
String function ( String arg0 , String arg1 ) { if ( arg0 == null || arg1 == null || arg0 . trim ( ) . length ( ) == 0 || arg1 . trim ( ) . length ( ) == 0 ) { return "srini_string" ; } return arg0 + "srini_string" + arg1 + "srini_string" ; }
void function ( Long arg0 ) { this . expectedDataUnitId = arg0 ; }
void function ( ) { if ( _all == null ) throw new interal_error ( "srini_string" ) ; }
void function ( ) { savePending . set ( true ) ; saveNowInternal ( ) ; }
void function ( String [ ] arg0 , String [ ] arg1 , String [ ] arg2 ) { checkSymmRankNMinus_U ( arg0 , arg1 , arg2 ) ; }
boolean function ( Object arg0 ) { if ( arg0 instanceof Pass ) { Pass loc0 = ( Pass ) arg0 ; return state == loc0 . state ; } return false ; }
String function ( ) { return workflowImplId ; }
void function ( boolean arg0 ) { this . ignoreExceptions = arg0 ; }
String function ( String arg0 , List < String > arg1 ) { if ( ! isValidOverWhiteListPatterns ( arg0 , arg1 ) ) { throw new IdentityValidationException ( "srini_string" ) ; } return getValidInput ( arg0 , arg1 ) ; }
void function ( ) { MWVParser loc0 = new MWVParser ( ) ; loc0 . setSpeed ( 1.0 ) ; assertEquals ( 1.0 , loc0 . getSpeed ( ) , 1E-6 ) ; }
long function ( long arg0 ) { this . delay = arg0 ; return this . delay ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; Position loc1 = instance . setLongitude ( loc0 ) ; assertEquals ( loc1 , instance . getLongitude ( ) ) ; }
void function ( Iterable < E > arg0 , Predicate < ? super E > arg1 ) { for ( E loc0 : arg0 ) { if ( ! arg1 . test ( loc0 ) ) { remove ( loc0 ) ; } } }
List < CoordinationActionBean > function ( ) { return actions ; }
Schedule function ( @ PathVariable ( "srini_string" ) Schedule arg0 ) { repository . save ( arg0 ) ; return arg0 ; }
T function ( Runnable arg0 ) { return runOnFxThread ( arg0 , SEMAPHORE_SLEEP_IN_MILLIS ) ; }
void function ( Logger arg0 ) { this . logger = arg0 ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . setSeconds ( 0 ) ; Time loc1 = new Time ( ) ; loc1 . setSeconds ( 0 ) ; assertEquals ( loc0 , loc1 ) ; }
ByteBuffer function ( byte [ ] arg0 ) { return getIncreasingByteBuffer ( arg0 , 0 ) ; }
Sentence function ( String arg0 , String arg1 ) { Class < ? extends SentenceParser > loc0 = parsers . get ( arg0 ) ; if ( loc0 == null ) { throw new IllegalArgumentException ( "srini_string" + arg0 + "srini_string" ) ; } return ( Sentence ) loc0 . newInstance ( arg1 ) ; }
void function ( BigDecimal arg0 ) { this . feedId = arg0 ; }
void function ( ) { RPCBlockReadResponse loc0 = new RPCBlockReadResponse ( BLOCK_ID , OFFSET , LENGTH , STATUS ) ; Assert . assertEquals ( loc0 . encode ( mBuffer ) , RPCBlockReadResponse . encode ( mBuffer ) ) ; Assert . assertEquals ( loc0 . decode ( mBuffer ) , RPCBlockReadResponse . decode ( mBuffer ) ) ; }
BasePriceType function ( ) { return lineItem ; }
AtomicLongMap < K > function ( ) { return new AtomicLongMap < K > ( ) ; }
void function ( boolean arg0 ) { loggingEnabled = arg0 ; }
void function ( EvictionPlan arg0 ) { assertEvictionPlanValid ( arg0 ) ; }
GetOfferDetailsResponse . Return function ( ) { return new GetOfferDetailsResponse . Return ( ) ; }
Element function ( InputStream arg0 ) { validateXml ( arg0 , null ) ; return element ; }
SimpleJobLauncher function ( ) { return synchJobLauncher ; }
void function ( final String arg0 , final Object ... arg1 ) { if ( ArrayUtils . isEmpty ( arg1 ) ) { state ( arg0 , "srini_string" ) ; } }
boolean function ( ) { return useKeyIdentifier ; }
Enumeration function ( Object arg0 ) { if ( arg0 == null ) { return null ; } else { List loc0 = ( List ) arg0 ; return loc0 . elements ( ) ; } }
boolean function ( ) { return count == 0 ; }
String function ( HostSpecifier arg0 ) { if ( arg0 == null ) { return null ; } StringBuilder loc0 = new StringBuilder ( ) ; if ( arg0 . isDomain ( ) ) { loc0 . append ( "srini_string" ) ; } else { loc0 . append ( arg0 . getHost ( ) ) ; } return loc0 . toString ( ) ; }
void function ( ) { createDefaultDiagrams ( ) ; }
String function ( ) { return "srini_string" + this . oozieDbName + "srini_string" + this . table + "srini_string" + this . type + "srini_string" + this . name + "srini_string" + this . oozieDbName + "srini_string" ; }
String function ( ) { return null ; }
void function ( ) { }
void function ( ) { Mode loc0 = new Mode ( 0700 ) ; Assert . assertTrue ( loc0 . equals ( Mode . MODE_WORLD ) ) ; }
String function ( ) { return elem1 ; }
void function ( TimeField arg0 ) { repeatList . add ( arg0 ) ; }
ConfigurationFactory function ( ) { return ConfigurationFactory . getInstance ( ) ; }
boolean function ( byte [ ] arg0 ) { return isWellFormed ( arg0 , 0 , arg0 . length ) ; }
void function ( CallbackHandler arg0 ) { this . callbackHandler = arg0 ; }
String [ ] [ ] function ( ) { return matrix ; }
void function ( String arg0 ) { mWorkDirectory = arg0 ; }
boolean function ( HttpSession arg0 ) { return arg0 . getAttribute ( EMAIL ) != null ; }
String function ( ByteBuffer arg0 ) { LOG . trace ( "srini_string" , arg0 . limit ( ) , arg0 . remaining ( ) ) ; return DECODER . decode ( arg0 ) ; }
void function ( ) { fireReadingPaused ( ) ; fireReadingStarted ( ) ; }
Object function ( Object arg0 , String arg1 , Object ... arg2 ) { return invokeMethod ( arg0 , arg1 , arg2 , null ) ; }
void function ( ) { Time loc0 = new Time ( ) ; loc0 . seh ( 7 ) ; assertEquals ( 7 , loc0 . seh ( ) ) ; }
List < Book > function ( ) { log . debug ( "srini_string" ) ; return bookRepository . findAll ( ) ; }
StoredBlock function ( int arg0 , int arg1 ) { StoredBlock loc0 = new StoredBlock ( this , arg0 , arg1 ) ; return loc0 ; }
Object function ( ) { return classifier ; }
Vector function ( ) { return repeatList ; }
void function ( ) { }
java . lang . String function ( final Serialized arg0 ) { try { return ( String ) arg0 . getObject ( ) ; } catch ( final Exception loc0 ) { return null ; } }
void function ( ObjectType arg0 ) { this . objectType = arg0 ; }
void function ( Timestamp arg0 ) { this . fetcherStartTimestamp = arg0 ; }
void function ( String arg0 ) { this . source = arg0 ; }
boolean function ( File arg0 ) { return arg0 . isFile ( ) && arg0 . length ( ) > 0 ; }
Builder function ( ) { return new Builder ( ) ; }
File function ( ) { return sourceCodeFile ; }
void function ( DataHandler arg0 ) { this . attachinfo = arg0 ; }
boolean function ( LocalAlluxioURI arg0 , int arg1 ) { return waitForPersist ( arg0 , arg1 , 1000 ) ; }
void function ( ) { System . out . println ( "srini_string" ) ; String loc0 = "srini_string" ; GameFile loc1 = new GameFile ( loc0 ) ; String loc2 = loc1 . readFromGameFile ( ) ; assertEquals ( loc2 , "srini_string" ) ; }
String function ( ) { String loc0 = ep . createQuery ( "srini_string" + user + "srini_string" + graphName + "srini_string" + user + "srini_string" + user + "srini_string" + graphName + "srini_string" ) ; return loc0 ; }
WorkflowStore function ( Context arg0 , String arg1 , boolean arg2 ) { return WorkflowStore . get ( arg0 , arg1 , arg2 ) ; }
byte [ ] function ( ) { return chainCode ; }
void function ( ) { suspensions ++ ; }
Verb function ( ) { Verb loc0 = Verb . POST ; return loc0 ; }
UnderFileSystem < Path > function ( UnderFileSystem < Path > arg0 ) { return ( UnderFileSystem < Path > ) Mockito . mock ( UnderFileSystem . class ) ; }
int function ( ) { return subsidyDecreaseBlockCount ; }
void function ( ) { if ( dbuf != null ) { dbuf . close ( ) ; } if ( socket != null ) { socket . close ( ) ; } }
byte [ ] function ( byte [ ] arg0 ) { int loc0 = 0 ; for ( ByteBuffer loc1 : keyIterator ( arg0 ) ) { loc0 ^= FINGERPRINT_HASHER . loc0 ( loc1 . array ( ) , loc1 . arrayOffset ( ) , loc1 . arrayOffset ( ) + loc1 . limit ( ) ) ; } return new byte [ loc0 ] ; }
File function ( ) { return baseFolder ; }
int function ( ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < QR . getNumCols ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < QR . getNumCols ( ) ; loc2 ++ ) { if ( QR . get ( loc1 , loc2 ) != QR . get ( loc2 , loc1 ) ) { loc0 ++ ; } } return loc0 ; }
void function ( byte [ ] arg0 , int arg1 ) { mMediaMuxer . write ( arg0 , arg1 ) ; }
Filter < File > function ( Filter < File > arg0 ) { return new FileNameFilter ( arg0 ) ; }
QName function ( String arg0 ) { if ( arg0 == null || arg0 . length ( ) == 0 ) { throw new IllegalArgumentException ( "srini_string" ) ; } return parsePrefixFormat ( arg0 , arg0 ) ; }
String function ( Object arg0 ) { return String . valueOf ( arg0 ) ; }
int function ( String arg0 ) { if ( prodscan != null ) { return prodscan . getInt ( arg0 ) ; } return 0 ; }
String function ( ) { return url ; }
void function ( String arg0 ) { this . relyingParty = arg0 ; }
T function ( String arg0 , Class < T > arg1 ) { Object loc0 = getJSObject ( ) . get ( arg0 ) ; return ( loc0 != null ? ( T ) loc0 : null ) ; }
String [ ] function ( ) { return dnsSeeds ; }
Map < String , String [ ] > function ( ) { Map < String , String [ ] > loc0 = new HashMap < String , String [ ] > ( 1 ) ; loc0 . put ( "srini_string" , createHeaderValue ( "srini_string" ) ) ; loc0 . put ( "srini_string" , createHeaderValues ( "srini_string" ) ) ; return loc0 ; }
void function ( String arg0 ) { if ( mInodeTree . isOwnerOf ( arg0 ) ) { mPermissionCheckEnabled = true ; } }
void function ( ) { Time loc0 = new Time ( "srini_string" ) ; String loc1 = "srini_string" ; String loc2 = loc0 . toString ( ) ; assertEquals ( loc1 , loc2 ) ; }
Socket function ( ) { return m_socket ; }
boolean function ( String arg0 ) { return usesTypeResolution ( arg0 ) ; }
boolean function ( String arg0 , String arg1 ) { return false ; }
String function ( ) { return this . propertyName ; }
String function ( ) { return "srini_string" + getValueAt ( 0 ) + "srini_string" + getValueAt ( 1 ) + "srini_string" + getValueAt ( 2 ) + "srini_string" ; }
T function ( Runnable arg0 ) { return runOnFxThread ( arg0 , SEMAPHORE_SLEEP_IN_MILLIS ) ; }
void function ( int [ ] arg0 ) { tree = decisionTreeLearning ( arg0 ) ; }
void function ( ) { m_writer . enable ( ) ; }
OutStreamOptions function ( long arg0 ) { mTtl = arg0 ; return this ; }
void function ( EntityClassifier < EntityViewInfo > arg0 ) { entityClassifier = arg0 ; }
void function ( ) { hdg . setVariation ( 1.0 ) ; }
void function ( Long arg0 ) { this . dataSetId = arg0 ; }
void function ( boolean arg0 ) { this . failLifetimeExceedance = arg0 ; }
void function ( ) { fsm . enter ( src , dst , async ) ; }
HashCodeBuilder function ( char arg0 ) { return append ( Character . toUpperCase ( arg0 ) ) ; }
String function ( ) { return this . dataSourceName ; }
void function ( IdentityMapper arg0 ) { this . identityMapper = arg0 ; }
DenseMatrix64F function ( ) { if ( eigenvectors == null ) { for ( int loc0 = 0 ; loc0 < eigenvectors . length ; loc0 ++ ) { eigenvectors [ loc0 ] = helper . getEigenvalue ( loc0 ) ; } } return eigenvectors ; }
String function ( ) { return claimDialect ; }
void function ( ) { String loc0 = WebUtils . convertMsToClockTime ( 1 ) ; Assert . assertEquals ( "srini_string" , loc0 ) ; }
void function ( int arg0 ) { this . bufferedImageType = arg0 ; }
void function ( String arg0 ) { clear ( ) ; appendVal ( arg0 ) ; }
List < String > function ( ) { return userService . getAllUsers ( ) ; }
int function ( ) { return eig . getQuality ( ) ; }
boolean function ( ) { return SecurityContextHolder . getContext ( ) != null ; }
boolean function ( ) { return trackNodeReferences ; }
int function ( int arg0 ) { int loc0 = 0 ; for ( int loc1 = 0 ; loc1 < positions . size ( ) ; loc1 ++ ) { MatrixPosition loc2 = positions . get ( loc1 ) ; loc0 += loc2 . getItemUtility ( arg0 ) ; } return loc0 ; }
void function ( ) { hdt . setheading ( 0.5 ) ; assertEquals ( 0.5 , hdt . setheading ( 0.5 ) , 1E-6 ) ; }
int function ( ) { return subRow ; }
String function ( ) { return this . literalName ; }
int function ( ) { return column ; }
void function ( Crypto arg0 ) { this . signatureCrypto = arg0 ; }
void function ( ) { rmc . setCourse ( 2.0 ) ; assertEquals ( 2.0 , rmc . getCourse ( ) , 0.0 ) ; }
int function ( ) { return maxValue ; }
void function ( Date arg0 ) { set ( arg0 , 0 , 0 , 0 , 0 , 0 ) ; }
void function ( ) { builder . append ( TAG_CLOSE ) ; }
String [ ] function ( ) { return new String [ 0 ] ; }
void function ( String arg0 ) { this . object = arg0 ; }
ToStringHelper function ( long arg0 ) { return addHolder ( String . valueOf ( arg0 ) ) ; }
Conduit function ( ) { return getConduit ( requestContext . get ( "srini_string" ) ) ; }
int function ( ) { return this . buffer . capacity ( ) ; }
String function ( ) { return keyAlias ; }
float function ( double arg0 , double arg1 , double arg2 , double arg3 , double arg4 , double arg5 , double arg6 , double arg7 , double arg8 , double arg9 , double arg10 , double arg11 , double arg12 , double arg13 , double arg14 ) { return ( float ) Math . sqrt ( ( arg0 * arg0 + arg1 * arg1 + arg2 * arg2 + arg3 * arg3 + arg4 * arg4 + arg5 * arg5 + arg6 * arg6 + arg7 * arg7 + arg8 * arg8 + arg9 * arg9 + arg10 * arg10 + arg11 * arg11 + arg12 * arg12
Map < String , String > function ( String arg0 ) { Properties loc0 = getSettings ( arg0 ) ; return getStrings ( loc0 ) ; }
ActionUndo function ( ) { return undoAction ; }
void function ( TpvEvent arg0 ) { for ( ProviderListener < T > loc0 : listeners ) { loc0 . tpvEvent ( arg0 ) ; } }
int function ( Collection < ? > arg0 , Collection < ? > arg1 ) { int loc0 = 0 ; for ( Object loc1 : arg0 ) { if ( ! arg1 . contains ( loc1 ) ) { arg1 . add ( loc1 ) ; loc0 ++ ; } } return loc0 ; }
void function ( O arg0 , O arg1 ) { data . put ( arg0 , arg1 ) ; }
void function ( FullyQualifiedClassType arg0 ) { this . handlerClass = arg0 ; }
String function ( ) { return this . individualUri ; }
void function ( String arg0 ) { logger . info ( arg0 ) ; }
int function ( ) { return formatRepeatCount ; }
void function ( ) { mPlainSaslServer = new PlainSaslServer ( ) ; }
List < SequenceWithUtility > function ( ) { return sequences ; }
Boolean function ( ) { return ( Boolean ) this . values . get ( 0 ) ; }
void function ( boolean arg0 ) { this . dragging = arg0 ; }
String function ( String arg0 ) { try { return getValueOf ( arg0 ) ; } catch ( Exception loc0 ) { return null ; } }
void function ( String arg0 ) { this . roleClassifierType = arg0 ; }
InputStream function ( String arg0 ) { return new BufferedInputStream ( new FileInputStream ( arg0 ) ) ; }
void function ( ) { }
BigInteger function ( BigInteger arg0 , BigInteger arg1 ) { if ( arg0 == null || arg1 == null ) { throw new IllegalArgumentException ( "srini_string" ) ; } return BigInteger . valueOf ( arg0 . gcd ( arg1 ) ) ; }
int function ( ) { return items . size ( ) ; }
void function ( String arg0 ) { this . feedId = arg0 ; }
void function ( short arg0 ) { this . primitiveType = arg0 ; }
int function ( int arg0 , int arg1 , int arg2 ) { for ( int loc0 = 0 ; loc0 < positions . size ( ) ; loc0 ++ ) { MatrixPosition loc1 = positions . get ( loc0 ) ; if ( loc1 . arg0 == arg0 && loc1 . arg1 == arg1 ) { return loc1 . utility ; } } return 0 ; }
void function ( String arg0 , AccessPermission arg1 ) { addRepositoryPermission ( "srini_string" , arg0 , arg1 ) ; }
List < T > function ( List < T > arg0 , T arg1 ) { return arg0 . add ( arg1 ) ; }
boolean function ( StoredBlock arg0 ) { return chainWork . compareTo ( arg0 . chainWork ) < 0 ; }
String function ( ) { return placeId ; }
void function ( boolean arg0 ) { }
ByteBuffer function ( String arg0 ) { return Unpooled . wrappedBuffer ( DECODER . decode ( arg0 ) ) ; }
void function ( String arg0 , long arg1 , long arg2 ) { byte [ ] loc0 = new byte [ WORKER_CAPACITY_BYTES ] ; mBlockMasterClient . read ( arg0 , loc0 , arg1 , arg2 ) ; }
boolean function ( ) { return expires != null ; }
Builder function ( @ Nullable String arg0 ) { this . unsafeReplacement = arg0 ; return this ; }
void function ( String [ ] arg0 ) { System . out . println ( "srini_string" ) ; System . in . read ( ) ; }
void function ( Block arg0 , int arg1 , int arg2 ) { insert ( arg0 , arg1 , arg2 , false ) ; }
boolean function ( ) { return bullets . size ( ) == 0 ; }
void function ( ) { synchronized ( lockObject ) { lockObject . clear ( ) ; } }
void function ( ) { try { ds . close ( ) ; } catch ( SQLException loc0 ) { LOG . error ( "srini_string" , loc0 ) ; } }
List < String > function ( ) { return this . roles ; }
Permission function ( final int arg0 ) { return new Permission ( Mode . applyUMask ( arg0 ) ) ; }
boolean function ( ) { return fin . nextstep ( player ) ; }
Integer function ( ) { return item ; }
void function ( ) { drone . right ( ) ; }
ELvaluator function ( ) { return current . get ( ) ; }
boolean function ( ) { return isNew ; }
Function < Object , E > function ( @ Nullable E arg0 ) { return new ConstantFunction < E > ( arg0 ) ; }
String function ( ) { return wsse11TokenType ; }
void function ( String arg0 ) { this . resultCode = arg0 ; }
Socket function ( String arg0 ) { return getConnection ( arg0 , false ) ; }
void function ( ) { Mockito . when ( mockRepository . getAll ( ) ) . thenReturn ( blackListedSitesSet ) ; }
int function ( String arg0 , int arg1 ) { int loc0 = 0 ; try { loc0 = Integer . parseInt ( arg0 , arg1 ) ; } catch ( NumberFormatException loc1 ) { } return loc0 ; }
AuthenticationHolderEntity function ( ) { return authenticationHolder ; }
void function ( ) { rte . setSentenceCount ( 0 ) ; assertFalse ( rte . getSentenceCount ( ) == 0 ) ; }
Program function ( boolean arg0 , byte [ ] arg1 , boolean arg2 ) { return createCheckmultisigProgram ( arg0 , arg1 , null , arg2 ) ; }
boolean function ( ) { return System . getProperty ( "srini_string" ) != null ; }
void function ( String arg0 ) { this . referencedRevisionLabelB = arg0 ; }
double [ ] function ( int [ ] arg0 ) { double [ ] loc0 = new double [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = calculateExactPValue ( arg0 [ loc1 ] ) ; } return loc0 ; }
Builder function ( char arg0 , char arg1 ) { this . safeMin = arg0 ; this . safeMax = arg1 ; return this ; }
void function ( SourceDataLine . Listener arg0 ) { listeners . add ( arg0 ) ; }
long function ( ) { return timeElapsed ; }
void function ( Graphics2D arg0 ) { }
String function ( ) { return classnamePrefix ; }
void function ( DataSink arg0 , String [ ] arg1 ) { }
byte [ ] function ( ) { return getBytes ( getValue ( ) ) ; }
void function ( ) { mLockManager . lockBlock ( TEST_BLOCK_ID , TEST_SESSION_ID , BlockLockType . BLOCK , 0 ) ; }
void function ( Type arg0 ) { v . remove ( arg0 ) ; }
EndpointReferenceType function ( ) { return faultTo ; }
void function ( String arg0 ) { this . name = arg0 ; }
void function ( long arg0 ) { lastFeedbacktime = arg0 ; }
void function ( String arg0 ) { this . roleClassifier = arg0 ; }
void function ( ) { for ( int loc0 = 0 ; loc0 < INCREASING_BYTES . length ; loc0 ++ ) { mTestStream . write ( INCREASING_BYTES [ loc0 ] ) ; } }
BufferedByteWriter function ( short arg0 ) { ensureCapacity ( 2 ) . putShort ( arg0 ) ; return this ; }
void function ( File arg0 ) { TtlBucket loc0 = getBucketContaining ( arg0 ) ; if ( loc0 != null ) { loc0 . removeFile ( arg0 ) ; } }
String function ( ) { return noRun ; }
void function ( String arg0 , String arg1 , String [ ] arg2 ) { if ( ! mInodeTree . hasPermission ( arg0 , arg1 , arg2 ) ) { throw new IOException ( toExceptionMessage ( arg0 , arg1 , arg2 ) ) ; } }
void function ( Connection arg0 , String arg1 , String arg2 , String arg3 , String arg4 , String arg5 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , String arg12 , String arg13 , String arg14 , String arg15 , String arg6 , String arg7 , String arg8 , String arg9 , String arg10 , String arg11 , arg12 , arg13 , arg14 , arg15 , arg6 , arg7 , arg
void function ( ) { when ( mLineageStore . deleteLineage ( 1L ) ) . thenReturn ( null ) ; mThrown . expect ( IllegalArgumentException . class ) ; mLineageStore . deleteLineage ( 1L ) ; }
boolean function ( ) { return false ; }
CString function ( ) { return handlerName ; }
SSHDisconnectEvent function ( SSHDisconnectEvent arg0 ) { return arg0 ; }
long function ( ) { return messageNumber ; }
List < String > function ( CertificateConstraintsType arg0 ) { List < String > loc0 = CertUtils . getIssuerRegexpConstraintsList ( arg0 ) ; return loc0 ; }
void function ( List < String > arg0 ) { this . registeredAudiences = arg0 ; }
Program function ( ) { return new OP_CHECKmultisig ( ) . build ( ) ; }
long function ( int arg0 ) { return ( arg0 & INT_MASK ) | ( ( arg0 >> 63 ) & INT_MASK ) ; }
FileDescriptor function ( ) { return fd ; }
Site function ( Long arg0 ) { log . debug ( "srini_string" , arg0 ) ; return siteRepository . findOne ( arg0 ) ; }
ByteBuffer function ( int arg0 ) { return getIncreasingIntBuffer ( arg0 , true ) ; }
void function ( ) { assertEquals ( "srini_string" , 0 , ttm . getStatus ( ) ) ; }
boolean function ( ) { return mUri . getPath ( ) . indexOf ( WILDCARD ) != - 1 ; }
void function ( double [ ] arg0 , double [ ] arg1 , double [ ] arg2 , double [ ] arg3 , double [ ] arg4 , double [ ] arg5 , double [ ] arg6 , double [ ] arg7 , double [ ] arg8 , double [ ] arg9 , double [ ] arg10 , double arg11 , double arg12 , double double arg3 , double arg4 , double arg5 , double arg6 , double arg7 , double arg8 , double arg9 , double arg10 , double double arg11 , double double arg12 , double double arg3 , double arg4 , double arg5 , double arg6 , double arg7 , double arg8 , double arg9 , double
String function ( ) { return url . substring ( 0 , url . indexOf ( '?' ) ) ; }
int function ( ) { return black . cardinality ( ) ; }
BookPreview function ( UUID arg0 ) { for ( int loc0 = 0 ; loc0 < data . size ( ) ; loc0 ++ ) { if ( data . get ( loc0 ) . getUuid ( ) . equals ( arg0 ) ) { return data . get ( loc0 ) ; } } return null ; }
boolean function ( ) { return allNodes . isEmpty ( ) ; }
DagEngine function ( ) { return DagEngineFactory . getSystemDagEngine ( ) ; }
void function ( ) { }
TopKSelector < T > function ( T ... arg0 ) { return new TopKSelector < > ( arg0 , comparator ) ; }
ProjectValidation function ( ) { return new ProjectValidation ( ) ; }
boolean function ( Map < String , String > arg0 , String arg1 , String arg2 ) { return arg0 . put ( arg1 , arg2 ) ; }
T function ( T arg0 , T arg1 ) { if ( arg0 == null || arg1 == null ) { return null ; } if ( arg0 != null && arg1 != null ) { if ( arg0 . nullValue ( ) ) { return ( T ) arg0 ; } else if ( arg1 . nullValue ( ) ) { return ( T ) arg1 ; } } return null ; }
String function ( ) { return csr ; }
void function ( String arg0 , String arg1 ) { if ( sIsLogEnabled ) { Log . e ( arg0 , getContent ( getCurrentStackTraceElement ( ) ) + "srini_string" + arg1 ) ; } }
Set < String > function ( ) { return recentlyGrantedPermissions ; }
boolean function ( final Fiat arg0 ) { return this . value < arg0 . value ; }
void function ( String arg0 ) { this . type = arg0 ; }
String function ( String arg0 ) { return arg0 + "srini_string" ; }
BufferedByteWriter function ( int arg0 ) { ensureCapacity ( 4 ) ; mWriter . putInt ( arg0 ) ; return this ; }
String function ( ) { return "srini_string" ; }
SimpleMatrix64F function ( ) { SimpleMatrix64F loc0 = new SimpleMatrix64F ( mat . numRows ( ) , mat . numCols ( ) ) ; for ( int loc1 = 0 ; loc1 < mat . numCols ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < mat . numCols ( ) ; loc2 ++ ) { loc0 . set ( loc1 , loc2 , getSVD ( loc1 , loc2 ) . get ( 0 , 0 ) ) ; } } return loc0 ; }
OpenIDClaimMapper function ( ) { if ( instance == null ) { instance = new OpenIDClaimMapper ( ) ; } return instance ; }
void function ( ) { _freeHessian2Input . free ( ) ; _freeHessian2Output . free ( ) ; }
void function ( String [ ] arg0 ) { sshExample ( ) ; }
String [ ] function ( String [ ] arg0 ) { String [ ] loc0 = new String [ arg0 . length - 1 ] ; System . arraycopy ( arg0 , 1 , loc0 , 0 , loc0 . length ) ; return loc0 ; }
Abstraction function ( ) { return this . abstraction ; }
boolean function ( InodeFile arg0 ) { return mTtlIntervalStartTimeMs > arg0 . mTtlIntervalStartTimeMs ; }
Document function ( InputStream arg0 , MediaType arg1 ) { return extractor . extract ( arg0 , arg1 ) ; }
List < T > function ( int arg0 ) { return new TopKSelector < T > ( this , arg0 ) . buffer ( ) ; }
void function ( ) { ZDAParser loc0 = new ZDAParser ( EXAMPLE ) ; loc0 . parse ( "srini_string" ) ; }
void function ( ) { String loc0 = "srini_string" ; Date loc1 = instance . getDate ( ) ; cal . setTime ( loc1 ) ; loc1 = instance . getDate ( ) ; cal . setTime ( loc1 ) ; assertEquals ( loc0 , loc1 . toString ( ) ) ; }
void function ( ) { LanguageVersion loc0 = LanguageVersion . parse ( name + "srini_string" + version ) ; assertTrue ( expected . equals ( loc0 ) ) ; }
String function ( String arg0 ) { return arg0 . replaceAll ( "srini_string" , "srini_string" ) ; }
void function ( BigDecimal arg0 ) { this . expDataUnitId = arg0 ; }
OperationMetric function ( ) { return calculator ; }
void function ( ) { GSVSentence loc0 = empty ; assertEquals ( 0 , loc0 . sentenceIndex ) ; }
SiteUrl function ( @ RequestBody SiteUrl arg0 ) { log . debug ( "srini_string" , arg0 ) ; return this . siteUrlRepository . save ( arg0 ) ; }
DataServerMessage function ( long arg0 , long arg1 , ByteBuffer arg2 ) { ByteBuffer loc0 = ByteBuffer . allocate ( REQUEST_HEADER_LENGTH + arg2 . remaining ( ) ) ; loc0 . put ( REQUEST_HEADER_LENGTH , arg0 ) ; loc0 . putLong ( arg1 ) ; loc0 . putInt ( arg2 . remaining ( ) ) ; mHeader . put ( loc0 ) ; mIsMessageReady = true ; return new DataServerMessage ( mBlockId , mOpCode , loc0 , arg2 ) ; }
boolean function ( ) { return isClosed ( ) ; }
void function ( ) { assertEquals ( 0 , 0.0 ) ; }
SSHDisconnectEvent function ( SSHDisconnectEvent arg0 ) { return arg0 ; }
String function ( ) { return value ; }
boolean function ( ) { if ( idx == null ) { idx = ts . next ( ) ; } beforeFirst ( ) ; return idx . moveTo ( val ) ; }
void function ( ) { seekInternal ( mEOFBlockStream , 0 ) ; }
void function ( ) { Date loc0 = instance . loc0 ( ) ; cal . setDate ( 2 , 3 , 4 , 2000 ) ; assertEquals ( 2 , loc0 . getMonth ( ) ) ; }
String function ( String arg0 , String arg1 , double arg2 , int arg3 ) { return retrieveBestIndividual ( arg0 , arg1 , arg2 , arg3 , 0 ) ; }
RPPA function ( ) { return rppaValue ; }
void function ( QName arg0 , String arg1 ) { path . push ( new Attribute ( arg0 , arg1 ) ) ; }
EncryptionProperties function ( ) { return encryptionProperties ; }
AccessToken function ( String arg0 , String ... arg1 ) { return getAccessTokenForUser ( arg0 , arg1 ) ; }
void function ( @ Nullable Closeable arg0 , boolean arg1 ) { try { if ( arg0 != null ) { arg0 . close ( ) ; } } catch ( IOException loc0 ) { if ( arg1 ) { throw loc0 ; } } }
void function ( String arg0 , String arg1 ) { properties . setProperty ( arg0 , arg1 ) ; }
List < RSSEntry > function ( ) { return _items ; }
void function ( ItemStack arg0 ) { invMap . put ( arg0 , count ++ ) ; }
void function ( ) { instance . date ( ) ; }
int function ( ) { return vstack . peek ( ) ; }
String function ( String arg0 ) { int loc0 = arg0 . lastIndexOf ( "srini_string" ) ; if ( loc0 == - 1 ) { return arg0 ; } else { return arg0 . substring ( 0 , loc0 ) ; } }
void function ( ) { SetAttributeOptions loc0 = new SetAttributeOptions ( ) ; assertEquals ( "srini_string" , loc0 . defaults ( ) ) ; }
long function ( ) { long loc0 = i ; for ( int loc1 = 0 ; loc1 < i ; loc1 ++ ) { loc0 <<= 8 ; loc0 |= ( 1L << loc1 ) ; } return loc0 ; }
void function ( List < String > arg0 ) { this . produceMediaTypes = arg0 ; }
boolean function ( ) { return ! rawCommand . trim ( ) . equals ( "srini_string" ) ; }
void function ( ) { mS3UnderFileSystem . delete ( SRC , true ) ; Assert . assertFalse ( mS3UnderFileSystem . delete ( DST , true ) ) ; }
int function ( ) { return requestedCameraId ; }
ByteBuffer function ( List < ByteBuffer > arg0 ) { ByteBuffer loc0 = null ; for ( ByteBuffer loc1 : arg0 ) { loc0 = loc1 . duplicate ( ) ; } return loc0 ; }
String function ( ) { return title ; }
void function ( VertexLabelType arg0 , VertexLabelType arg1 , EdgeLabelType arg2 ) { addEdge ( arg0 , arg1 , arg2 , true ) ; }
WritableMap function ( String arg0 , int arg1 , String arg2 ) { WritableMap loc0 = new WritableMap ( ) ; loc0 . put ( "srini_string" , arg2 ) ; return loc0 ; }
List function ( ) { return LOGGER_NAMES ; }
void function ( Jobsgroup arg0 ) { jobs . put ( arg0 . getId ( ) , arg0 ) ; }
int function ( ) { return this . start ; }
void function ( UriPrefixPair [ ] arg0 ) { this . packagePrefixes = arg0 ; }
void function ( long arg0 ) { this . seqId = arg0 ; }
ProfileData function ( ) { return profileData ; }
void function ( DenseMatrix64F arg0 , double arg1 , DenseMatrix64F arg2 ) { DenseMatrix64F loc0 = new DenseMatrix64F ( arg2 . size ( ) ) ; for ( int loc1 = 0 ; loc1 < arg2 . size ( ) ; loc1 ++ ) { for ( int loc2 = 0 ; loc2 < arg2 . size ( ) ; loc2 ++ ) { loc0 . set ( loc1 , loc2 , arg0 . get ( loc1 , loc2 ) - arg1 ) ; } }
Mode function ( int arg0 ) { return new Mode ( arg0 , false ) ; }
Waypoint function ( double arg0 , double arg1 , double arg2 ) { return new Waypoint ( arg0 , arg1 , arg2 ) ; }
void function ( long arg0 ) { this . testId = arg0 ; }
void function ( boolean arg0 ) { this . saveW = arg0 ; }
void function ( final WriteHandlerImpl arg0 ) { m_writeHandler = arg0 ; }
byte [ ] function ( ) { format . checkType ( 'b' , false ) ; byte [ ] loc0 = new byte [ valueLen ] ] ] ( ) ; format . consume ( ) ; format . consume ( 8 ) ; format . consume ( ) ; return loc0 ; }
LogoutRequestSender function ( ) { return instance ; }
int function ( ) { return num ; }
String function ( ) { return mUri . getPath ( ) ; }
void function ( ResultType arg0 , ResultType arg1 ) { if ( arg0 != null ) { arg0 . copyValue ( arg1 ) ; } }
boolean function ( ) { return ! jsObject . isNull ( ) ; }
void function ( ) { view . draw ( mRect , mRect . left , mRect . top , mRect . right , mRect . bottom ) ; }
void function ( ) { String loc0 = "srini_string" ; PositionParser loc1 = new PositionParser ( ) ; loc1 . setLatitude ( 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123
void function ( ) { mIsUndoOrRedo = false ; }
void function ( String arg0 , HighLevelChangeRenaming arg1 ) { this . highLevelChangesRenaming . put ( arg0 , arg1 ) ; }
void function ( String arg0 , RequestListener arg1 , final Object arg2 ) { request ( arg0 , new Bundle ( ) , "srini_string" , arg1 , arg2 ) ; }
void function ( Rotation arg0 ) { this . rotation = arg0 ; }
int function ( ) { return match . length ; }
void function ( ) { mBuffer = ByteBuffer . allocate ( LENGTH ) ; }
void function ( ) { assertTrue ( rte . isFirst ( ) ) ; }
void function ( String arg0 ) { _title = arg0 ; }
void function ( long arg0 ) { this . geneB = arg0 ; }
void function ( ) { when ( mWriter . append ( TEST_BLOCK_SIZE ) ) . thenReturn ( TEST_BLOCK_SIZE ) ; mWriter . close ( ) ; }
void function ( ) { BlockId loc0 = BlockId . createBlockId ( 1L , MAX_SEQUENCE_NUMBER ) ; Assert . assertEquals ( 1L , loc0 . getSequenceNumber ( ) ) ; }
void function ( ) { URL loc0 = new URL ( "srini_string" ) ; String loc1 = loc0 . getFile ( ) ; runFullTest ( loc1 ) ; verifyResults ( loc0 ) ; }
StmtNode function ( String arg0 , Map < String , String > arg1 ) { return parse ( arg0 , arg1 , null ) ; }
List < String > function ( ) { return redirectUris ; }
byte [ ] function ( ) { return errors ; }
boolean function ( UserDetails arg0 , UserDetails arg1 ) { if ( arg0 == null || arg1 == null ) { log . error ( "srini_string" + arg0 + "srini_string" + arg1 + "srini_string" ) ; return false ; } return arg0 . equals ( arg1 ) ; }
boolean function ( String arg0 , String arg1 ) { return match ( arg0 , arg1 , false ) ; }
Iterator function ( ) { return new ReverseLogIterator ( currentblk , FIRST_POS ) ; }
GetOfferDetailsResponse . Return . Account . Address function ( ) { return new GetOfferDetailsResponse . Return . Account . Address ( ) ; }
void function ( File arg0 ) { filemgr . append ( arg0 , contents ) ; }
void function ( ) { actualNumNodes ++ ; expectedNumNodes ++ ; }
void function ( int arg0 ) { this . conflictsNotApproved = arg0 ; }
void function ( EdgeLabelType arg0 ) { globalEdgeLookup . remove ( arg0 ) ; }
void function ( EntityLivingBase arg0 , double arg1 ) { if ( ! hasAttackTarget ( arg0 , arg1 ) ) { return ; } mob . moveAI ( arg0 , arg1 ) ; }
Map < String , String > function ( FederationModel arg0 , Map < String , String > arg1 ) { Map < String , String > loc0 = new HashMap < String , String > ( ) ; loc0 . putAll ( arg1 ) ; return SettingsHelper . getGitBlitSettings ( arg0 , loc0 ) ; }
boolean function ( char arg0 [ ] , int arg1 , int arg2 ) { int loc0 = arg2 - arg1 + 1 ; return ( arg0 [ arg1 ] == arg0 [ loc0 ] ) ; }
String function ( ) { return mHostname ; }
String function ( UnicodeEscaper arg0 , char arg1 ) { return stringOrNull ( arg0 . escape ( arg1 ) ) ; }
void function ( ) { Assert . assertTrue ( mOSSUnderFileSystem . rename ( SRC , DST ) ) ; }
ScriptBuilder function ( int arg0 ) { return addChunk ( chunks . size ( ) , arg0 ) ; }
void function ( ) { Preconditions . checkState ( mManagerView != null , "srini_string" ) ; mManagerView = mFactory . create ( mTestFolder ) ; }
void function ( String arg0 ) { this . contentEncoding = arg0 ; }
void function ( ) { }
void function ( ) { _use_count ++ ; }
void function ( ) { if ( hasNext ( ) ) { i ++ ; } }
void function ( Context arg0 , String arg1 ) { Intent loc0 = makeIntent ( arg0 , Intent . ACTION_VIEW ) ; loc0 . putExtra ( INTENT_EXTRA_TRANSACTION_HASH , arg1 ) ; arg0 . startActivityForResult ( loc0 ) ; }
Iterator < OrderLineItem > function ( ) { return order . getItems ( ) ; }
void function ( FolderInfo . CheckedFlag arg0 ) { this . checkedFlag = arg0 ; }
void function ( ) { }
String function ( int arg0 , int arg1 ) { Buffer loc0 = myBuffers . get ( arg0 ) ; loc0 . sLock ( ) ; try { return loc0 . getString ( arg1 ) ; } finally { loc0 . unlock ( ) ; } }
byte [ ] function ( ) { if ( header == null ) { return null ; } byte [ ] loc0 = new byte [ size ] ; System . arraycopy ( header , 0 , loc0 , 0 , size ) ; return loc0 ; }
void function ( Rule arg0 ) { languageToRuleChainVisitor . put ( arg0 . getLanguage ( ) , arg0 ) ; }
void function ( ) { this . triggerType . activate ( ) ; }
void function ( ) { tagList . openTag ( "srini_string" ) ; tagList . openTag ( "srini_string" ) ; tagList . closeTag ( "srini_string" ) ; }